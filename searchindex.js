Search.setIndex({"titles": ["Additional Resources", "electricpy", "electricpy.acpiv", "electricpy.bode", "electricpy.bode.bode", "electricpy.bode.sbode", "electricpy.bode.zbode", "electricpy.bridge_impedance", "electricpy.characterz", "electricpy.conversions", "electricpy.conversions.abc_to_seq", "electricpy.conversions.btu", "electricpy.conversions.btu_to_kwh", "electricpy.conversions.db_to_voltage", "electricpy.conversions.db_to_vref", "electricpy.conversions.dbmw_to_dbw", "electricpy.conversions.dbmw_to_watts", "electricpy.conversions.dbw_to_dbmw", "electricpy.conversions.dbw_to_watts", "electricpy.conversions.hertz", "electricpy.conversions.horsepower", "electricpy.conversions.hp_to_watts", "electricpy.conversions.hz_to_rad", "electricpy.conversions.hz_to_rpm", "electricpy.conversions.kwh", "electricpy.conversions.kwh_to_btu", "electricpy.conversions.phs_to_seq", "electricpy.conversions.rad_to_hz", "electricpy.conversions.rad_to_rpm", "electricpy.conversions.radsec", "electricpy.conversions.rpm_to_hz", "electricpy.conversions.rpm_to_rad", "electricpy.conversions.seq_to_abc", "electricpy.conversions.seq_to_phs", "electricpy.conversions.sequencez", "electricpy.conversions.voltage_to_db", "electricpy.conversions.watts", "electricpy.conversions.watts_to_dbmw", "electricpy.conversions.watts_to_dbw", "electricpy.conversions.watts_to_hp", "electricpy.cosfilt", "electricpy.cprint", "electricpy.curdiv", "electricpy.de_calc", "electricpy.dynetz", "electricpy.fault", "electricpy.fault.busvolt", "electricpy.fault.correctedcurrents", "electricpy.fault.ct_cclass", "electricpy.fault.ct_satratburden", "electricpy.fault.ct_saturation", "electricpy.fault.ct_timetosat", "electricpy.fault.ct_vpeak", "electricpy.fault.distmeasz", "electricpy.fault.double_phase_to_ground_fault", "electricpy.fault.faultratio", "electricpy.fault.genlossfield", "electricpy.fault.highzmini", "electricpy.fault.highzvpickup", "electricpy.fault.indmacheigenvalues", "electricpy.fault.indmachphs3sc", "electricpy.fault.indmachphs3torq", "electricpy.fault.instoc", "electricpy.fault.iopirt", "electricpy.fault.phase_to_phase_fault", "electricpy.fault.phs1g", "electricpy.fault.phs1mvasc", "electricpy.fault.phs2", "electricpy.fault.phs2g", "electricpy.fault.phs3", "electricpy.fault.phs3mvasc", "electricpy.fault.pickup", "electricpy.fault.pktransrecvolt", "electricpy.fault.poleopen1", "electricpy.fault.poleopen2", "electricpy.fault.protectiontap", "electricpy.fault.residcomp", "electricpy.fault.scMVA", "electricpy.fault.short_circuit_mva", "electricpy.fault.single_phase_to_ground_fault", "electricpy.fault.symrmsfaultcur", "electricpy.fault.synmach_Iasym", "electricpy.fault.synmach_Isym", "electricpy.fault.synmach_ifault", "electricpy.fault.tdradial", "electricpy.fault.thermaltime", "electricpy.fault.three_phase_fault", "electricpy.fault.tocreset", "electricpy.fault.toctriptime", "electricpy.fault.transmismatch", "electricpy.fault.trvresistor", "electricpy.fftplot", "electricpy.fftsumplot", "electricpy.funcfft", "electricpy.geninternalv", "electricpy.gmd", "electricpy.harmonics", "electricpy.hartleydata", "electricpy.ic_555_astable", "electricpy.ic_555_monostable", "electricpy.induction_machine_slip", "electricpy.instpower", "electricpy.ipu", "electricpy.iscrl", "electricpy.latex", "electricpy.latex.clatex", "electricpy.latex.tflatex", "electricpy.led_resistor", "electricpy.lm317", "electricpy.machslip", "electricpy.math", "electricpy.math.convolve", "electricpy.math.funcrms", "electricpy.math.gausdist", "electricpy.math.gaussian", "electricpy.math.probdensity", "electricpy.math.rfft", "electricpy.math.step", "electricpy.motorstartcap", "electricpy.natfreq", "electricpy.nlinpf", "electricpy.non_linear_pf", "electricpy.parallel_plate_capacitance", "electricpy.passive", "electricpy.passive.air_core_inductance", "electricpy.passive.capbacktoback", "electricpy.passive.capenergy", "electricpy.passive.captransfer", "electricpy.passive.farads", "electricpy.passive.inductive_voltdiv", "electricpy.passive.inductorcharge", "electricpy.passive.inductordischarge", "electricpy.passive.inductorenergy", "electricpy.passive.loadedvcapdischarge", "electricpy.passive.rectifiercap", "electricpy.passive.timedischarge", "electricpy.passive.vcapcharge", "electricpy.passive.vcapdischarge", "electricpy.peak", "electricpy.pfcorrection", "electricpy.phaseline", "electricpy.phasor", "electricpy.phs3valpha", "electricpy.pi_attenuator", "electricpy.powerflow", "electricpy.powerimpedance", "electricpy.powerset", "electricpy.primary", "electricpy.propagation_constants", "electricpy.puchgbase", "electricpy.reactance", "electricpy.rms", "electricpy.rxrecompose", "electricpy.sampfft", "electricpy.secondary", "electricpy.shannondata", "electricpy.short_circuit_current", "electricpy.sim", "electricpy.sim.NewtonRaphson", "electricpy.sim.digifiltersim", "electricpy.sim.mbuspowerflow", "electricpy.sim.nr_pq", "electricpy.sim.parabolic_response", "electricpy.sim.ramp_response", "electricpy.sim.statespace", "electricpy.sim.step_response", "electricpy.sinfilt", "electricpy.slew_rate", "electricpy.solenoid_inductance", "electricpy.suspension_insulators", "electricpy.syncspeed", "electricpy.t_attenuator", "electricpy.tap_changing_transformer", "electricpy.tcycle", "electricpy.transposez", "electricpy.unbalance", "electricpy.vipf", "electricpy.visu", "electricpy.visu.InductionMotorCircle", "electricpy.visu.PowerCircle", "electricpy.visu.SeriesRLC", "electricpy.visu.convbar", "electricpy.visu.phasorplot", "electricpy.visu.powertriangle", "electricpy.visu.receiving_end_power_circle", "electricpy.visu.sending_end_power_circle", "electricpy.voltdiv", "electricpy.vscdcbus", "electricpy.vscgains", "electricpy.wireresistance", "electricpy.wrms", "electricpy.zdecompose", "electricpy.zener_diode_power", "electricpy.zener_diode_required_resistor", "electricpy.zperlength", "electricpy.zpu", "electricpy.zrecompose", "electricpy.zsource", "Recent Changes", "Constants", "ElectricPy API", "ElectricPy"], "terms": {"numpi": [0, 1, 9, 10, 26, 32, 33, 34, 40, 41, 51, 60, 61, 96, 104, 105, 110, 111, 113, 114, 115, 116, 117, 153, 158, 160, 161, 166, 181, 182, 199, 200, 201], "http": [0, 108, 201], "org": 0, "scipi": [0, 1, 9, 104, 110, 200, 201], "matplotlib": [0, 91, 92, 182, 183, 201], "sympi": [0, 201], "www": [0, 108], "en": [0, 201], "index": [0, 46, 160], "html": 0, "pyomo": 0, "pint": 0, "readthedoc": [0, 201], "io": [0, 131, 201], "stabl": 0, "numdifftool": [0, 201], "latest": [0, 201], "python": [0, 106, 141, 180, 200, 201], "comtrad": 0, "file": [0, 4, 5, 6, 163], "interpret": [0, 77, 78, 194], "github": [0, 201], "com": [0, 108, 201], "dparrini": 0, "writer": 0, "relihanl": 0, "comtradehandl": 0, "arc": 0, "flash": 0, "calcul": [0, 1, 4, 7, 8, 9, 19, 20, 21, 22, 27, 29, 34, 36, 39, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 95, 96, 97, 98, 99, 100, 101, 103, 104, 107, 108, 109, 110, 112, 113, 115, 122, 125, 126, 127, 128, 130, 131, 132, 133, 136, 137, 142, 144, 146, 148, 150, 155, 156, 158, 160, 161, 162, 163, 165, 167, 168, 169, 170, 172, 174, 175, 186, 187, 188, 189, 190, 192, 193, 194, 197, 200, 201], "liaungyip": 0, "arcflash": [0, 201], "pandapow": 0, "start": [0, 90, 115, 118, 137, 158, 169], "pypsa": 0, "pypow": 0, "longer": 0, "support": [0, 1, 2, 9, 104, 110, 200, 201], "pypi": [0, 201], "project": [0, 201], "minpow": 0, "adamgreenhal": 0, "oemof": 0, "open": [0, 73, 74, 201], "energi": [0, 126, 127, 130, 131, 132, 135], "model": 0, "framework": 0, "powergama": 0, "bitbucket": 0, "harald_g_svendsen": 0, "wiki": 0, "home": 0, "descript": [1, 3, 9, 41, 45, 104, 110, 123, 141, 157, 177], "packag": [1, 3, 9, 104, 110, 200, 201], "main": 1, "modul": [1, 9, 104, 110, 157, 177, 200, 201], "import": [1, 2, 3, 9, 10, 19, 22, 23, 26, 27, 28, 29, 30, 31, 32, 33, 41, 42, 45, 104, 110, 117, 138, 140, 141, 146, 150, 151, 157, 158, 160, 161, 173, 176, 178, 179, 180, 181, 182, 184, 186, 200, 201], "ep": [1, 2, 10, 26, 32, 33, 41, 42, 138, 140, 146, 150, 151, 158, 160, 173, 176, 186, 200, 201], "fill": [1, 9, 123, 177, 200, 201], "evalu": [1, 8, 13, 14, 15, 16, 17, 18, 23, 28, 30, 31, 34, 35, 37, 38, 40, 41, 46, 47, 48, 50, 53, 54, 55, 57, 58, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 79, 80, 84, 86, 88, 89, 90, 93, 94, 96, 98, 99, 101, 102, 106, 107, 112, 118, 119, 120, 121, 128, 139, 140, 145, 147, 148, 152, 153, 154, 160, 166, 173, 180, 190, 195, 196, 197, 200, 201], "plot": [1, 3, 4, 5, 6, 51, 91, 92, 159, 162, 163, 164, 165, 177, 178, 179, 180, 181, 182, 183, 190, 200, 201], "function": [1, 2, 3, 4, 5, 6, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 20, 23, 24, 25, 28, 30, 31, 34, 35, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 56, 58, 64, 65, 67, 68, 69, 71, 72, 73, 74, 76, 77, 78, 79, 80, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 123, 125, 126, 127, 128, 132, 136, 137, 139, 140, 141, 144, 145, 146, 148, 149, 152, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 170, 175, 176, 177, 181, 182, 183, 186, 187, 188, 190, 191, 192, 193, 196, 200, 201], "thi": [1, 9, 13, 14, 15, 16, 17, 18, 23, 28, 30, 31, 35, 37, 38, 41, 42, 44, 46, 48, 50, 54, 64, 65, 67, 68, 69, 73, 74, 79, 83, 86, 98, 99, 100, 101, 104, 106, 107, 109, 110, 113, 114, 115, 116, 120, 121, 125, 140, 144, 145, 146, 148, 150, 159, 160, 162, 163, 165, 167, 172, 177, 178, 179, 180, 182, 183, 186, 187, 188, 190, 191, 192, 193, 197, 200, 201], "provid": [1, 4, 71, 95, 106, 117, 128, 138, 140, 146, 150, 151, 160, 161, 162, 163, 164, 165, 182, 183, 194, 199, 200, 201], "wide": [1, 200, 201], "arrai": [1, 10, 26, 32, 33, 34, 40, 41, 51, 54, 60, 61, 64, 65, 67, 68, 73, 74, 79, 96, 105, 111, 113, 114, 115, 116, 117, 141, 153, 158, 160, 161, 164, 166, 181, 182, 200, 201], "capabl": [1, 164, 200, 201], "ani": [1, 71, 125, 164, 200, 201], "electr": [1, 9, 41, 42, 45, 47, 48, 49, 50, 51, 52, 56, 61, 71, 83, 89, 94, 98, 99, 110, 123, 144, 147, 154, 157, 170, 173, 177, 186, 200, 201], "engin": [1, 9, 41, 45, 110, 157, 177, 200, 201], "built": [1, 9, 104, 110, 200, 201], "oper": [1, 9, 47, 63, 84, 104, 110, 145, 149, 170, 182, 200, 201], "similar": [1, 9, 104, 110, 182, 200, 201], "i": [1, 2, 4, 5, 6, 7, 9, 34, 41, 42, 44, 46, 48, 50, 51, 53, 55, 56, 58, 76, 77, 78, 84, 85, 87, 88, 94, 100, 101, 103, 104, 105, 106, 108, 110, 111, 113, 114, 116, 118, 119, 120, 121, 122, 125, 129, 130, 131, 132, 136, 137, 140, 143, 144, 145, 146, 150, 156, 158, 159, 160, 161, 162, 163, 165, 167, 168, 169, 171, 172, 175, 176, 177, 178, 179, 182, 183, 186, 187, 188, 189, 190, 191, 192, 193, 194, 197, 200, 201], "design": [1, 9, 41, 44, 46, 101, 103, 104, 110, 113, 114, 116, 120, 121, 140, 144, 146, 156, 167, 177, 178, 179, 182, 183, 186, 188, 190, 200, 201], "aid": [1, 9, 104, 110, 200, 201], "scientif": [1, 9, 104, 110, 200, 201], "": [2, 5, 6, 46, 47, 57, 63, 75, 76, 94, 97, 102, 105, 106, 109, 112, 115, 119, 124, 139, 145, 146, 150, 155, 158, 161, 164, 170, 183, 195, 197, 199, 201], "none": [2, 4, 5, 6, 41, 42, 44, 49, 51, 53, 57, 72, 75, 77, 78, 84, 91, 92, 94, 96, 98, 99, 102, 103, 106, 120, 121, 122, 125, 129, 139, 140, 145, 146, 152, 156, 159, 160, 161, 162, 163, 164, 165, 167, 168, 176, 179, 182, 183, 184, 185, 186, 189, 194, 195, 196, 197], "vll": [2, 72, 75, 102, 125, 128, 139, 140, 152, 187, 195, 196], "vln": [2, 72, 75, 102, 125, 128, 139, 140, 152, 195, 196], "v": [2, 41, 80, 103, 108, 118, 126, 127, 128, 130, 134, 136, 137, 139, 142, 145, 148, 156, 161, 167, 176, 179, 184, 185, 187, 197], "pf": [2, 145, 146, 176, 183], "sourc": [2, 4, 5, 6, 7, 8, 10, 12, 13, 14, 15, 16, 17, 18, 21, 22, 23, 25, 27, 28, 30, 31, 32, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197], "ac": [2, 100, 103, 146, 156, 178, 194], "power": [2, 13, 14, 15, 16, 17, 18, 20, 21, 36, 37, 38, 39, 45, 49, 63, 66, 70, 75, 101, 102, 120, 121, 128, 133, 135, 139, 144, 145, 146, 152, 158, 160, 161, 172, 176, 178, 179, 183, 184, 185, 187, 190, 192, 195, 196, 197, 201], "voltag": [2, 13, 14, 35, 41, 42, 46, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 86, 90, 94, 102, 103, 107, 108, 118, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 139, 140, 141, 142, 144, 145, 147, 152, 154, 156, 160, 161, 167, 169, 172, 175, 176, 178, 179, 182, 184, 185, 186, 187, 188, 192, 193, 195, 196, 197, 201], "current": [2, 7, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 67, 68, 69, 71, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 94, 102, 103, 107, 118, 125, 130, 131, 132, 134, 139, 140, 141, 147, 149, 154, 156, 159, 175, 176, 178, 192, 193], "relat": [2, 98, 99, 123, 130, 140, 174, 200, 201], "relationship": 2, "return": [2, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 158, 160, 161, 164, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197], "appar": [2, 49, 75, 128, 139, 145, 146, 183, 184, 185, 197], "one": [2, 47, 63, 111, 117, 120, 121, 122, 125, 129, 140, 158, 168, 171, 172, 186, 189, 201], "variou": [2, 178], "form": [2, 41, 105, 116, 140, 159, 160, 161, 180], "paramet": [2, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197], "complex": [2, 7, 8, 10, 26, 32, 33, 34, 41, 46, 47, 53, 54, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 73, 74, 76, 79, 86, 89, 93, 94, 103, 105, 140, 141, 142, 144, 145, 147, 148, 149, 150, 152, 153, 154, 156, 176, 179, 182, 183, 184, 185, 186, 187, 196, 197], "option": [2, 4, 5, 6, 8, 34, 40, 41, 42, 43, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 83, 84, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 98, 99, 101, 102, 103, 105, 106, 107, 108, 109, 113, 114, 115, 116, 118, 119, 122, 128, 129, 135, 139, 140, 142, 145, 146, 147, 150, 152, 153, 154, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 173, 174, 175, 176, 182, 183, 184, 185, 186, 187, 188, 189, 190, 194, 195, 196, 197], "mai": [2, 41, 43, 47, 56, 60, 61, 63, 84, 87, 88, 105, 108, 119, 135, 145, 150, 155, 160, 170, 180, 182, 186, 194, 197, 200, 201], "singl": [2, 10, 26, 32, 33, 34, 46, 54, 64, 65, 66, 67, 68, 69, 73, 74, 79, 86, 102, 105, 106, 118, 182], "three": [2, 42, 47, 51, 58, 60, 61, 63, 69, 70, 77, 78, 86, 108, 120, 121, 122, 125, 142, 143, 152, 171, 176, 189, 196], "phase": [2, 10, 26, 32, 33, 34, 46, 47, 53, 54, 58, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 77, 78, 79, 86, 94, 102, 118, 125, 140, 141, 142, 152, 174, 175, 188, 194, 196], "specifi": [2, 4, 6, 8, 40, 41, 46, 51, 53, 56, 60, 76, 84, 85, 87, 88, 90, 96, 101, 103, 105, 106, 113, 116, 117, 129, 135, 141, 145, 146, 147, 154, 156, 159, 160, 161, 162, 164, 165, 166, 167, 176, 182, 194, 197], "volt": [2, 53, 57, 72, 75, 81, 82, 83, 108, 118, 133, 135, 141, 167, 176, 192, 193, 201], "amp": [2, 42, 53, 55, 58, 62, 71, 80, 81, 82, 83, 84, 87, 88, 89, 94, 118, 134, 176], "va": [2, 49, 75, 142], "line": [2, 4, 5, 6, 8, 43, 53, 54, 58, 64, 65, 67, 68, 72, 75, 76, 79, 80, 102, 125, 139, 140, 144, 145, 148, 152, 169, 172, 174, 179, 182, 183, 187, 194, 195, 196, 197], "neutral": [2, 53, 72, 75, 80, 94, 102, 125, 139, 140, 145, 152, 195, 196, 197], "float": [2, 4, 5, 6, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 35, 36, 37, 38, 39, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 71, 72, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 106, 107, 108, 109, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197], "factor": [2, 47, 49, 53, 58, 62, 63, 76, 103, 120, 121, 139, 145, 146, 150, 156, 176, 179, 180, 183, 184, 185], "condit": [2, 7, 160, 161, 164], "an": [2, 4, 5, 6, 51, 59, 60, 61, 62, 66, 70, 71, 100, 103, 115, 116, 130, 131, 132, 138, 144, 150, 152, 156, 158, 159, 161, 170, 180, 181, 182, 194, 196], "appropri": [2, 107, 161], "valu": [2, 5, 6, 10, 26, 32, 33, 34, 40, 41, 43, 44, 46, 50, 51, 54, 56, 60, 64, 65, 67, 68, 69, 72, 73, 74, 77, 78, 79, 84, 86, 89, 90, 91, 93, 94, 95, 102, 103, 105, 106, 107, 112, 115, 116, 118, 119, 122, 127, 129, 130, 131, 132, 136, 137, 138, 139, 140, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 156, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 173, 175, 176, 179, 183, 187, 188, 189, 190, 193, 195, 196, 197, 199], "onli": [2, 60, 125, 158], "set": [2, 34, 41, 43, 44, 46, 47, 55, 56, 57, 58, 59, 62, 63, 71, 75, 77, 78, 84, 87, 88, 89, 95, 106, 109, 111, 119, 120, 121, 135, 145, 146, 152, 159, 160, 162, 163, 165, 170, 174, 182, 191, 194, 197, 201], "other": [2, 85, 120, 121, 129, 140, 143, 171, 201], "argument": [2, 4, 5, 6, 34, 40, 41, 42, 46, 51, 53, 54, 58, 60, 64, 65, 67, 68, 69, 71, 72, 73, 74, 76, 77, 78, 79, 84, 86, 93, 95, 105, 106, 113, 114, 116, 119, 120, 121, 129, 134, 140, 146, 147, 153, 154, 158, 159, 160, 161, 162, 164, 165, 166, 167, 175, 176, 182, 183, 194, 197], "convert": [2, 10, 11, 12, 15, 16, 17, 18, 19, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 38, 44, 56, 135, 138, 140, 147, 151, 154, 187, 188], "point": [2, 4, 51, 80, 90, 92, 106, 113, 115, 145, 160, 161, 162, 163, 164, 165, 182, 190], "represent": [2, 138, 141, 151], "exampl": [2, 10, 19, 22, 23, 26, 27, 28, 29, 30, 31, 32, 33, 41, 42, 117, 138, 140, 141, 146, 150, 151, 158, 160, 161, 173, 176, 178, 179, 180, 181, 182, 184, 186], "550": 2, "167": [2, 10, 26, 32, 33], "3": [2, 4, 7, 34, 41, 44, 52, 54, 60, 61, 65, 66, 68, 79, 102, 103, 105, 117, 135, 140, 145, 156, 162, 163, 165, 174, 190, 195, 199], "2934131736526946": 2, "96": 2, "4174949546675": 2, "55": 2, "66666666666667": 2, "0": [2, 4, 5, 6, 10, 19, 26, 27, 28, 30, 32, 33, 41, 42, 48, 50, 51, 54, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 79, 80, 84, 86, 90, 96, 112, 113, 114, 115, 116, 117, 135, 140, 142, 146, 150, 153, 158, 159, 160, 161, 162, 163, 164, 165, 169, 173, 174, 175, 176, 179, 180, 181, 182, 184, 186, 187, 188, 190, 193, 201], "from": [3, 9, 19, 22, 23, 27, 28, 29, 30, 31, 41, 42, 45, 53, 84, 87, 88, 93, 95, 104, 110, 117, 120, 121, 128, 129, 135, 141, 142, 144, 145, 148, 150, 152, 153, 157, 158, 160, 161, 169, 171, 178, 179, 180, 182, 184, 196, 199], "system": [4, 8, 10, 26, 32, 33, 34, 42, 43, 48, 50, 51, 58, 59, 60, 61, 66, 70, 72, 80, 83, 84, 91, 95, 96, 98, 99, 101, 102, 103, 106, 118, 122, 125, 128, 129, 134, 139, 152, 156, 157, 158, 160, 161, 162, 163, 164, 165, 168, 170, 173, 176, 179, 180, 183, 184, 185, 188, 189, 194, 196], "mn": [4, 5, 6], "001": [4, 135], "mx": [4, 5, 6], "1000": [4, 5, 6, 92, 159, 162, 163, 165, 180], "npt": [4, 51, 92, 162, 163, 165], "100": [4, 50, 51, 158, 160, 180, 190], "titl": [4, 5, 6, 41, 91, 92, 159, 162, 163, 164, 165, 182, 183, 190], "xlim": [4, 5, 6, 159, 162, 163, 164, 165], "fals": [4, 5, 6, 34, 40, 41, 42, 51, 58, 71, 92, 93, 105, 106, 119, 120, 121, 135, 145, 147, 153, 154, 159, 160, 161, 162, 163, 164, 165, 166, 170, 175, 182, 183, 187, 190, 197], "ylim": [4, 5, 6, 164], "sv": [4, 5, 6], "disp3db": [4, 5, 6], "lowcut": [4, 5, 6], "magnitud": [4, 5, 6, 41, 48, 50, 51, 52, 75, 80, 101, 103, 118, 125, 141, 146, 156, 160, 161, 182, 191, 197], "true": [4, 5, 6, 34, 41, 42, 46, 54, 60, 64, 65, 67, 68, 69, 73, 74, 79, 86, 103, 105, 106, 115, 116, 119, 120, 121, 135, 140, 145, 156, 159, 160, 161, 162, 163, 164, 165, 170, 180, 181, 190, 194, 197], "angl": [4, 5, 6, 41, 83, 103, 141, 156, 160, 161, 182, 199, 201], "freqaxi": 4, "rad": [4, 19, 22, 27, 28, 29, 31, 119, 170, 190], "A": [4, 10, 26, 32, 33, 34, 46, 48, 49, 50, 54, 63, 64, 65, 67, 68, 69, 71, 73, 74, 79, 86, 93, 122, 126, 142, 153, 162, 163, 164, 165, 168, 175, 179, 184, 185, 189, 191, 192, 193, 194], "simpl": [4, 9, 43, 52, 107, 117, 126, 138, 151, 160, 170, 194, 201], "gener": [4, 5, 6, 41, 56, 92, 94, 96, 104, 105, 106, 113, 114, 117, 141, 158, 160, 161, 172, 176, 180, 181, 194], "frequenc": [4, 8, 19, 22, 27, 29, 43, 50, 51, 59, 60, 61, 72, 80, 83, 84, 92, 93, 96, 98, 99, 100, 101, 103, 109, 118, 119, 125, 128, 134, 139, 150, 153, 156, 159, 167, 170, 173, 178, 180, 188, 194, 201], "given": [4, 13, 14, 15, 16, 17, 18, 20, 21, 23, 28, 30, 31, 35, 36, 37, 38, 39, 46, 59, 66, 70, 72, 77, 78, 81, 82, 83, 85, 88, 93, 94, 96, 97, 101, 102, 109, 111, 112, 115, 119, 120, 121, 132, 133, 134, 135, 136, 137, 139, 140, 141, 144, 145, 149, 152, 153, 155, 159, 161, 162, 163, 165, 170, 173, 174, 176, 180, 181, 183, 186, 187, 195, 196, 197], "transfer": [4, 6, 106, 127, 144, 162, 163, 165], "object": [4, 5, 6, 75, 91, 92, 96, 164, 182, 183], "The": [4, 5, 6, 7, 11, 12, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 36, 39, 40, 41, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86, 90, 91, 92, 93, 94, 96, 102, 103, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 120, 121, 125, 128, 129, 132, 134, 136, 137, 139, 140, 141, 143, 144, 145, 146, 147, 150, 152, 153, 154, 156, 158, 159, 160, 162, 163, 165, 166, 171, 172, 175, 182, 183, 186, 187, 188, 190, 191, 195, 196, 197, 200, 201], "can": [4, 5, 6, 41, 96, 106, 108, 129, 145, 160, 162, 163, 164, 165, 201], "follow": [4, 7, 41, 48, 66, 70, 77, 78, 85, 148, 150, 162, 163, 165, 169, 180, 192, 193, 201], "1": [4, 8, 10, 26, 32, 33, 34, 42, 44, 47, 48, 50, 51, 53, 55, 56, 57, 58, 62, 63, 66, 70, 73, 75, 76, 77, 78, 81, 82, 84, 87, 88, 95, 100, 103, 108, 113, 114, 117, 119, 126, 130, 131, 132, 136, 140, 143, 145, 147, 150, 152, 153, 154, 156, 158, 159, 160, 161, 162, 163, 165, 168, 169, 171, 173, 174, 176, 178, 179, 180, 181, 182, 184, 189, 190, 199], "instanc": [4, 158, 162, 163, 165], "lti": [4, 162, 163, 165], "2": [4, 6, 7, 10, 19, 22, 23, 26, 27, 28, 29, 30, 34, 44, 56, 66, 70, 81, 82, 84, 85, 98, 99, 101, 103, 107, 117, 119, 124, 126, 128, 132, 133, 138, 140, 142, 143, 145, 146, 148, 150, 151, 156, 158, 159, 160, 161, 162, 163, 165, 168, 169, 170, 172, 180, 192, 195], "num": [4, 162, 163, 165], "den": [4, 162, 163, 165], "zero": [4, 7, 46, 47, 53, 54, 63, 64, 65, 67, 68, 69, 73, 74, 76, 79, 86, 117, 160, 162, 163, 164, 165], "pole": [4, 61, 73, 74, 100, 159, 162, 163, 165, 169, 170, 178], "gain": [4, 162, 163, 165, 180, 188], "4": [4, 7, 19, 27, 42, 100, 158, 160, 161, 162, 163, 165, 178, 179, 180, 184, 186], "b": [4, 10, 26, 32, 33, 34, 46, 54, 63, 64, 65, 67, 68, 69, 73, 74, 79, 86, 93, 142, 153, 162, 163, 164, 165, 175, 179, 184, 185, 194], "c": [4, 8, 10, 26, 32, 33, 34, 46, 48, 50, 51, 54, 58, 63, 64, 65, 67, 68, 69, 72, 73, 74, 79, 86, 90, 97, 98, 99, 111, 118, 119, 122, 123, 126, 127, 128, 133, 134, 135, 136, 137, 139, 142, 148, 150, 155, 162, 163, 164, 165, 175, 179, 180, 194], "d": [4, 34, 47, 56, 63, 81, 82, 83, 90, 95, 122, 124, 148, 153, 162, 163, 164, 165, 179, 185, 194, 201], "minimum": [4, 5, 6, 57, 62, 71, 92, 93, 135, 153, 182, 193], "default": [4, 5, 6, 8, 10, 26, 32, 33, 34, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 83, 84, 86, 87, 88, 90, 91, 92, 93, 96, 100, 101, 102, 103, 105, 106, 107, 109, 113, 114, 115, 116, 118, 119, 120, 121, 122, 129, 135, 139, 140, 145, 146, 150, 152, 153, 156, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 170, 173, 174, 176, 179, 182, 183, 184, 185, 186, 187, 188, 189, 190, 194, 195, 196, 197], "01": [4, 6, 116, 159, 162, 163, 164, 165, 193], "maximum": [4, 5, 6, 48, 50, 51, 71, 84, 85, 92, 93, 97, 103, 125, 155, 156, 158, 159, 160, 175, 182, 187, 192], "number": [4, 11, 12, 24, 25, 34, 40, 46, 51, 57, 61, 71, 92, 97, 98, 99, 100, 105, 124, 147, 150, 154, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 172, 173, 182, 190, 191, 201], "over": [4, 5, 6, 48, 50, 51, 71, 112, 115, 152, 159, 162, 163, 165, 191], "which": [4, 5, 6, 46, 48, 50, 51, 60, 61, 71, 81, 82, 83, 85, 93, 96, 98, 99, 101, 103, 115, 117, 127, 129, 130, 131, 133, 136, 137, 142, 146, 153, 156, 159, 163, 167, 176, 180, 186, 201], "string": [4, 5, 6, 41, 43, 47, 63, 71, 84, 87, 88, 91, 92, 104, 105, 106, 162, 163, 164, 165, 169, 182, 183, 190], "addit": [4, 5, 6, 41, 91, 92, 94, 139, 162, 163, 164, 165, 169, 182, 183, 199, 201], "ad": [4, 5, 6, 162, 163, 165, 201], "list": [4, 5, 6, 10, 26, 32, 33, 41, 47, 54, 63, 64, 65, 66, 67, 68, 69, 70, 73, 74, 79, 86, 91, 92, 93, 95, 96, 98, 99, 105, 106, 116, 141, 142, 153, 159, 160, 161, 162, 163, 164, 165, 180, 182, 197], "limit": [4, 5, 6, 49, 85, 159, 162, 163, 164, 165], "x": [4, 5, 6, 40, 48, 50, 51, 56, 80, 81, 82, 83, 113, 114, 115, 117, 145, 152, 158, 159, 162, 163, 164, 165, 166, 172, 181, 191, 196, 197], "axi": [4, 5, 6, 40, 81, 82, 83, 159, 162, 163, 164, 165, 166], "graph": [4, 5, 6, 159, 162, 163, 164, 165, 180, 181], "accept": [4, 5, 6, 19, 22, 27, 29, 34, 41, 42, 142, 158, 159, 161, 162, 163, 165], "tupl": [4, 5, 6, 41, 42, 44, 98, 99, 111, 142, 159, 161, 162, 163, 164, 165], "xmin": [4, 5, 6, 159, 162, 163, 165], "xmax": [4, 5, 6, 159, 162, 163, 165], "y": [4, 5, 6, 47, 63, 148, 160, 161, 164], "ymin": [4, 5, 6], "ymax": [4, 5, 6], "bool": [4, 5, 6, 34, 40, 41, 42, 46, 50, 51, 54, 58, 60, 64, 65, 67, 68, 69, 73, 74, 79, 86, 93, 103, 105, 106, 115, 116, 119, 135, 140, 145, 147, 153, 154, 156, 160, 161, 162, 163, 164, 165, 166, 170, 175, 182, 183, 187, 190, 194], "save": [4, 5, 6, 162, 163, 165], "png": [4, 5, 6], "control": [4, 5, 6, 34, 40, 41, 42, 46, 51, 54, 58, 60, 64, 65, 67, 68, 69, 71, 73, 74, 79, 86, 93, 103, 105, 106, 113, 114, 116, 119, 129, 140, 145, 146, 147, 153, 154, 156, 159, 160, 161, 162, 164, 165, 166, 167, 170, 175, 176, 182, 183, 187, 190, 194, 197], "enabl": [4, 5, 6, 41, 42, 51, 71, 103, 105, 106, 156, 164, 170, 182, 187, 190, 197], "displai": [4, 5, 6, 105, 182, 190], "3db": [4, 5, 6], "mark": [4, 5, 6, 41, 50], "freqenc": 4, "degre": [4, 41, 83, 141, 160, 182, 201], "radian": [4, 19, 22, 27, 28, 29, 31, 59, 60, 61, 150, 179, 184], "f": [5, 6, 98, 99, 103, 112, 113, 148, 156, 158, 160, 161, 164], "nn": [5, 6, 159, 164, 190], "domain": [5, 6, 34, 40, 46, 54, 64, 65, 67, 68, 69, 73, 74, 79, 86, 96, 159, 166], "input": [5, 6, 40, 42, 77, 78, 106, 108, 113, 114, 116, 129, 135, 142, 158, 159, 162, 163, 165, 166, 181, 186, 192, 193], "must": [5, 6, 48, 50, 96, 134, 158, 159, 160, 182], "callabl": [5, 6, 93, 112, 159, 164, 190], "int": [5, 6, 34, 40, 41, 57, 60, 61, 71, 84, 92, 93, 100, 105, 124, 158, 159, 160, 162, 163, 164, 165, 166, 169, 170, 178, 190], "interv": [5, 6, 84, 112], "w": [5, 75, 190], "dt": [6, 116, 135, 153, 159, 162, 163, 164, 165], "6": [6, 31, 179, 180, 184, 186, 199], "283185307179586": 6, "approx": 6, "z": [6, 47, 63, 94, 103, 145, 148, 150, 152, 156, 159, 187, 196], "type": [6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 46, 47, 48, 49, 52, 53, 54, 55, 57, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 94, 96, 97, 98, 99, 100, 101, 102, 105, 106, 107, 109, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 124, 126, 128, 132, 133, 134, 136, 137, 140, 141, 142, 143, 144, 147, 148, 149, 150, 152, 154, 155, 161, 170, 171, 172, 173, 175, 179, 182, 183, 184, 185, 186, 187, 190, 192, 193, 195, 196, 197], "when": [6, 34, 125, 140, 141, 146, 147, 154, 192, 193], "time": [6, 51, 60, 61, 80, 81, 82, 83, 84, 85, 87, 88, 90, 92, 96, 98, 99, 101, 103, 116, 117, 127, 130, 131, 133, 135, 136, 137, 153, 156, 159, 164, 167, 173, 188], "step": [6, 92, 110, 116, 135, 159, 162, 163, 164, 165], "us": [6, 8, 41, 48, 50, 51, 56, 62, 66, 70, 71, 72, 77, 78, 84, 85, 91, 92, 96, 100, 106, 115, 116, 122, 124, 129, 136, 137, 140, 147, 150, 154, 155, 160, 161, 168, 169, 180, 182, 183, 189, 190, 191, 192, 193, 194, 197, 199, 200, 201], "phi": 6, "pi": [6, 19, 22, 27, 28, 29, 31, 119, 128, 143, 148, 150, 170, 180, 199], "whether": [6, 50, 105, 106, 116, 145, 159, 162, 164, 165, 194], "funciton": [6, 199], "should": [6, 34, 42, 90, 98, 99, 103, 105, 106, 116, 117, 129, 139, 142, 144, 145, 146, 156, 159, 160, 161, 162, 163, 164, 165, 167, 176, 180, 194], "treat": [6, 197], "approxim": [6, 10, 26, 32, 33, 144, 194], "z1": [7, 34, 44, 46, 53, 54, 64, 65, 66, 67, 68, 69, 70, 73, 74, 76, 79, 86], "z2": [7, 34, 44, 46, 54, 64, 65, 66, 67, 68, 69, 70, 73, 74, 79, 86], "z3": [7, 44], "z4": 7, "z5": 7, "bridg": 7, "imped": [7, 8, 10, 26, 32, 33, 34, 41, 42, 44, 46, 52, 53, 56, 57, 58, 76, 77, 78, 80, 94, 103, 141, 143, 144, 145, 148, 150, 152, 156, 171, 174, 186, 187, 191, 194, 195, 196, 197], "describ": [7, 41, 51, 77, 78, 80, 120, 121, 128, 169, 180], "wheatston": 7, "util": [7, 9, 44], "ensur": 7, "through": [7, 42, 130, 131, 132], "cdot": [7, 10, 19, 22, 26, 27, 29, 32, 33, 48, 82, 122, 124, 138, 168, 169, 170, 172, 174, 180], "1iscrl": 7, "detector": 7, "between": [7, 98, 99, 122, 153, 162, 163, 165, 169, 171, 178, 194], "two": [7, 77, 78, 92, 106, 109, 120, 121, 125, 129, 138, 143, 146, 151, 171, 176, 181, 201], "branch": [7, 59, 60, 61], "effect": 7, "r": [8, 48, 50, 51, 59, 60, 61, 72, 80, 98, 99, 103, 107, 123, 127, 130, 131, 136, 137, 145, 148, 150, 152, 156, 172, 180, 188, 189, 191, 192, 193, 196, 197], "g": [8, 148, 182, 199], "l": [8, 59, 60, 61, 72, 90, 119, 123, 124, 130, 131, 132, 148, 150, 168, 180, 188, 189], "freq": [8, 43, 50, 51, 59, 60, 61, 72, 80, 83, 84, 92, 96, 98, 99, 100, 101, 118, 119, 128, 139, 150, 159, 167, 170, 173, 180, 188, 194], "60": [8, 28, 31, 43, 50, 51, 59, 60, 61, 72, 80, 83, 84, 92, 93, 96, 100, 101, 109, 118, 128, 139, 150, 153, 170, 173, 188, 194], "characterist": [8, 46, 53, 76, 88, 155, 180], "specefi": 8, "defin": [8, 47, 48, 63, 77, 78, 161], "standard": [8, 41, 48, 51, 117, 140, 141, 201], "equat": [8, 50, 146, 148, 155], "z_c": 8, "sqrt": [8, 43, 52, 81, 82, 102, 119, 133, 138, 140, 148, 151, 172, 180, 195], "frac": [8, 12, 19, 20, 24, 27, 39, 43, 44, 48, 49, 50, 54, 64, 65, 66, 67, 68, 69, 70, 73, 74, 79, 81, 82, 85, 86, 95, 100, 102, 107, 108, 109, 119, 122, 124, 126, 128, 129, 130, 131, 132, 133, 134, 136, 137, 140, 142, 143, 144, 145, 148, 149, 150, 151, 159, 168, 170, 171, 172, 173, 180, 186, 189, 192, 193, 195], "j": [8, 48, 50, 148, 150, 158, 160, 161], "omega": [8, 50, 90, 101, 150, 188, 190], "resist": [8, 42, 43, 48, 50, 51, 54, 57, 58, 59, 60, 61, 64, 65, 66, 67, 68, 69, 70, 72, 79, 80, 86, 107, 108, 130, 131, 143, 145, 150, 152, 171, 172, 178, 180, 186, 188, 189, 191, 192, 193, 194], "ohm": [8, 43, 48, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 76, 80, 81, 82, 83, 90, 94, 108, 150, 174, 180, 188, 191, 192, 193, 194], "conduct": [8, 124], "mho": 8, "siemen": 8, "induct": [8, 59, 60, 61, 72, 90, 100, 119, 124, 129, 130, 131, 132, 150, 168, 170, 178, 180, 188, 201], "henri": [8, 59, 60, 61, 72, 90, 119, 124, 130, 131, 132, 150, 180, 188], "capacit": [8, 72, 90, 98, 99, 118, 119, 122, 125, 126, 127, 128, 133, 134, 135, 136, 137, 139, 150, 169, 180], "farad": [8, 72, 90, 118, 119, 126, 127, 133, 134, 135, 136, 137, 139, 150, 180], "hz": [8, 19, 22, 23, 27, 29, 30, 50, 51, 72, 80, 92, 93, 96, 101, 103, 119, 134, 153, 156, 167, 170, 173, 180, 188], "zc": [8, 148], "charcterist": 8, "common": [9, 98, 99, 110, 199, 201], "help": [9, 104, 201], "manag": 9, "unit": [9, 11, 12, 24, 25, 41, 53, 56, 66, 70, 71, 76, 77, 78, 81, 82, 83, 102, 122, 140, 149, 152, 167, 168, 170, 189, 195, 196, 197], "like": [9, 96, 110, 112, 124, 129, 143, 164, 171, 201], "veri": [9, 191], "mabc": [10, 26, 32, 33], "refer": [10, 13, 14, 26, 32, 33, 34, 35, 46, 54, 62, 64, 65, 67, 68, 69, 73, 74, 79, 86, 95, 140, 147, 154], "sequenc": [10, 26, 32, 33, 34, 46, 47, 53, 54, 63, 64, 65, 66, 67, 68, 69, 70, 73, 74, 76, 79, 86, 160, 161, 197], "base": [10, 26, 32, 33, 47, 53, 56, 59, 60, 61, 66, 70, 75, 76, 77, 78, 85, 102, 112, 149, 150, 152, 160, 161, 188, 195, 196, 197, 200, 201], "compon": [10, 26, 32, 33, 83, 91, 93, 96, 123, 129, 145, 153], "m_": [10, 26, 32, 33], "text": [10, 11, 12, 19, 20, 21, 22, 24, 25, 26, 27, 29, 32, 33, 34, 36, 39, 43, 48, 107, 109, 138, 148, 151, 169, 170, 180, 183], "012": [10, 26, 32, 33, 34], "a_": [10, 26, 32, 33, 34, 143, 171], "abc": [10, 26, 32, 33, 34, 174], "same": [10, 11, 12, 19, 20, 21, 22, 24, 25, 26, 27, 29, 32, 33, 34, 36, 39, 53, 76, 140, 143, 171], "phs_to_seq": 10, "charact": [10, 26, 32, 33, 34, 46, 54, 64, 65, 67, 68, 69, 73, 74, 79, 86], "denot": [10, 26, 32, 33, 34, 46, 47, 54, 63, 64, 65, 67, 68, 69, 71, 73, 74, 79, 86, 144, 176, 182], "m012": [10, 26, 32, 33], "order": [10, 26, 32, 33], "seq_to_abc": [10, 26, 33, 34], "conv": [10, 19, 22, 23, 26, 27, 28, 29, 30, 31, 32, 33], "abc_matrix": [10, 26, 32, 33], "phasor": [10, 26, 32, 33, 41, 176, 179, 182, 201], "120": [10, 23, 26, 30, 32, 33, 41, 100, 138, 141, 176, 182, 199, 201], "240": [10, 26, 32, 33], "Will": [10, 26, 32, 33, 150, 197], "equal": [10, 26, 32, 33, 69, 86, 197], "0j": [10, 26, 32, 33], "kwh": [11, 12, 25], "killo": [11, 25], "watt": [11, 12, 15, 16, 17, 18, 20, 21, 24, 25, 37, 38, 39, 133, 135, 155, 160, 161, 172, 178, 192], "hour": [11, 12, 24, 25], "british": [11, 12, 24, 25], "thermal": [11, 12, 24, 25, 85], "cdot3412": [11, 25], "14": [11, 12, 24, 25, 199], "btu": [12, 24, 25], "kilo": [12, 24], "3412": [12, 24, 199], "db": [13, 14, 143, 171], "ref_voltag": [13, 14, 35], "decibel": [13, 14, 15, 16, 17, 18, 35, 37, 38], "ref": 13, "dbmw": [15, 16, 17, 37], "dbw": [15, 17, 18, 38], "milli": [15, 16, 17, 37], "scale": [15, 16, 17, 18, 35, 37, 38, 55, 71, 84, 115, 159, 182], "sec": [19, 22, 27, 28, 29, 31, 59, 60, 61, 119, 167, 170, 190], "f_": [19, 22, 27, 29, 134, 174], "repres": [19, 22, 27, 29, 34, 40, 104, 116, 120, 121, 145, 158, 166, 200, 201], "rad_to_hz": 19, "second": [19, 27, 28, 31, 59, 72, 80, 81, 82, 83, 84, 94, 97, 103, 106, 133, 135, 155, 156], "p_": [20, 21, 36, 39, 101, 144], "745": [20, 39, 199], "699872": [20, 21, 36, 39, 199], "wattag": [20, 39], "comput": [20, 21, 36, 39, 85, 113, 114, 115, 124, 158, 160, 161], "hp": [20, 21, 36, 39], "horsepow": [21, 36, 39], "formula": [21, 36, 48, 52, 66, 70, 77, 78, 85, 104, 108, 110, 123, 125, 126, 128, 130, 131, 132, 133, 134, 135, 140, 145, 148, 169, 192, 193, 201], "cdot745": [21, 36], "hertz": [22, 23, 27, 29, 30, 43, 59, 60, 61, 98, 99, 150, 170, 194], "cdot2": [22, 29], "radsec": 22, "12": [22, 29, 42, 122, 150, 182, 186, 198, 199], "566": [22, 29], "rpm": [23, 28, 30, 31, 100, 170], "angular": [23, 28, 30, 31], "veloc": [23, 28, 30, 31], "revolut": [23, 28, 30, 31], "per": [23, 28, 30, 31, 40, 51, 53, 56, 66, 70, 72, 76, 77, 78, 81, 82, 83, 97, 102, 149, 152, 155, 166, 167, 174, 194, 195, 196, 197], "minut": [23, 28, 30, 31], "abc_to_seq": [26, 32, 33, 34], "hz_to_rad": 29, "28": 31, "seq_to_ph": 32, "seq_quant": [32, 33], "phs_quantiti": [32, 33], "quantiti": [32, 33, 149], "origin": [32, 33, 182], "zabc": 34, "resolv": [34, 194, 201], "diag": 34, "round": [34, 41, 44, 105, 190], "If": [34, 46, 53, 106, 150, 152, 160, 162, 163, 165, 197, 201], "combin": [34, 42, 162, 163, 164, 165], "term": [34, 56, 91, 92, 106, 111, 140, 145, 164, 194], "z0": [34, 46, 53, 54, 64, 65, 66, 67, 68, 69, 70, 73, 74, 76, 79, 86, 143, 171], "z_": [34, 44, 77, 78, 148, 149, 174, 195], "m": [34, 44, 55, 61, 97, 160, 161, 169, 182, 187, 199], "3x3": [34, 194], "matrix": [34, 46, 105, 160, 161, 164, 169, 174, 194], "pharo": 34, "forc": [34, 40, 41, 42, 46, 54, 60, 64, 65, 67, 68, 69, 73, 74, 77, 78, 79, 86, 93, 105, 116, 153, 160, 161, 164, 166, 197], "individu": [34, 111, 145], "reduc": [34, 90, 194], "its": [34, 131, 138, 151, 152, 191, 196, 201], "diagon": 34, "integ": 34, "decim": [34, 41, 105, 139, 146, 175, 183], "place": [34, 41, 71, 105], "result": [34, 41, 50, 58, 92, 93, 105, 152, 153, 158, 159, 161, 164, 175, 194], "z012": 34, "arr": [40, 116, 166], "srate": [40, 166], "cosin": [40, 91, 92, 96], "filter": [40, 111, 157, 159, 166], "dataset": [40, 96, 153, 166], "sinusoid": [40, 138, 151, 166], "without": [40, 41, 103, 156, 166], "harmon": [40, 91, 93, 153, 166], "fundament": [40, 92, 96, 166], "ndarrai": [40, 41, 46, 51, 111, 113, 114, 115, 116, 153, 166, 181], "data": [40, 97, 153, 155, 160, 162, 163, 165, 166], "sampl": [40, 96, 117, 153, 166, 180], "rate": [40, 48, 49, 50, 58, 72, 75, 97, 116, 128, 145, 152, 155, 166, 167, 196, 197], "cycl": [40, 51, 84, 98, 99, 166, 173], "cosf": 40, "xarrai": [40, 166], "val": [41, 105, 138, 147, 151, 154], "label": [41, 182], "pretti": 41, "printval": [41, 183], "ret": [41, 164], "print": [41, 71, 104, 105, 106, 141, 158, 161, 183, 187], "notat": 41, "itself": 41, "singular": [41, 46, 161], "correspond": [41, 152, 159, 161, 191, 196], "str": [41, 91, 92, 105, 106, 129, 146, 159, 162, 163, 164, 165, 167, 176, 179, 182], "pre": [41, 46], "pend": 41, "format": [41, 93, 104, 138, 151, 153, 160, 161], "brace": 41, "disabl": [41, 105, 106, 164, 182], "allow": [41, 85, 135, 158, 160, 183, 192, 193], "replac": [41, 140], "how": 41, "mani": 41, "neg": [41, 46, 54, 64, 65, 67, 68, 69, 73, 74, 79, 86, 144, 145, 146, 150, 160, 161, 183], "space": [41, 122, 164, 168], "left": [41, 48, 50, 66, 70, 77, 78, 81, 82, 145, 152], "deprec": [41, 140], "numarr": 41, "ar": [41, 71, 77, 78, 84, 98, 99, 120, 121, 124, 129, 143, 146, 148, 169, 171, 180, 182, 186, 199, 201], "mag": [41, 48, 50, 141, 160, 161], "ang": [41, 141, 160, 161], "where": [41, 49, 53, 66, 76, 84, 150, 159, 160, 161, 174], "np": [41, 117, 147, 154, 158, 160, 161, 181, 182], "67": [41, 141, 182, 201], "vset": [41, 57], "phasorlist": [41, 141, 182], "phasorz": [41, 141], "ri": 42, "rset": 42, "vin": [42, 129, 135, 186, 192, 193], "iin": 42, "vout": [42, 129, 186], "divid": [42, 129, 186], "disign": 42, "resistor": [42, 90, 98, 99, 107, 127, 129, 130, 136, 137, 143, 171, 186, 192, 193], "network": [42, 160, 161, 172], "parallel": [42, 122, 125, 143, 145, 186], "particular": [42, 43, 51, 106, 120, 121, 140], "element": [42, 53, 56, 57, 62, 84, 87, 88, 145, 150], "interest": [42, 94, 140, 201], "includ": [42, 57, 84, 98, 99, 148, 180], "pass": [42, 43, 106, 182], "remain": [42, 95, 135], "across": [42, 107, 126, 127, 128, 130, 131, 139, 147, 154, 169, 186], "opt1": 42, "ii": 42, "opt2": 42, "vi": 42, "afor": 42, "mention": 42, "constant": [42, 43, 50, 80, 81, 82, 83, 103, 109, 148, 156, 188, 200, 201], "k": [42, 46, 58, 90, 103, 140, 156, 199], "split": [42, 160], "wai": [42, 58, 201], "find": [42, 43, 60, 61, 90, 129, 146, 161, 167, 176], "4000": 42, "rho": [43, 189, 194], "de": [43, 194], "transmiss": [43, 148, 169, 172, 174, 179, 184, 185, 194], "earth": [43, 194], "d_e": 43, "d_": [43, 95], "e_": 43, "meter": [43, 124, 194], "also": [43, 103, 119, 120, 121, 129, 135, 156, 159, 197], "sea": 43, "swamp": 43, "avg": [43, 194], "averag": [43, 175], "damp": [43, 90], "dry": 43, "sand": 43, "sandston": 43, "delta": [44, 134, 140, 153, 190], "wye": [44, 140], "act": [44, 106], "convers": [44, 146, 152, 196], "transform": [44, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 62, 63, 75, 84, 87, 88, 89, 147, 154, 172], "connect": [44, 47, 63, 94, 108, 125, 127, 129, 140, 143, 145, 171], "vice": [44, 140, 144], "versa": [44, 140, 144], "sum": 44, "z_1": [44, 54, 64, 65, 66, 67, 68, 69, 70, 73, 74, 79, 86], "z_2": [44, 54, 64, 65, 66, 67, 68, 73, 74, 79], "z_3": 44, "exclus": [44, 49, 72, 75, 120, 121, 125], "z12": [44, 47, 63], "z23": 44, "z31": 44, "valus": 44, "n": [46, 48, 50, 51, 57, 61, 95, 124, 147, 154, 155, 160, 161, 168, 169, 173, 199], "vpf": 46, "bu": [46, 57, 58, 158, 160, 161, 187], "specif": [46, 59, 75, 88, 103, 104, 108, 112, 116, 141, 145, 156, 177, 180, 197], "occur": [46, 48], "posit": [46, 53, 54, 64, 65, 67, 68, 69, 73, 74, 76, 79, 86, 144, 145, 146, 150, 160, 161, 183], "symmetr": [46, 54, 64, 65, 67, 68, 69, 73, 74, 79, 80, 82, 83, 86], "vf": 46, "ipri": 47, "tap": [47, 63, 75, 89, 172], "correct": [47, 63, 139], "ctr": [47, 48, 50, 51, 52, 53, 55, 56, 57, 58, 62, 75, 87, 88], "microprocessor": 47, "relai": [47, 53, 55, 57, 63, 84, 89], "protect": [47, 57, 58, 75, 84, 89], "scheme": [47, 57, 84], "ia": [47, 60, 63, 82, 83], "ib": [47, 63], "ic": [47, 63, 98, 99], "primari": [47, 48, 50, 51, 53, 58, 62, 63, 75, 89, 154, 178, 201], "y0": [47, 63], "dab": [47, 63, 194], "d1": [47, 63], "dac": [47, 63], "d11": [47, 63], "remov": [47, 63], "ratio": [47, 48, 50, 51, 52, 53, 55, 56, 57, 58, 62, 63, 75, 84, 87, 88, 89, 147, 152, 154, 169, 172, 178, 191, 197], "isec_corr": 47, "perform": [47, 50, 138, 149, 151, 160, 169, 175, 182], "restraint": [47, 63], "xor": [48, 50, 51, 152, 191, 197], "imag": [48, 50, 91, 92, 96, 108], "irat": [48, 50], "rb": [48, 50, 51], "xb": [48, 50], "remnanc": [48, 50], "sat_crit": 48, "20": [48, 49, 50, 107, 143, 158, 171, 176], "ct": [48, 49, 50, 51, 52, 89], "class": [48, 50, 51, 58, 177, 178, 179, 180], "determin": [48, 49, 50, 51, 60, 61, 77, 78, 81, 82, 145, 160, 175], "shown": [48, 159, 200, 201], "below": [48, 108, 120, 121, 129, 180, 192, 193, 200, 201], "demonstr": [48, 105, 106, 176, 181], "normal": [48, 95], "satur": [48, 49, 50, 51], "criteria": 48, "worth": [48, 150], "note": [48, 140, 145, 160, 161, 201], "here": [48, 150, 159, 169], "fact": [48, 50], "v_": [48, 49, 50, 54, 64, 65, 66, 67, 68, 69, 70, 73, 74, 77, 78, 79, 86, 102, 107, 108, 129, 130, 134, 136, 137, 138, 140, 142, 144, 151, 169, 186, 192, 193, 195], "i_": [48, 49, 50, 52, 77, 78, 81, 85, 102, 107, 134, 140, 193], "r_": [48, 50, 107, 186], "burden": [48, 49, 50, 51, 52], "x_": [48, 50, 144], "right": [48, 50, 66, 70, 81, 82, 145], "cdot100": 48, "For": [48, 201], "purpos": [48, 172, 181, 187], "abov": [48, 129, 148], "appli": [48, 115, 159], "satisfi": [48, 50, 169], "e": [48, 58, 81, 82, 106, 111, 122, 126, 130, 131, 132, 136, 137, 167, 175, 178, 182], "typic": [48, 50, 51, 84, 140, 181], "secondari": [48, 50, 51, 53, 56, 62, 75, 89, 147], "total": [48, 50, 51, 53, 76, 98, 99, 152, 173, 174, 179, 190, 196], "reactanc": [48, 50, 54, 56, 64, 65, 66, 67, 68, 69, 70, 73, 74, 79, 81, 82, 83, 86, 145, 152, 172, 191], "flux": [48, 50], "c_class": 48, "inom": 49, "varat": 49, "ansiv": 49, "alf": [49, 50], "va_": 49, "nomin": 49, "ansi_": 49, "ansi": 49, "requir": [49, 57, 75, 128, 134, 139, 145, 150, 158, 175, 187, 193], "meet": [49, 75, 128, 134], "accuraci": 49, "vsat": 49, "vrate": 50, "boolean": [50, 71, 170, 197], "indic": [50, 73, 74], "show": [50, 162, 163, 165, 180, 182], "To": [50, 169, 182], "we": [50, 160, 161, 201], "geq": [50, 117], "accompani": 50, "presenc": 50, "vknee": 51, "imax": [51, 125], "t": [51, 60, 61, 80, 81, 82, 83, 101, 103, 112, 117, 127, 130, 131, 133, 136, 137, 153, 156, 160, 161, 171, 172, 173, 201], "underr": 51, "curv": [51, 84, 87, 88, 114], "juergen": 51, "holbach": 51, "knee": 51, "floatint": 51, "_np": 51, "linspac": 51, "zb": 52, "ip": [52, 53, 94], "peak": [52, 72, 81, 82, 90, 135, 151], "5": [52, 58, 62, 117, 150, 179, 180, 184], "z_burden": 52, "turn": [52, 124, 147, 154, 168, 172], "vpeak": 52, "vlnmea": 53, "ipp": [53, 94], "vtr": [53, 56], "k0": [53, 76], "linelength": [53, 76], "distanc": [53, 95, 122, 194], "measur": [53, 55, 84, 87, 88, 107, 108, 124, 186], "terchiari": 53, "residu": [53, 76], "compens": [53, 76], "length": [53, 76, 124, 148, 168, 174, 189, 194], "zmea": 53, "vth": [54, 64, 65, 66, 67, 68, 69, 70, 73, 74, 77, 78, 79, 86], "zseq": [54, 64, 65, 66, 67, 68, 69, 70, 73, 74, 79, 86], "rf": [54, 64, 65, 66, 67, 68, 69, 70, 79, 86], "doubl": [54, 68, 83, 105, 106], "ground": [54, 65, 68, 79, 94, 98, 99, 129, 143, 169, 171, 194], "i_1": [54, 64, 65, 66, 67, 68, 69, 73, 74, 79, 86], "th": [54, 64, 65, 66, 67, 68, 69, 70, 73, 74, 77, 78, 79, 86, 182], "z_0": [54, 65, 66, 68, 73, 74, 79], "r_f": [54, 64, 65, 66, 67, 68, 79], "i_2": [54, 64, 65, 67, 68, 69, 73, 74, 79, 86], "x_2": [54, 68], "i_0": [54, 64, 65, 67, 68, 69, 73, 74, 79, 86, 131], "x_0": [54, 68], "thevenin": [54, 64, 65, 66, 67, 68, 69, 70, 73, 74, 77, 78, 79, 86], "equival": [54, 64, 65, 66, 67, 68, 69, 70, 73, 74, 77, 78, 79, 86, 140, 174, 194], "tuppl": [54, 64, 65, 66, 67, 68, 69, 70, 73, 74, 79, 86], "ifault": [54, 64, 65, 67, 68, 69, 73, 74, 79, 86], "if0": [54, 64, 65, 67, 68, 73, 74, 79], "if1": [54, 64, 65, 67, 68, 73, 74, 79], "if2": [54, 64, 65, 67, 68, 73, 74, 79], "ipickup": [55, 87, 88], "multipl": [55, 93, 98, 99, 138], "pickup": [55, 57, 58, 62, 84, 87, 88], "mea": 55, "xd": [56, 82, 83], "xpd": 56, "zbase": [56, 195], "loss": [56, 178, 192], "field": 56, "inform": [56, 161, 169, 180, 201], "transient": [56, 72, 82, 83, 90, 125], "sub": [56, 83], "zoneoff": 56, "zone": 56, "offset": [56, 91, 92, 93, 96, 103, 153, 156], "z1dia": 56, "diamet": [56, 124, 189, 194], "z2dia": 56, "ie": 57, "irli": 57, "rrly": 57, "2000": 57, "imov": 57, "high": [57, 58, 63, 98, 99], "caus": [57, 96], "excit": 57, "intern": [57, 81, 82, 83, 94, 122, 168, 189], "overvoltag": 57, "imin": [57, 62], "rl": [58, 103, 156, 194], "rct": 58, "threephas": 58, "vstd": 58, "400": [58, 146, 178], "kd": 58, "side": [58, 62, 63, 75, 89, 147, 154, 187], "One": [58, 129, 143], "unbalanc": 58, "secur": 58, "depend": [58, 77, 78], "vsen": 58, "senset": [58, 62, 150], "vdep": 58, "lr": [59, 60, 61], "lm": [59, 60, 61, 125], "rr": [59, 60, 61], "wrf": [59, 60, 61], "machin": [59, 60, 61, 81, 82, 83, 100, 109, 170], "eigenvalu": 59, "pertin": 59, "unload": [59, 60], "rotor": [59, 60, 61, 178], "stator": [59, 60, 61, 178], "magnet": [59, 60, 61], "slip": [59, 60, 61, 100, 109], "lam1": 59, "first": [59, 94, 106], "lam2": 59, "is0": [60, 61], "real": [60, 66, 70, 91, 92, 93, 96, 101, 116, 144, 146, 150, 153, 160, 161, 179, 183, 184, 185, 186, 187], "sc": [60, 66, 70, 77, 78], "short": [60, 66, 70, 77, 78, 81, 83, 103, 156, 197], "circuit": [60, 66, 70, 77, 78, 80, 81, 83, 98, 99, 103, 107, 119, 145, 156, 180, 197], "array_lik": [60, 61, 158, 159, 160, 161, 162, 163, 164, 165, 174], "initi": [60, 61, 127, 131, 133, 135, 158, 160, 161, 164, 179], "part": [60, 150, 162, 163, 165], "torqu": 61, "exert": 61, "dure": [61, 98, 99, 125], "p": [61, 101, 133, 135, 145, 146, 172, 179, 183, 185, 187, 192, 199], "tem": 61, "ki": [62, 188], "instantan": [62, 101, 103, 156], "overcurr": [62, 87, 88], "level": [62, 85, 97], "ipu": 62, "iprihv": 63, "iprilv": 63, "taphv": 63, "taplv": 63, "corrhv": 63, "corrlv": 63, "ctrhv": 63, "ctrlv": 63, "iop": 63, "irt": 63, "well": 63, "slope": 63, "low": [63, 98, 99], "sbase": [66, 70, 197], "mva": [66, 70, 77, 78, 197], "mva_": [66, 70, 77, 78], "r_1": [69, 86, 186], "po": [69, 86], "seq": [69, 86], "iloadmax": 71, "ifaultmin": 71, "printout": 71, "select": 71, "assist": [71, 177], "optim": 71, "load": [71, 118, 133, 134, 135, 139, 172, 178, 180, 186, 192, 193], "user": [71, 201], "signific": 71, "figur": [71, 159, 160, 162, 163, 164, 165, 182, 201], "intermedi": 71, "stage": [71, 187], "append": [71, 91, 92], "output": [71, 108, 115, 116, 129, 134, 159, 164, 172, 178, 180, 186, 187, 192, 193, 197], "being": [71, 75, 106, 131, 135, 136, 137, 158, 159, 191, 200, 201], "setpoint": 71, "suggest": [71, 118, 201], "recoveri": [72, 90], "restrik": 72, "rise": 72, "vcpk": 72, "rrrv": 72, "either": [75, 105, 119, 140, 158, 182, 186, 197], "conjunct": [75, 106, 201], "question": [75, 201], "var": [75, 106, 128, 160, 161, 172], "zth": [77, 78], "isc": [77, 78, 103, 156, 178], "method": [77, 78, 123, 158, 160, 170, 178, 179, 180], "all": [77, 78, 111, 124, 146, 164, 175, 201], "around": [77, 78], "otherwis": [77, 78, 106, 197], "upon": [77, 78], "016666666666666666": [80, 173], "rm": [80, 103, 112, 135, 138, 156, 190], "tau": [80, 188], "isym": 80, "irm": [80, 103, 156], "eq": [81, 82, 83, 174], "xdpp": [81, 82, 83], "xqpp": [81, 83], "ta": [81, 83], "synch": [81, 82], "asymmetr": [81, 83], "calc": [81, 82], "synchron": [81, 82, 83, 109, 170], "asym": 81, "e_q": [81, 82], "_d": [81, 82], "_q": 81, "t_a": 81, "subtransi": [81, 82], "q": [81, 83, 101, 145, 146, 172, 179, 183, 185, 187], "armatur": [81, 83], "dc": [81, 83, 91, 92, 93, 96, 103, 153, 156, 187], "iasym": 81, "xdp": [82, 83], "tdp": [82, 83], "tdpp": [82, 83], "i_a": 82, "x_d": 82, "ea": [83, 94], "alpha": [83, 103, 142, 148, 156], "incept": 83, "identifi": [83, 197], "complet": [83, 158, 162, 163, 165], "cti": 84, "ipu_up": 84, "ipu_dn": 84, "tddn": 84, "u1": [84, 87, 88], "ctr_up": 84, "ctr_dn": 84, "tfix": 84, "radial": 84, "dial": [84, 87, 88], "coordin": [84, 105], "td": [84, 87, 88], "up": [84, 182, 200, 201], "downstream": 84, "known": [84, 160, 161, 187, 194], "along": 84, "avail": [84, 103, 107, 120, 121, 156], "upstream": 84, "name": [84, 87, 88, 163, 199], "toc": [84, 87, 88], "entri": [84, 87, 88], "u2": [84, 87, 88], "u3": [84, 87, 88], "u4": [84, 87, 88], "u5": [84, 87, 88], "c1": [84, 87, 88, 125], "c2": [84, 87, 88, 125], "c3": [84, 87, 88], "c4": [84, 87, 88], "c5": [84, 87, 88], "practic": 84, "fix": 84, "delai": 84, "primarili": [84, 200, 201], "51": [84, 87, 88], "oc": 84, "50": [84, 173, 178, 179, 180, 184], "trip": [84, 88], "overrid": 84, "accord": [84, 147, 154], "logic": 84, "analysi": [84, 160, 180, 201], "In": [85, 199], "ibas": [85, 102], "tbase": 85, "some": 85, "t_n": 85, "t_": 85, "i_n": 85, "max": [85, 158, 192], "unitless": [85, 95, 109, 122, 142, 146, 168, 174, 183, 189], "tn": 85, "reset": 87, "tr": 87, "character": [87, 88], "tt": 88, "i1": 89, "i2": 89, "tap1": 89, "tap2": 89, "mismatch": 89, "associ": [89, 118, 180], "reduct": 90, "rd0": 90, "500": [90, 146], "wd0": 90, "260000": 90, "tpk0": 90, "1e": [90, 106, 135, 150], "05": 90, "trv": 90, "percentag": [90, 174, 175], "260": 90, "10": [90, 117, 143, 158, 164, 171, 180, 189, 199], "u": [90, 117, 168, 199, 201], "rd": [90, 194], "wd": 90, "tpk": 90, "fourier": [91, 92], "coeffici": [91, 96], "fft": [91, 92, 93, 116, 153], "plotter": [91, 92, 162, 163, 164, 165, 181], "imaginari": [91, 92, 93, 96, 148, 150, 153], "sine": [91, 92, 96, 166], "pyplot": [91, 92, 182, 183], "configur": [91, 92, 98, 99, 114, 134, 182, 183], "xrang": 92, "plotal": 92, "seri": [92, 107, 143, 145, 171], "summat": 92, "sume": 92, "nonzero": 92, "contain": [92, 106, 153, 201], "func": [93, 112, 115, 164, 190], "minfreq": [93, 153], "maxmult": 93, "15": [93, 117], "handl": [93, 96, 158, 161, 164], "period": [93, 98, 99, 112], "vt": [94, 133], "vgn": 94, "zm": 94, "zmp": 94, "zmpp": 94, "mutual": 94, "coupl": 94, "termin": [94, 118, 178, 197, 201], "arg": 95, "geometr": 95, "mean": [95, 112, 138, 151], "d_1": 95, "ddot": 95, "d_n": 95, "self": [95, 194], "datasheet": 95, "instead": [96, 105, 140], "call": 96, "bw": [97, 155], "hartlei": 97, "law": [97, 201], "achiev": [97, 139, 155], "noiseless": 97, "channel": [97, 155], "bandwidth": [97, 155, 180, 190], "signal": [97, 112, 116, 155], "capac": [97, 155], "bit": [97, 155], "t_high": [98, 99], "t_low": [98, 99], "555": [98, 99], "integr": [98, 99, 112, 115, 190], "attribut": [98, 99, 180], "duti": [98, 99], "spent": [98, 99, 174], "each": [98, 99, 106, 159, 162, 163, 165, 169, 174, 180, 181, 194], "todo": [98, 99], "broken": [98, 99], "smaller": [98, 99], "need": [98, 99, 134, 162, 163, 164, 165], "threshold": [98, 99], "pin": [98, 99, 108, 169], "ON": [98, 99], "off": [98, 99], "dict": [98, 99, 148, 178], "oscil": [98, 99], "duty_cycl": [98, 99], "ration": [98, 99, 172, 178], "time_period": [98, 99], "nr": 100, "speed": [100, 109, 170], "suppli": [100, 108, 178], "insid": 100, "forward": [100, 107], "inst": 101, "co": [101, 158], "sin": [101, 144, 158], "reactiv": [101, 139, 145, 146, 160, 161, 172, 179, 183, 184, 185, 187], "v1ph": 102, "pu": [102, 149, 195], "ll": [102, 140, 195, 201], "ln": [102, 140, 195], "mxcurrent": [103, 156], "absolut": [103, 106, 116, 156], "jx": [103, 150, 156], "variabl": [103, 106, 120, 121, 122, 141, 156, 158, 164, 168, 189], "opt": [103, 145, 156], "iac": [103, 156], "asymmetri": [103, 156], "idc": [103, 156], "math": [104, 179, 184, 201], "symbol": 104, "creat": [104, 106, 201], "more": [104, 180, 182, 201], "easi": 104, "tool": [104, 177], "jupyt": [104, 201], "notebook": [104, 106, 201], "polar": 105, "predollar": [105, 106], "postdollar": [105, 106], "rectangular": 105, "both": [105, 107, 127, 145, 158, 179], "dollar": [105, 106], "sign": [105, 106], "befor": [105, 106, 158], "after": [105, 106, 133, 159], "sy": 106, "sysp": 106, "toler": [106, 182], "08": [106, 189], "particularli": 106, "interact": 106, "numer": [106, 162, 163, 165, 183, 190, 201], "sublist": 106, "denomin": [106, 162, 163, 165], "jomega": 106, "cutoff": 106, "against": [106, 162, 163, 165], "greater": 106, "than": [106, 182, 191, 201], "8": [106, 117, 122, 140, 146, 175, 186, 187, 189, 199], "vsrc": 107, "vfwd": 107, "ifwd": 107, "led": 107, "necessari": [107, 160, 161], "src": 107, "fwd": 107, "milliamp": 107, "most": [107, 201], "r1": [108, 143, 171, 178, 186], "r2": [108, 143, 171, 178, 186], "v_out": 108, "linear": [108, 120, 121, 158], "regul": [108, 172], "solver": [108, 160, 161, 176], "adjust": 108, "ha": [108, 201], "often": [108, 140, 143, 171], "out": [108, 129, 134, 186, 192, 193, 201], "25": [108, 158, 160, 180, 182], "electroni": 108, "basict": 108, "access": 108, "2022": 108, "electron": [108, 124, 201], "mech": 109, "syn": [109, 170], "mechan": 109, "rotat": 109, "60hz": 109, "mathemat": 110, "epmath": 110, "focuss": [110, 201], "simplifi": [110, 160, 199], "expos": 110, "few": [110, 201], "convolut": [110, 111, 181], "etc": 110, "x1": 111, "x2": 111, "x3": 111, "xn": 111, "root": [112, 138, 151], "squar": [112, 138, 151, 158, 160], "repet": 112, "so": [112, 201], "mu": [113, 114, 168, 199], "sigma": [113, 114], "gaussian": 113, "distribut": [113, 114, 172], "gausian": 113, "x0": [115, 158, 160, 161], "probabl": 115, "densiti": [115, 190], "pdf": 115, "lower": [115, 180], "bound": 115, "sumx": 115, "resampl": 116, "evaluat": 116, "have": [116, 143, 159, 171], "impliment": 117, "heavisid": 117, "7": [117, 151, 168, 199], "arraylik": 117, "respons": [117, 162, 163, 165, 180, 181, 201], "motor": [118, 178, 201], "capacitor": [118, 123, 125, 126, 127, 128, 133, 134, 135, 136, 137, 139, 169], "reccomend": 118, "startup": 118, "natur": 119, "reson": [119, 180], "pftrue": [120, 121], "pfdist": [120, 121], "pfdisp": [120, 121], "non": [120, 121, 125, 158], "unknown": [120, 121, 160, 161], "These": [120, 121], "thei": [120, 121, 124, 201], "section": [120, 121, 168], "distort": [120, 121], "displac": [120, 121], "previous": [120, 121], "nlinpf": 121, "8541878128e": 122, "plate": 122, "enter": [122, 168, 189], "rema": [122, 168, 189], "even": [122, 168, 189], "though": [122, 168, 189], "everi": [122, 168, 189], "pleas": [122, 168, 189, 201], "varepsilon": 122, "area": [122, 168, 201], "permit": [122, 201], "dielectr": 122, "permitt": 122, "free": [122, 168, 201], "854e": [122, 199], "coil_l": 124, "air": [124, 169], "core": [124, 168], "inductor": [124, 129, 130, 131, 132], "consist": [124, 143, 171], "coil": 124, "wire": [124, 189, 194], "sort": 124, "devic": [124, 140], "radio": 124, "457418": 124, "1016127": 124, "h": [124, 181], "back": 125, "inrush": 125, "energ": 125, "switch": [125, 134], "anoth": 125, "engerg": 125, "valid": 125, "experienc": 125, "bank": 125, "ifreq": 125, "store": [126, 130, 131, 132], "joul": [126, 132], "charg": [126, 130, 136], "cd": [127, 201], "join": 127, "destin": 127, "respect": [127, 150], "final": [127, 135, 164], "rvolt": 127, "vfinal": 127, "settl": 127, "desir": [128, 134, 139, 148, 178, 187, 188], "mere": 128, "l1": 129, "l2": 129, "made": [129, 145], "you": [129, 180, 201], "v_l": [130, 131], "i_l": [130, 131], "vl": [130, 131], "il": [130, 131], "discharg": [131, 133, 135, 136, 137], "travel": [131, 132], "vo": [133, 192, 193], "size": [133, 135, 159, 164, 182], "cap": [133, 135], "v_t": 133, "v_0": 133, "consumpt": 133, "iload": 134, "fswitch": 134, "dvout": 134, "rectifi": 134, "rippl": 134, "met": 134, "vinit": 135, "vmin": 135, "eremain": 135, "consum": [135, 139, 145, 160, 161, 178], "1m": 135, "v_c": [136, 137, 142], "ohmic": [136, 137, 145, 150, 152, 196, 197], "vc": [136, 137, 142], "readabl": [138, 151], "169": [138, 151], "7056274847714": 138, "pfold": 139, "pfnew": 139, "old": [139, 149, 201], "new": [139, 149, 201], "ignor": 139, "constraint": 139, "qc": 139, "differ": [139, 153, 162, 163, 165, 169], "qnew": 139, "qold": 139, "ilin": 140, "iphas": 140, "realonli": 140, "kwarg": 140, "It": [140, 150, 172, 191], "opposit": 140, "30": 140, "american": 140, "state": [140, 164], "\u03c6": 140, "oppos": 140, "cprint": [140, 141, 201], "13": [140, 160], "8kv": 140, "7967": 140, "434": 140, "param": [141, 148], "rtype": 141, "33": [141, 201], "499999999999986": [141, 201], "58": [141, 201], "02370205355739j": [141, 201], "ph": 141, "vb": 142, "accumul": 142, "v_a": 142, "v_b": 142, "valpha": 142, "match": 142, "adb": [143, 171], "attenu": [143, 148, 171], "look": [143, 171, 201], "greek": 143, "letter": [143, 171], "\u03c0": [143, 199], "vsend": 144, "vrec": 144, "xline": 144, "flow": [144, 158, 160, 161, 192, 193], "ammount": 144, "send": [144, 179, 184, 185], "end": [144, 179, 184, 185], "reciev": 144, "receiv": [144, 179, 184, 185, 201], "rec": 144, "theta_": 144, "admit": [144, 148], "pflow": 144, "hspace": 145, "2cm": 145, "passiv": 145, "pure": 145, "rather": [145, 201], "correl": 145, "lag": [145, 146, 176, 183], "lead": [145, 146, 176, 183], "simpli": [145, 182, 201], "triangl": [146, 183, 201], "prepar": 146, "300": 146, "invert": [147, 154], "reflect": [147, 154], "transact": 148, "propag": 148, "long": 148, "whose": 148, "properti": 148, "govern": 148, "differenti": 148, "2v": 148, "dx": 148, "gamma": 148, "deriv": [148, 199], "surg": 148, "re": [148, 201], "beta": 148, "im": 148, "dictionari": 148, "portion": 148, "pub_old": 149, "pub_new": 149, "chang": [149, 164, 167, 172, 201], "constrain": 149, "base_": 149, "pu_new": 149, "henrei": [150, 180], "found": [150, 158], "extract": 150, "That": 150, "ji": 150, "check": [150, 201], "wa": 150, "0132629": 150, "divis": 151, "119": 151, "99602076735711": 151, "x_pu": 152, "s3ph": [152, 196], "revers": [152, 196], "unscal": 152, "composit": 153, "shannon": 155, "nois": 155, "strength": 155, "iscrl": 156, "simul": [157, 158, 159, 160, 161, 164], "0001": [158, 160], "mxiter": [158, 160], "lsq_ep": [158, 160], "newton": [158, 160, 161], "raphson": [158, 160, 161], "solv": [158, 161, 169, 176], "nonlinear": 158, "jacobian": [158, 160, 161], "At": 158, "hold": 158, "iter": [158, 160, 161], "continu": [158, 201], "until": 158, "guess": [158, 160], "epsilon": [158, 160, 199], "error": [158, 160, 162, 163, 165], "highest": [158, 160], "least": [158, 160], "failov": [158, 160], "iteration_count": 158, "due": 158, "solut": [158, 160], "surpass": 158, "submodul": [158, 160, 161], "def": 158, "matr": 158, "now": [158, 161], "236": [158, 161], "8554": [158, 161], "counter": [158, 160, 161], "nr_pq": [158, 160], "mbuspowerflow": [158, 161], "multi": [158, 160, 161], "fin": 159, "legend": [159, 182], "xmxscale": 159, "figsiz": 159, "digit": 159, "unspecifi": 159, "outsid": 159, "scope": 159, "been": [159, 201], "b_0": 159, "b_1z": 159, "b_2z": 159, "a_1z": 159, "a_2z": 159, "row": 159, "a11": 159, "a12": 159, "b10": 159, "b11": 159, "b12": 159, "a21": 159, "a22": 159, "b20": 159, "b21": 159, "b22": 159, "an1": 159, "an2": 159, "bn0": 159, "bn1": 159, "bn2": 159, "present": [159, 186], "dimens": 159, "subplot": 159, "ybu": [160, 161], "vknown": 160, "pknown": 160, "qknown": 160, "flatstart": 160, "returnct": 160, "slackbu": 160, "wrapper": 160, "converg": 160, "postit": [160, 161], "flat": 160, "\u03b81": [160, 161], "\u03b82": [160, 161], "\u03b8n": [160, 161], "v1": [160, 161], "v2": [160, 161], "vm": [160, 161], "buss": [160, 161], "slack": 160, "reformat": 160, "proper": 160, "ybustest": [160, 161], "10j": [160, 161], "vlist": [160, 161], "don": [160, 161, 201], "know": [160, 161], "plist": [160, 161], "2pu": [160, 161], "qlist": [160, 161], "1pu": [160, 161], "52185223": 160, "85537271": 160, "newtonraphson": [160, 161], "powerflow": 160, "v_set": 161, "p_set": 161, "q_set": 161, "extend": 161, "argshap": 161, "verbos": 161, "\u03b8": 161, "len": 161, "about": [161, 180, 201], "debug": [161, 187], "retset": 161, "parabol": 162, "errtitl": [162, 163, 165], "resplabel": [162, 163, 165], "funclabel": [162, 163, 165], "errlabel": [162, 163, 165], "filenam": [162, 163, 164, 165], "feedback": [162, 163, 165], "ramp": 163, "directori": 163, "simpt": 164, "9999": 164, "10000": 164, "plotstat": 164, "plotforc": 164, "plotresult": 164, "formul": 164, "assum": 164, "automat": [164, 182, 194, 197], "concaten": 164, "rang": [164, 169], "defualt": 164, "descret": 164, "000": 164, "sinf": 166, "sr": [167, 179, 184], "slew": 167, "volatag": 167, "2566370614359173e": 168, "06": [168, 198], "solenoid": 168, "four": 168, "cross": 168, "permeabl": 168, "4\u03c0e": [168, 199], "number_capacitor": 169, "capacitance_ratio": 169, "discret": 169, "suspens": 169, "insul": 169, "strain": 169, "construct": [169, 170, 184, 185], "v_i": 169, "sum_": 169, "disk": 169, "hung": 169, "string_effici": 169, "effici": 169, "capacitor_disk_voltag": 169, "top": [169, 186], "bottom": [169, 186], "npol": 170, "omega_": 170, "n_": [170, 173], "pol": 170, "wsyn": 170, "vgen": 172, "vdi": 172, "pload": 172, "qload": 172, "changer": 172, "doe": 172, "alter": 172, "wind": 172, "therebi": 172, "station": 172, "activ": [172, 201], "ncycl": 173, "02": 173, "zeq": 174, "fabc": 174, "3333333333333333": 174, "fcab": 174, "fbca": 174, "linelen": 174, "transposit": 174, "percent": 174, "cab": 174, "bca": 174, "r_p": 174, "80": 175, "third": 176, "beit": 176, "iv": 176, "poer": 176, "480": 176, "9": [176, 178, 179, 184, 189, 199], "999999999999996": 176, "17": [176, 198], "320508075688775j": 176, "499999": 176, "49999": 176, "visual": 177, "no_load_data": 178, "blocked_rotor_data": 178, "output_pow": 178, "torque_r": 178, "circl": [178, 179, 184, 185, 201], "diagram": [178, 179, 182, 201], "obtain": 178, "open_circuit_test_data": 178, "v0": 178, "i0": 178, "w0": 178, "1310": 178, "blocked_rotor_test_data": 178, "vsc": [178, 187, 188], "200": 178, "wsc": 178, "7100": 178, "copper": [178, 189], "15000": 178, "test": [178, 201], "No": 178, "block": 178, "count": 178, "__init__": [178, 179, 180], "entrypoint": 178, "power_circle_typ": 179, "power_factor": [179, 184, 185], "vr": [179, 184, 185], "pr": [179, 184], "qr": [179, 184], "ss": [179, 185], "cmath": [179, 184], "rect": [179, 184], "895": [179, 184], "182": [179, 184], "78": [179, 184], "215": [179, 184], "abcd": [179, 184, 185], "rlc": [180, 201], "uniqu": 180, "varieti": [180, 199], "statist": 180, "upper": 180, "cuttoff": 180, "resonance_frequ": 180, "qualiti": [180, 201], "quality_factor": 180, "code": [180, 201], "3e": 180, "rlc_compon": 180, "029927713857425": 180, "9894367886486917": 180, "plot_1": 180, "lower_frequency_cut": 180, "upper_frequency_cut": 180, "plot_2": 180, "show_legend": 180, "outlin": 181, "bar": 181, "convolv": 181, "illustr": 181, "educ": [181, 200, 201], "impuls": 181, "preffer": 181, "bg": 182, "color": [182, 183], "radiu": 182, "linewidth": 182, "ja": 182, "45": 182, "52": 182, "plt": 182, "red": [182, 183], "green": 182, "blue": 182, "mimic": 182, "background": 182, "d5de9c": 182, "unless": 182, "hexidecim": 182, "declar": 182, "thick": 182, "anyth": 182, "less": 182, "draw": 183, "powercircl": [184, 185], "rload": 186, "r_2": 186, "mmax": 187, "vdc": 187, "005": 188, "kp": 188, "lock": 188, "loop": 188, "equiv": 188, "w0l": 188, "68e": 189, "materi": [189, 200, 201], "16": 189, "dw": 190, "quad": 190, "spectrum": 190, "process": 190, "zmag": 191, "decomposit": 191, "decompos": 191, "possibl": 191, "neglect": 191, "make": [191, 200, 201], "small": 191, "done": 191, "larg": 191, "much": 191, "larger": 191, "zener": [192, 193], "diod": [192, 193], "backward": [192, 193], "reach": [192, 193], "p_r": 192, "min": 193, "amper": 193, "rself": 194, "rac": 194, "rgwac": 194, "dsgw": 194, "dia_gw": 194, "dbc": 194, "dca": 194, "dagw": 194, "dbgw": 194, "dcgw": 194, "full": [194, 201], "feet": 194, "conductor": 194, "commonli": 194, "gmd": 194, "inclus": 194, "z_pu": 196, "vbase": 197, "perunit": 197, "reffer": 197, "accomid": 197, "automaticlali": 197, "zsource_pu": 197, "migrat": 198, "sphinx": 198, "immateri": 198, "joe": [198, 201], "stanlei": [198, 201], "2023": 198, "22": 198, "sever": 199, "arithmet": 199, "pico": 199, "nano": 199, "micro": 199, "mili": 199, "kila": 199, "mega": 199, "giga": 199, "u0": 199, "\u00b50": 199, "e0": 199, "\u03b50": 199, "carson_r": 199, "869e": 199, "carson": 199, "ristanc": 199, "watts_per_hp": 199, "kwh_per_btu": 199, "librari": [200, 201], "compil": [200, 201], "intent": [200, 201], "research": [200, 201], "develop": [200, 201], "explor": [200, 201], "realm": [200, 201], "py": [200, 201], "leverag": [200, 201], "script": [200, 201], "program": [200, 201], "command": [200, 201], "api": 201, "resourc": 201, "recent": 201, "our": 201, "document": 201, "updat": 201, "page": 201, "still": 201, "forseeabl": 201, "futur": 201, "intend": 201, "development": 201, "extens": 201, "latex": 201, "your": 201, "basic": 201, "pip": 201, "success": 201, "environ": 201, "_version_": 201, "greatest": 201, "want": 201, "directli": 201, "do": 201, "easiest": 201, "issu": 201, "git": 201, "engineerjoe440": 201, "altern": 201, "fashion": 201, "clone": 201, "repositori": 201, "local": 201, "download": 201, "navig": 201, "folder": 201, "path": 201, "setup": 201, "fault": 201, "love": 201, "see": 201, "write": 201, "realli": 201, "lack": 201, "ve": 201, "action": 201, "hope": 201, "somedai": 201, "verif": 201, "got": 201, "throw": 201, "goal": 201, "becom": 201, "comprehens": 201, "toolkit": 201, "drop": 201, "pull": 201, "request": 201, "report": 201, "go": 201, "unnot": 201, "track": 201, "bug": 201, "them": 201, "word": 201, "infanc": 201, "share": 201, "friend": 201, "colleagu": 201, "sure": 201, "everyon": 201, "opportun": 201, "take": 201, "advantag": 201, "guid": 201, "come": 201, "chat": 201, "stephen": 201, "week": 201, "student": 201, "idaho": 201, "jeremi": 201, "perhac": 201, "daniel": 201, "allen": 201, "universtii": 201, "dr": 201, "denni": 201, "sullivan": 201, "proffessor": 201, "brian": 201, "johnson": 201, "stackoverflow": 201, "gg349": 201, "shaurya": 201, "uppal": 201, "onlin": 201, "contributor": 201, "paul": 201, "ortman": 201, "instructor": 201, "regard": 201, "yahoo": 201, "under": 201, "mit": 201, "fit": 201, "feel": 201, "ask": 201, "edit": 201}, "objects": {"": [[1, 0, 0, 1, "electricpy", ""]], "electricpy": [[2, 1, 1, 0, "acpiv", "AC Power-Voltage-Current Relation Function."], [3, 0, 0, 1, "bode", ""], [7, 1, 1, 0, "bridge_impedance", "Bridge Impedance Calculator."], [8, 1, 1, 0, "characterz", "Characteristic Impedance Calculator."], [9, 0, 0, 1, "conversions", ""], [40, 1, 1, 0, "cosfilt", "Cosine Filter Function."], [41, 1, 1, 0, "cprint", "Phasor (Complex) Printing Function."], [42, 1, 1, 0, "curdiv", "Electrical Current Divider Function."], [43, 1, 1, 0, "de_calc", "De Transmission Line Value Calculator."], [44, 1, 1, 0, "dynetz", "Delta-Wye Impedance Converter."], [45, 0, 0, 1, "fault", ""], [91, 1, 1, 0, "fftplot", "FFT System Plotter."], [92, 1, 1, 0, "fftsumplot", "FFT Summation Plotter."], [93, 1, 1, 0, "funcfft", "FFT Evaluator for Callable Functions."], [94, 1, 1, 0, "geninternalv", "Electric Generator Internal Voltage Evaluator."], [95, 1, 1, 0, "gmd", "GMD (Geometric Mean Distance) Calculator."], [96, 1, 1, 0, "harmonics", "Harmonic Function Generator."], [97, 1, 1, 0, "hartleydata", "Hartley Data Function."], [98, 1, 1, 0, "ic_555_astable", "555 Integrated Circuit Calculator."], [99, 1, 1, 0, "ic_555_monostable", "555 Integrated Circuit Calculator."], [100, 1, 1, 0, "induction_machine_slip", "Induction Machine slip calculator."], [101, 1, 1, 0, "instpower", "Instantaneous Power Function."], [102, 1, 1, 0, "ipu", "Per-Unit Current Evaluator."], [103, 1, 1, 0, "iscrl", "Short-Circuit-Current (ISC) Calculator."], [104, 0, 0, 1, "latex", ""], [107, 1, 1, 0, "led_resistor", "LED Resistor Calculator."], [108, 1, 1, 0, "lm317", "LM317 linear voltage regulator solver."], [109, 1, 1, 0, "machslip", "Machine Slip Calculator."], [110, 0, 0, 1, "math", ""], [118, 1, 1, 0, "motorstartcap", "Single Phase Motor Starting Capacitor Function."], [119, 1, 1, 0, "natfreq", "Natural Frequency Evaluator."], [120, 1, 1, 0, "nlinpf", "Non-Linear Power Factor Evaluator."], [121, 1, 1, 0, "non_linear_pf", "Non-Linear Power Factor Evaluator."], [122, 1, 1, 0, "parallel_plate_capacitance", "Parallel-Plate Capacitance Calculator."], [123, 0, 0, 1, "passive", ""], [138, 1, 1, 0, "peak", "Sinusoid RMS to Peak Converter."], [139, 1, 1, 0, "pfcorrection", "Power Factor Correction Function."], [140, 1, 1, 0, "phaseline", "Line-Line to Line-Neutral Converter."], [141, 0, 0, 1, "phasor", ""], [142, 1, 1, 0, "phs3valpha", "Three-Phase V-Alpha Calculator."], [143, 1, 1, 0, "pi_attenuator", "Pi attenuator."], [144, 1, 1, 0, "powerflow", "Approximated Power-Flow Calculator."], [145, 1, 1, 0, "powerimpedance", "Impedance from Apparent Power Formula."], [146, 1, 1, 0, "powerset", "Power Triangle Conversion Function."], [147, 1, 1, 0, "primary", "Electrical Transformer Primary Evaluator."], [148, 1, 1, 0, "propagation_constants", "Transaction Line Propagation Constant Calculator."], [149, 1, 1, 0, "puchgbase", "Per-Unit Change of Base Function."], [150, 1, 1, 0, "reactance", "Capacitance/Inductance from Impedance."], [151, 1, 1, 0, "rms", "Sinusoid Peak to RMS Converter."], [152, 1, 1, 0, "rxrecompose", "Resistance/Reactance from Per-Unit System Evaluator."], [153, 1, 1, 0, "sampfft", "Sample Dataset FFT Evaluator."], [154, 1, 1, 0, "secondary", "Electrical Transformer Secondary Evaluator."], [155, 1, 1, 0, "shannondata", "Shannon Data Function."], [156, 1, 1, 0, "short_circuit_current", "Short-Circuit-Current (ISC) Calculator."], [157, 0, 0, 1, "sim", ""], [166, 1, 1, 0, "sinfilt", "Sine Filter Function."], [167, 1, 1, 0, "slew_rate", "Slew Rate Calculator."], [168, 1, 1, 0, "solenoid_inductance", "Solenoid Inductance Calculator."], [169, 1, 1, 0, "suspension_insulators", "Discrete Capacitors Voltage in a Suspension Insulator Strain."], [170, 1, 1, 0, "syncspeed", "Synchronous Speed Calculator Function."], [171, 1, 1, 0, "t_attenuator", "T attenuator."], [172, 1, 1, 0, "tap_changing_transformer", "Calculate Turn Ratio of Load Tap Changing Transformer."], [173, 1, 1, 0, "tcycle", "Time of Electrical Cycles."], [174, 1, 1, 0, "transposez", "Transmission Matrix Equivalent Transposition Calculator."], [175, 1, 1, 0, "unbalance", "Voltage/Current Unbalance Function."], [176, 1, 1, 0, "vipf", "Voltage / Current / Power Factor Solver."], [177, 0, 0, 1, "visu", ""], [186, 1, 1, 0, "voltdiv", "Electrical Voltage Divider Function."], [187, 1, 1, 0, "vscdcbus", "Voltage Sourced Converter DC Bus Voltage Function."], [188, 1, 1, 0, "vscgains", "Voltage Sourced Converter Gains Calculator."], [189, 1, 1, 0, "wireresistance", "Wire Resistance Calculator."], [190, 1, 1, 0, "wrms", "WRMS Function."], [191, 1, 1, 0, "zdecompose", "Impedance Decomposition Function."], [192, 1, 1, 0, "zener_diode_power", "Zener diode power loss function."], [193, 1, 1, 0, "zener_diode_required_resistor", "Zener diode required resistance function ."], [194, 1, 1, 0, "zperlength", "Transmission Line Impedance (RL) Calculator."], [195, 1, 1, 0, "zpu", "Per-Unit Impedance Evaluator."], [196, 1, 1, 0, "zrecompose", "Impedance from Per-Unit System Evaluator."], [197, 1, 1, 0, "zsource", "Source Impedance Calculator."]], "electricpy.acpiv": [[2, 2, 2, 0, "I", "Phase current in amps"], [2, 2, 2, 0, "PF", "Power factor to condition the apparent power to an appropriate complex value."], [2, 2, 2, 0, "S", "Apparent power, may be single or three-phase, specified in volt-amps (VAs)"], [2, 2, 2, 0, "V", "Single-phase voltage in volts"], [2, 2, 2, 0, "VLL", "Line-to-Line voltage in volts"], [2, 2, 2, 0, "VLN", "Line-to-Neutral voltage in volts"]], "electricpy.bode": [[4, 1, 1, 0, "bode", "System Bode Plotting Function."], [5, 1, 1, 0, "sbode", "S-Domain Bode Plotting Function."], [6, 1, 1, 0, "zbode", "Z-Domain Bode Plotting Function."]], "electricpy.bode.bode": [[4, 2, 2, 0, "angle", "Control argument to enable plotting of angle, default=True"], [4, 2, 2, 0, "disp3db", "Control argument to enable the display of the 3dB line, default=False."], [4, 2, 2, 0, "freqaxis", "Control argument to specify the freqency axis in degrees or radians, default is radians (rad)"], [4, 2, 2, 0, "lowcut", "An additional marking line that can be plotted, default=None"], [4, 2, 2, 0, "magnitude", "Control argument to enable plotting of magnitude, default=True"], [4, 2, 2, 0, "mn", "The minimum frequency to be calculated for. default=0.01."], [4, 2, 2, 0, "mx", "The maximum frequency to be calculated for. default=1000."], [4, 2, 2, 0, "npts", "The number of points over which to calculate the system. default=100."], [4, 2, 2, 0, "sv", "Save the plots as PNG files. Default is False."], [4, 2, 2, 0, "system", "The Transfer Function; can be provided as the following: - 1 (instance of lti) - 2 (num, den) - 3 (zeros, poles, gain) - 4 (A, B, C, D)"], [4, 2, 2, 0, "title", "Additional string to be added to plot titles; default=\"\"."], [4, 2, 2, 0, "xlim", "Limit in x-axis for graph plot. Accepts tuple of: (xmin, xmax). Default is False."], [4, 2, 2, 0, "ylim", "Limit in y-axis for graph plot. Accepts tuple of: (ymin, ymax). Default is False."]], "electricpy.bode.sbode": [[5, 2, 2, 0, "NN", "The Interval over which to be generated, default=1000"], [5, 2, 2, 0, "angle", "Control argument to enable plotting of angle, default=True"], [5, 2, 2, 0, "disp3db", "Control argument to enable the display of the 3dB line, default=False."], [5, 2, 2, 0, "f", "The Input Function, must be callable function object."], [5, 2, 2, 0, "lowcut", "An additional marking line that can be plotted, default=None"], [5, 2, 2, 0, "magnitude", "Control argument to enable plotting of magnitude, default=True"], [5, 2, 2, 0, "mn", "The minimum W value to be generated, default=0"], [5, 2, 2, 0, "mx", "The maximum W value to be generated, default=1000"], [5, 2, 2, 0, "sv", "Save the plots as PNG files. Default is False."], [5, 2, 2, 0, "title", "Additional string to be added to plot titles; default=\"\"."], [5, 2, 2, 0, "xlim", "Limit in x-axis for graph plot. Accepts tuple of: (xmin, xmax). Default is False."], [5, 2, 2, 0, "ylim", "Limit in y-axis for graph plot. Accepts tuple of: (ymin, ymax). Default is False."]], "electricpy.bode.zbode": [[6, 2, 2, 0, "NN", "The Interval over which to be generated, default=1000"], [6, 2, 2, 0, "angle", "Control argument to enable plotting of angle, default=True"], [6, 2, 2, 0, "approx", "Control argument to specify whether input funciton should be treated as Z-Domain function or approximated Z-Domain function. default=False"], [6, 2, 2, 0, "disp3db", "Control argument to enable the display of the 3dB line, default=False."], [6, 2, 2, 0, "dt", "The time-step used, default=0.01"], [6, 2, 2, 0, "f", "The Input Function, must be callable function object. Must be specified as transfer function of type: - S-Domain (when approx=False, default) - Z-Domain (when approx=True)"], [6, 2, 2, 0, "lowcut", "An additional marking line that can be plotted, default=None"], [6, 2, 2, 0, "magnitude", "Control argument to enable plotting of magnitude, default=True"], [6, 2, 2, 0, "mn", "The minimum phi value to be generated, default=0"], [6, 2, 2, 0, "mx", "The maximum phi value to be generated, default=2*pi"], [6, 2, 2, 0, "sv", "Save the plots as PNG files. Default is False."], [6, 2, 2, 0, "title", "Additional string to be added to plot titles; default=\"\"."], [6, 2, 2, 0, "xlim", "Limit in x-axis for graph plot. Accepts tuple of: (xmin, xmax). Default is False."], [6, 2, 2, 0, "ylim", "Limit in y-axis for graph plot. Accepts tuple of: (ymin, ymax). Default is False."]], "electricpy.bridge_impedance": [[7, 2, 2, 0, "z1", "Bridge impedance 1iscrl"], [7, 2, 2, 0, "z2", "Bridge impedance 2"], [7, 2, 2, 0, "z3", "Bridge impedance 3"], [7, 2, 2, 0, "z4", "Bridge impedance 4"], [7, 2, 2, 0, "z5", "Detector impedance or impedance between two bridge branches"]], "electricpy.characterz": [[8, 2, 2, 0, "C", "Capacitance in Farads."], [8, 2, 2, 0, "G", "Conductance in mhos (siemens)."], [8, 2, 2, 0, "L", "Inductance in Henries."], [8, 2, 2, 0, "R", "Resistance in ohms."], [8, 2, 2, 0, "freq", "System frequency in Hz, default=60"]], "electricpy.conversions": [[10, 1, 1, 0, "abc_to_seq", "Phase-System to Sequence-System Conversion."], [11, 1, 1, 0, "btu", "Killo-Watt-Hours to BTU Function."], [12, 1, 1, 0, "btu_to_kwh", "BTU to Kilo-Watt-Hours Function."], [13, 1, 1, 0, "db_to_voltage", "Decibel to Reference Voltage."], [14, 1, 1, 0, "db_to_vref", "Decibel to Reference Voltage."], [15, 1, 1, 0, "dbmw_to_dbw", "Convert dBmW to dBW."], [16, 1, 1, 0, "dbmw_to_watts", "Convert dbmW to Watts."], [17, 1, 1, 0, "dbw_to_dbmw", "Convert dBW to dBmW."], [18, 1, 1, 0, "dbw_to_watts", "Convert dBW to Watts."], [19, 1, 1, 0, "hertz", "Radians to Hertz Converter."], [20, 1, 1, 0, "horsepower", "Watts to Horsepower Function."], [21, 1, 1, 0, "hp_to_watts", "Horsepower to Watts Formula."], [22, 1, 1, 0, "hz_to_rad", "Hertz to Radians Converter."], [23, 1, 1, 0, "hz_to_rpm", "Hertz to RPM Converter."], [24, 1, 1, 0, "kwh", "BTU to Kilo-Watt-Hours Function."], [25, 1, 1, 0, "kwh_to_btu", "Killo-Watt-Hours to BTU Function."], [26, 1, 1, 0, "phs_to_seq", "Phase-System to Sequence-System Conversion."], [27, 1, 1, 0, "rad_to_hz", "Radians to Hertz Converter."], [28, 1, 1, 0, "rad_to_rpm", "Radians-per-Second to RPM Converter."], [29, 1, 1, 0, "radsec", "Hertz to Radians Converter."], [30, 1, 1, 0, "rpm_to_hz", "RPM to Hertz Converter."], [31, 1, 1, 0, "rpm_to_rad", "RPM to Radians-per-Second Converter."], [32, 1, 1, 0, "seq_to_abc", "Sequence-System to Phase-System Conversion."], [33, 1, 1, 0, "seq_to_phs", "Sequence-System to Phase-System Conversion."], [34, 1, 1, 0, "sequencez", "Sequence Impedance Calculator."], [35, 1, 1, 0, "voltage_to_db", "Voltage to Decibel."], [36, 1, 1, 0, "watts", "Horsepower to Watts Formula."], [37, 1, 1, 0, "watts_to_dbmw", "Watts to dBmW."], [38, 1, 1, 0, "watts_to_dbw", "Watt to dBW converter."], [39, 1, 1, 0, "watts_to_hp", "Watts to Horsepower Function."]], "electricpy.conversions.abc_to_seq": [[10, 2, 2, 0, "Mabc", "Phase-based values to be converted."], [10, 2, 2, 0, "reference", "Single character denoting the reference, default='A'"]], "electricpy.conversions.btu": [[11, 2, 2, 0, "kWh", "The number of killo-Watt-hours"]], "electricpy.conversions.btu_to_kwh": [[12, 2, 2, 0, "BTU", "The number of British Thermal Units"]], "electricpy.conversions.db_to_voltage": [[13, 2, 2, 0, "db", "voltage in Decibel"], [13, 2, 2, 0, "ref_voltage", "Ref Voltage"]], "electricpy.conversions.db_to_vref": [[14, 2, 2, 0, "db", "voltage in Decibel"], [14, 2, 2, 0, "voltage", "Voltage"]], "electricpy.conversions.dbmw_to_dbw": [[15, 2, 2, 0, "dbmw", "Power in the decibel-milli-watts scale (dBmW)"]], "electricpy.conversions.dbmw_to_watts": [[16, 2, 2, 0, "dbmw", "Power in the decibel-milli-watts scale (dBmW)"]], "electricpy.conversions.dbw_to_dbmw": [[17, 2, 2, 0, "dbw", "Power in the decibel scale (dBW)"]], "electricpy.conversions.dbw_to_watts": [[18, 2, 2, 0, "dbw", "Power in the decibel scale (dBW)"]], "electricpy.conversions.hertz": [[19, 2, 2, 0, "radians", "The frequency (represented in radians/sec)"]], "electricpy.conversions.horsepower": [[20, 2, 2, 0, "watt", "The wattage to compute."]], "electricpy.conversions.hp_to_watts": [[21, 2, 2, 0, "hp", "The horsepower to compute."]], "electricpy.conversions.hz_to_rad": [[22, 2, 2, 0, "hz", "The frequency (represented in Hertz)"]], "electricpy.conversions.hz_to_rpm": [[23, 2, 2, 0, "hz", "The angular velocity in Hertz"]], "electricpy.conversions.kwh": [[24, 2, 2, 0, "BTU", "The number of British Thermal Units"]], "electricpy.conversions.kwh_to_btu": [[25, 2, 2, 0, "kWh", "The number of killo-Watt-hours"]], "electricpy.conversions.phs_to_seq": [[26, 2, 2, 0, "Mabc", "Phase-based values to be converted."], [26, 2, 2, 0, "reference", "Single character denoting the reference, default='A'"]], "electricpy.conversions.rad_to_hz": [[27, 2, 2, 0, "radians", "The frequency (represented in radians/sec)"]], "electricpy.conversions.rad_to_rpm": [[28, 2, 2, 0, "rad", "The angular velocity in radians-per-second"]], "electricpy.conversions.radsec": [[29, 2, 2, 0, "hz", "The frequency (represented in Hertz)"]], "electricpy.conversions.rpm_to_hz": [[30, 2, 2, 0, "rpm", "The angular velocity in revolutions-per-minute (RPM)"]], "electricpy.conversions.rpm_to_rad": [[31, 2, 2, 0, "rpm", "The angular velocity in revolutions-per-minute (RPM)"]], "electricpy.conversions.seq_to_abc": [[32, 2, 2, 0, "M012", "Sequence-based values to convert."], [32, 2, 2, 0, "reference", "Single character denoting the reference, default='A'"]], "electricpy.conversions.seq_to_phs": [[33, 2, 2, 0, "M012", "Sequence-based values to convert."], [33, 2, 2, 0, "reference", "Single character denoting the reference, default='A'"]], "electricpy.conversions.sequencez": [[34, 2, 2, 0, "Zabc", "2-D (3x3) matrix of complex values representing the pharo impedance in the ABC-domain."], [34, 2, 2, 0, "diag", "Control argument to force the function to reduce the matrix to its diagonal terms."], [34, 2, 2, 0, "reference", "Single character denoting the reference, default='A'"], [34, 2, 2, 0, "resolve", "Control argument to force the function to evaluate the individual sequence impedance [Z0, Z1, Z2], default=False"], [34, 2, 2, 0, "rounds", "Integer denoting number of decimal places resulting matrix should be rounded to. default=3"]], "electricpy.conversions.voltage_to_db": [[35, 2, 2, 0, "ref_voltage", "Reference voltage"], [35, 2, 2, 0, "voltage", "voltage"]], "electricpy.conversions.watts": [[36, 2, 2, 0, "hp", "The horsepower to compute."]], "electricpy.conversions.watts_to_dbmw": [[37, 2, 2, 0, "watt", "Power in Watts"]], "electricpy.conversions.watts_to_dbw": [[38, 2, 2, 0, "watt", "Power in Watts"]], "electricpy.conversions.watts_to_hp": [[39, 2, 2, 0, "watt", "The wattage to compute."]], "electricpy.cosfilt": [[40, 2, 2, 0, "Srate", "Sampling rate for dataset, specified in number of values per fundamental cycle."], [40, 2, 2, 0, "arr", "The input data array."], [40, 2, 2, 0, "domain", "Control argument to force return of x-axis array for the filtered data."]], "electricpy.cprint": [[41, 2, 2, 0, "decimals", "Replaces round argument. Control argument specifying how many decimals of the complex value to be printed. May be negative to round to spaces to the left of the decimal place (follows standard round() functionality). default=3"], [41, 2, 2, 0, "label", "The pre-pended string used as a descriptive labeling string."], [41, 2, 2, 0, "pretty", "Control argument to force printed result to a pretty format without array braces. default=True"], [41, 2, 2, 0, "printval", "Control argument enabling/disabling printing of the string. default=True"], [41, 2, 2, 0, "ret", "Control argument allowing the evaluated value to be returned. default=False"], [41, 2, 2, 0, "round", "Control argument specifying how many decimals of the complex value to be printed. May be negative to round to spaces to the left of the decimal place (follows standard round() functionality). default=3"], [41, 2, 2, 0, "title", "The pre-pended string describing a set of complex values."], [41, 2, 2, 0, "unit", "The string to be printed corresponding to the unit mark."], [41, 2, 2, 0, "val", "The Complex Value to be Printed, may be singular value, tuple of values, or list/array."]], "electricpy.curdiv": [[42, 2, 2, 0, "Iin", "The input current for the system, default=None"], [42, 2, 2, 0, "Ri", "The Particular Resistor of Interest, should not be included in the tuple passed to Rset."], [42, 2, 2, 0, "Rset", "Tuple of remaining resistances (impedances) in network."], [42, 2, 2, 0, "Vin", "The input voltage for the system, default=None"], [42, 2, 2, 0, "Vout", "Control argument to enable return of the voltage across the resistor (impedance) of interest (Ri)"], [42, 2, 2, 0, "combine", "Control argument to force resistance combination. default=True"]], "electricpy.de_calc": [[43, 2, 2, 0, "freq", "System frequency in Hertz, default=60"], [43, 2, 2, 0, "rho", "Earth resistivity (in ohm-meters), may also be passed a string in the set: {SEA, SWAMP, AVG,AVERAGE,DAMP,DRY,SAND,SANDSTONE}"]], "electricpy.dynetz": [[44, 2, 2, 0, "delta", "Tuple of the delta-connected impedance values as: { Z12, Z23, Z31 }, default=None"], [44, 2, 2, 0, "wye", "Tuple of the wye-connected impedance valuse as: { Z1, Z2, Z3 }, default=None"]], "electricpy.fault": [[46, 1, 1, 0, "busvolt", "Faulted Bus Voltage Calculator."], [47, 1, 1, 0, "correctedcurrents", "Electrical Transformer Current Correction Function."], [48, 1, 1, 0, "ct_cclass", "Electrical Current Transformer (CT) C-Class Function."], [49, 1, 1, 0, "ct_satratburden", "Electrical Current Transformer (CT) Saturation at Rated Burden Calculator."], [50, 1, 1, 0, "ct_saturation", "Electrical Current Transformer Saturation Calculator."], [51, 1, 1, 0, "ct_timetosat", "Electrical Current Transformer (CT) Time to Saturation Function."], [52, 1, 1, 0, "ct_vpeak", "Electrical Current Transformer (CT) Peak Voltage Calculator."], [53, 1, 1, 0, "distmeasz", "Distance Element Measured Impedance Function."], [54, 1, 1, 0, "double_phase_to_ground_fault", "Double-Line-to-Ground Fault Calculator."], [55, 1, 1, 0, "faultratio", "Fault Multiple of Pickup (Ratio) Calculator."], [56, 1, 1, 0, "genlossfield", "Electric Generator Loss of Field Function."], [57, 1, 1, 0, "highzmini", "Minimum Current for High Impedance Protection Calculator."], [58, 1, 1, 0, "highzvpickup", "High Impedance Pickup Setting Function."], [59, 1, 1, 0, "indmacheigenvalues", "Induction Machine Eigenvalue Calculator."], [60, 1, 1, 0, "indmachphs3sc", "Induction Machine 3-Phase SC Calculator."], [61, 1, 1, 0, "indmachphs3torq", "Induction Machine 3-Phase Torque Calculator."], [62, 1, 1, 0, "instoc", "Instantaneous OverCurrent Pickup Calculator."], [63, 1, 1, 0, "iopirt", "Operate/Restraint Current Calculator."], [64, 1, 1, 0, "phase_to_phase_fault", "Line-to-Line Fault Calculator."], [65, 1, 1, 0, "phs1g", "Single-Phase-to-Ground Fault Calculator."], [66, 1, 1, 0, "phs1mvasc", "Single-Phase MVA Short-Circuit Calculator."], [67, 1, 1, 0, "phs2", "Line-to-Line Fault Calculator."], [68, 1, 1, 0, "phs2g", "Double-Line-to-Ground Fault Calculator."], [69, 1, 1, 0, "phs3", "Three-Phase Fault Calculator."], [70, 1, 1, 0, "phs3mvasc", "Three-Phase MVA Short-Circuit Calculator."], [71, 1, 1, 0, "pickup", "Electrical Current Pickup Selection Assistant."], [72, 1, 1, 0, "pktransrecvolt", "Peak Transient Recovery Function."], [73, 1, 1, 0, "poleopen1", "Single Pole Open Fault Calculator."], [74, 1, 1, 0, "poleopen2", "Single Pole Open Fault Calculator."], [75, 1, 1, 0, "protectiontap", "Protection TAP Setting Calculator."], [76, 1, 1, 0, "residcomp", "Residual Compensation Factor Function."], [77, 1, 1, 0, "scMVA", "Short-Circuit MVA Calculator."], [78, 1, 1, 0, "short_circuit_mva", "Short-Circuit MVA Calculator."], [79, 1, 1, 0, "single_phase_to_ground_fault", "Single-Phase-to-Ground Fault Calculator."], [80, 1, 1, 0, "symrmsfaultcur", "Symmetrical/RMS Current Calculator."], [81, 1, 1, 0, "synmach_Iasym", "Synch. Machine Asymmetrical Fault Current Calc."], [82, 1, 1, 0, "synmach_Isym", "Synch. Machine Symmetrical Fault Current Calc."], [83, 1, 1, 0, "synmach_ifault", "Synchronous Machine Fault Current Calculator."], [84, 1, 1, 0, "tdradial", "Radial Time Dial Coordination Function."], [85, 1, 1, 0, "thermaltime", "Thermal Time Limit Calculator."], [86, 1, 1, 0, "three_phase_fault", "Three-Phase Fault Calculator."], [87, 1, 1, 0, "tocreset", "Time OverCurrent Reset Time Function."], [88, 1, 1, 0, "toctriptime", "Time OverCurrent Trip Time Function."], [89, 1, 1, 0, "transmismatch", "Electrical Transformer TAP Mismatch Function."], [90, 1, 1, 0, "trvresistor", "Transient Recovery Voltage (TRV) Reduction Resistor Function."]], "electricpy.fault.busvolt": [[46, 2, 2, 0, "If", "Sequence Fault Current Evaluated at Bus n"], [46, 2, 2, 0, "Vpf", "Voltage Pre-Fault, Singular Number"], [46, 2, 2, 0, "Z0", "Zero-Sequence Impedance Matrix"], [46, 2, 2, 0, "Z1", "Positive-Sequence Impedance Matrix"], [46, 2, 2, 0, "Z2", "Negative-Sequence Impedance Matrix"], [46, 2, 2, 0, "k", "Bus index at which to calculate faulted voltage"], [46, 2, 2, 0, "n", "Bus index at which fault occurred"], [46, 2, 2, 0, "reference", "Single character denoting the reference, default='A'"], [46, 2, 2, 0, "sequence", "Control argument to force return into symmetrical- or phase-domain values."]], "electricpy.fault.correctedcurrents": [[47, 2, 2, 0, "CTR", "Current Transformer Ratio, default=1"], [47, 2, 2, 0, "Ipri", "Three-phase set (IA, IB, IC) of primary currents."], [47, 2, 2, 0, "TAP", "Relay's TAP setting."], [47, 2, 2, 0, "correction", "String defining correction factor, may be one of: (Y, D+, D-, Z); Y denotes Y (Y0) connection, D+ denotes Dab (D1) connection, D- denotes Dac (D11) connection, and Z (Z12) denotes zero-sequence removal. default=\"Y\""]], "electricpy.fault.ct_cclass": [[48, 2, 2, 0, "CTR", "The CT Ratio (primary/secondary, N) to be used."], [48, 2, 2, 0, "Imag", "The (maximum) current magnitude to use for calculation, typically the fault current."], [48, 2, 2, 0, "Irated", "The rated secondary current for the CT."], [48, 2, 2, 0, "Rb", "The total burden resistance in ohms."], [48, 2, 2, 0, "Xb", "The total burden reactance in ohms."], [48, 2, 2, 0, "XoR", "The X-over-R ratio of the system."], [48, 2, 2, 0, "remnance", "The system flux remnance, default=0."], [48, 2, 2, 0, "sat_crit", "The saturation criteria which must be satisfied, typically such that CT saturation will not occur, default=20."]], "electricpy.fault.ct_satratburden": [[49, 2, 2, 0, "ALF", "Accuracy Limit Factor, default=20."], [49, 2, 2, 0, "ANSIv", "The ANSI voltage requirement to meet."], [49, 2, 2, 0, "Inom", "Nominal Current"], [49, 2, 2, 0, "VArat", "The apparent power (VA) rating of the CT."]], "electricpy.fault.ct_saturation": [[50, 2, 2, 0, "ALF", "The Saturation Constant which must be satisfied, default=20."], [50, 2, 2, 0, "CTR", "The CT Ratio (primary/secondary, N) to be used."], [50, 2, 2, 0, "Imag", "The (maximum) current magnitude to use for calculation, typically the fault current."], [50, 2, 2, 0, "Irated", "The rated secondary current for the CT."], [50, 2, 2, 0, "Rb", "The total burden resistance in ohms."], [50, 2, 2, 0, "Vrated", "The rated voltage (accompanying the C-Class value) of the CT."], [50, 2, 2, 0, "Xb", "The total burden reactance in ohms."], [50, 2, 2, 0, "XoR", "The X-over-R ratio of the system."], [50, 2, 2, 0, "freq", "The system frequency in Hz, default=60."], [50, 2, 2, 0, "remnance", "The system flux remnance, default=0."]], "electricpy.fault.ct_timetosat": [[51, 2, 2, 0, "CTR", "The CT Ratio (primary/secondary, N) to be used."], [51, 2, 2, 0, "Imax", "The (maximum) current magnitude to use for calculation, typically the fault current."], [51, 2, 2, 0, "Rb", "The total burden resistance in ohms."], [51, 2, 2, 0, "Vknee", "The knee-voltage for the CT."], [51, 2, 2, 0, "XoR", "The X-over-R ratio of the system."], [51, 2, 2, 0, "freq", "The system frequency in Hz, default=60."], [51, 2, 2, 0, "npts", "The number of points (per cycle) to calculate if ts is not specified, default=100."], [51, 2, 2, 0, "plot", "Control argument to enable plotting of calculated curves, default=False."], [51, 2, 2, 0, "ts", "The time-array or particular (floatint point) time at which to calculate the values. default=_np.linspace(0,0.1,freq*npts)"]], "electricpy.fault.ct_vpeak": [[52, 2, 2, 0, "CTR", "The CTR turns ratio of the CT."], [52, 2, 2, 0, "Ip", "The peak current for the CT."], [52, 2, 2, 0, "Zb", "The burden impedance magnitude (in ohms)."]], "electricpy.fault.distmeasz": [[53, 2, 2, 0, "CTR", "Current transformer ratio, default=1"], [53, 2, 2, 0, "If", "Faulted phase current measured in primary amps."], [53, 2, 2, 0, "Ip", "Secondary phase current measured in primary amps."], [53, 2, 2, 0, "Ipp", "Terchiary phase current measured in primary amps."], [53, 2, 2, 0, "VLNmeas", "Measured Line-to-Neutral voltage for the faulted phase in primary volts."], [53, 2, 2, 0, "VTR", "Voltage transformer ratio, default=1"], [53, 2, 2, 0, "k0", "Residual Compensation Factor"], [53, 2, 2, 0, "linelength", "The length (in same base unit as impedance characteristics) of the line. default=1"], [53, 2, 2, 0, "z0", "The zero-sequence impedance characteristic of the line, specified in ohms-per-unit where the total line length (of same unit) is specified in linelength argument."], [53, 2, 2, 0, "z1", "The positive-sequence impedance characteristic of the line, specified in ohms-per-unit where the total line length (of same unit) is specified in linelength argument."]], "electricpy.fault.double_phase_to_ground_fault": [[54, 2, 2, 0, "Rf", "The fault resistance, default=0"], [54, 2, 2, 0, "Vth", "The Thevenin-Equivalent-Voltage"], [54, 2, 2, 0, "Zseq", "Tupple of sequence reactances as (Z0, Z1, Z2)"], [54, 2, 2, 0, "reference", "Single character denoting the reference, default='A'"], [54, 2, 2, 0, "sequence", "Control argument to force return into symmetrical- or phase-domain values."]], "electricpy.fault.faultratio": [[55, 2, 2, 0, "CTR", "Current Transformer Ratio for relay, default=1"], [55, 2, 2, 0, "I", "Measured Current in Amps"], [55, 2, 2, 0, "Ipickup", "Fault Current Pickup Setting (in Amps)"]], "electricpy.fault.genlossfield": [[56, 2, 2, 0, "CTR", "Current Transformer Ratio, default=1"], [56, 2, 2, 0, "VTR", "Voltage Transformer Ratio, default=1"], [56, 2, 2, 0, "Xd", "The Transient Reactance (Xd) term. May be specified in ohms or Per-Unit ohms if Zbase is set."], [56, 2, 2, 0, "Xpd", "The Sub-Transient Reactance (X'd) term. May be specified in ohms or Per-Unit ohms if Zbase is set."], [56, 2, 2, 0, "Zbase", "Base impedance, used to convert per-unit Xd and Xpd to secondary values. default=1"]], "electricpy.fault.highzmini": [[57, 2, 2, 0, "CTR", "Current Transformer Ratio, default=1"], [57, 2, 2, 0, "Ie", "The excitation current at the voltage setting"], [57, 2, 2, 0, "Imov", "The overvoltage protection current at the voltage setting. default=0.0"], [57, 2, 2, 0, "Irly", "The relay current at voltage setting"], [57, 2, 2, 0, "N", "Number of Current Transformers included in scheme"], [57, 2, 2, 0, "Rrly", "The relay's internal resistance in ohms, default=2000"], [57, 2, 2, 0, "Vset", "The relay's voltage pickup setting in volts."]], "electricpy.fault.highzvpickup": [[58, 2, 2, 0, "CTR", "Current Transformer Ratio, default=1"], [58, 2, 2, 0, "I", "Fault current on primary side (in amps)"], [58, 2, 2, 0, "Kd", "The dependability factor for dependable voltage pickup setting, default=0.5"], [58, 2, 2, 0, "Ks", "Security Factor for secure voltage pickup setting, default=1.5"], [58, 2, 2, 0, "RL", "One-way line resistance in ohms"], [58, 2, 2, 0, "Rct", "Current Transformer Resistance in ohms"], [58, 2, 2, 0, "Vstd", "C-Class Voltage rating (i.e. C-400), default=400"], [58, 2, 2, 0, "threephase", "Control argument to set the function to evaluate the result for a three-phase fault or unbalanced fault. default=False"]], "electricpy.fault.indmacheigenvalues": [[59, 2, 2, 0, "Lm", "Inductance of the Magnetizing branch (in Henrys)."], [59, 2, 2, 0, "Lr", "Inductance of the Rotor (in Henrys)."], [59, 2, 2, 0, "Ls", "Inductance of the Stator (in Henrys)."], [59, 2, 2, 0, "Rr", "Resistance of the Rotor (in Ohms)."], [59, 2, 2, 0, "Rs", "Resistance of the Stator (in Ohms)."], [59, 2, 2, 0, "freq", "Base frequency of the system (in Hertz). default=60"], [59, 2, 2, 0, "wrf", "Frequency (in radians/sec) of the rotor slip. default=0"]], "electricpy.fault.indmachphs3sc": [[60, 2, 2, 0, "Is0", "The initial (t=0) current on the stator."], [60, 2, 2, 0, "Lm", "Inductance of the Magnetizing branch (in Henrys)."], [60, 2, 2, 0, "Lr", "Inductance of the Rotor (in Henrys)."], [60, 2, 2, 0, "Ls", "Inductance of the Stator (in Henrys)."], [60, 2, 2, 0, "Rr", "Resistance of the Rotor (in Ohms)."], [60, 2, 2, 0, "Rs", "Resistance of the Stator (in Ohms)."], [60, 2, 2, 0, "freq", "Base frequency of the system (in Hertz). default=60"], [60, 2, 2, 0, "real", "Control argument to force returned value to be real part only. default=True"], [60, 2, 2, 0, "t", "The time at which to find the current, may be int, float, or numpy array."], [60, 2, 2, 0, "wrf", "Frequency (in radians/sec) of the rotor slip. default=0"]], "electricpy.fault.indmachphs3torq": [[61, 2, 2, 0, "Is0", "The initial (t=0) current on the stator."], [61, 2, 2, 0, "Lm", "Inductance of the Magnetizing branch (in Henrys)."], [61, 2, 2, 0, "Lr", "Inductance of the Rotor (in Henrys)."], [61, 2, 2, 0, "Ls", "Inductance of the Stator (in Henrys)."], [61, 2, 2, 0, "Rr", "Resistance of the Rotor (in Ohms)."], [61, 2, 2, 0, "Rs", "Resistance of the Stator (in Ohms)."], [61, 2, 2, 0, "freq", "Base frequency of the system (in Hertz). default=60"], [61, 2, 2, 0, "t", "The time at which to find the current, may be int, float, or numpy array."], [61, 2, 2, 0, "wrf", "Frequency (in radians/sec) of the rotor slip. default=0"]], "electricpy.fault.instoc": [[62, 2, 2, 0, "CTR", "Current Transformer Ratio, default=1"], [62, 2, 2, 0, "Imin", "The minimum fault current in primary amps."], [62, 2, 2, 0, "Ki", ""]], "electricpy.fault.iopirt": [[63, 2, 2, 0, "IpriHV", "Three-phase set (IA, IB, IC) of primary currents on the high-voltage side of power transformer."]], "electricpy.fault.phase_to_phase_fault": [[64, 2, 2, 0, "Rf", "The fault resistance, default=0"], [64, 2, 2, 0, "Vth", "The Thevenin-Equivalent-Voltage"], [64, 2, 2, 0, "Zseq", "Tupple of sequence reactances as (Z0, Z1, Z2)"], [64, 2, 2, 0, "reference", "Single character denoting the reference, default='A'"], [64, 2, 2, 0, "sequence", "Control argument to force return into symmetrical- or phase-domain values."]], "electricpy.fault.phs1g": [[65, 2, 2, 0, "Rf", "The fault resistance, default=0"], [65, 2, 2, 0, "Vth", "The Thevenin-Equivalent-Voltage"], [65, 2, 2, 0, "Zseq", "Tupple of sequence reactances as (Z0, Z1, Z2)"], [65, 2, 2, 0, "reference", "Single character denoting the reference, default='A'"], [65, 2, 2, 0, "sequence", "Control argument to force return into symmetrical- or phase-domain values."]], "electricpy.fault.phs1mvasc": [[66, 2, 2, 0, "Rf", "The fault resistance, default=0"], [66, 2, 2, 0, "Sbase", "The per-unit base for power. default=1"], [66, 2, 2, 0, "Vth", "The Thevenin-Equivalent-Voltage"], [66, 2, 2, 0, "Zseq", "Tupple of sequence reactances as (Z0, Z1, Z2)"]], "electricpy.fault.phs2": [[67, 2, 2, 0, "Rf", "The fault resistance, default=0"], [67, 2, 2, 0, "Vth", "The Thevenin-Equivalent-Voltage"], [67, 2, 2, 0, "Zseq", "Tupple of sequence reactances as (Z0, Z1, Z2)"], [67, 2, 2, 0, "reference", "Single character denoting the reference, default='A'"], [67, 2, 2, 0, "sequence", "Control argument to force return into symmetrical- or phase-domain values."]], "electricpy.fault.phs2g": [[68, 2, 2, 0, "Rf", "The fault resistance, default=0"], [68, 2, 2, 0, "Vth", "The Thevenin-Equivalent-Voltage"], [68, 2, 2, 0, "Zseq", "Tupple of sequence reactances as (Z0, Z1, Z2)"], [68, 2, 2, 0, "reference", "Single character denoting the reference, default='A'"], [68, 2, 2, 0, "sequence", "Control argument to force return into symmetrical- or phase-domain values."]], "electricpy.fault.phs3": [[69, 2, 2, 0, "Rf", "The fault resistance, default=0"], [69, 2, 2, 0, "Vth", "The Thevenin-Equivalent-Voltage"], [69, 2, 2, 0, "Zseq", "Tupple of sequence reactances as (Z0, Z1, Z2)"], [69, 2, 2, 0, "reference", "Single character denoting the reference, default='A'"], [69, 2, 2, 0, "sequence", "Control argument to force return into symmetrical- or phase-domain values."]], "electricpy.fault.phs3mvasc": [[70, 2, 2, 0, "Rf", "The fault resistance, default=0"], [70, 2, 2, 0, "Sbase", "The per-unit base for power. default=1"], [70, 2, 2, 0, "Vth", "The Thevenin-Equivalent-Voltage"], [70, 2, 2, 0, "Zseq", "Tupple of sequence reactances as (Z0, Z1, Z2)"]], "electricpy.fault.pickup": [[71, 2, 2, 0, "Ifaultmin", "The minimum fault current in amps."], [71, 2, 2, 0, "Iloadmax", "The maximum load current in amps."], [71, 2, 2, 0, "printout", "Control argument to enable printing of intermediate stages, default=False."], [71, 2, 2, 0, "scale", "Control scaling to set number of significant figures. default=0"], [71, 2, 2, 0, "units", "String to be appended to any printed output denoting the units of which are being printed, default=\"A\""]], "electricpy.fault.pktransrecvolt": [[72, 2, 2, 0, "C", "Capacitance Value in Farads."], [72, 2, 2, 0, "L", "Inductance in Henries."], [72, 2, 2, 0, "R", "The resistance of the system used for calculation, default=0."], [72, 2, 2, 0, "VLL", "Line-to-Line voltage, exclusive optional argument."], [72, 2, 2, 0, "VLN", "Line-to-Neutral voltage, exclusive optional argument."], [72, 2, 2, 0, "freq", "System frequency in Hz."]], "electricpy.fault.poleopen1": [[73, 2, 2, 0, "Vth", "The Thevenin-Equivalent-Voltage"], [73, 2, 2, 0, "Zseq", "Tupple of sequence reactances as (Z0, Z1, Z2)"], [73, 2, 2, 0, "reference", "Single character denoting the reference, or the faulted phase indicator; default='A'"], [73, 2, 2, 0, "sequence", "Control argument to force return into symmetrical- or phase-domain values."]], "electricpy.fault.poleopen2": [[74, 2, 2, 0, "Vth", "The Thevenin-Equivalent-Voltage"], [74, 2, 2, 0, "Zseq", "Tupple of sequence reactances as (Z0, Z1, Z2)"], [74, 2, 2, 0, "reference", "Single character denoting the reference, or the faulted phase indicator; default='A'"], [74, 2, 2, 0, "sequence", "Control argument to force return into symmetrical- or phase-domain values."]], "electricpy.fault.protectiontap": [[75, 2, 2, 0, "CTR", "The Current Transformer Ratio."], [75, 2, 2, 0, "S", "Rated apparent power magnitude (VA/VAR/W)."], [75, 2, 2, 0, "VLL", "Line-to-Line voltage in volts."], [75, 2, 2, 0, "VLN", "Line-to-Neutral voltage in volts."]], "electricpy.fault.residcomp": [[76, 2, 2, 0, "linelength", "The length (in same base unit as impedance characteristics) of the line. default=1"], [76, 2, 2, 0, "z0", "The zero-sequence impedance characteristic of the line, specified in ohms-per-unit where the total line length (of same unit) is specified in linelength argument."], [76, 2, 2, 0, "z1", "The positive-sequence impedance characteristic of the line, specified in ohms-per-unit where the total line length (of same unit) is specified in linelength argument."]], "electricpy.fault.scMVA": [[77, 2, 2, 0, "Isc", "Short-Circuit-Current, if left as None, will force function to use default setting for Vth. default=None"], [77, 2, 2, 0, "Vth", "The Thevenin-Equivalent-Voltage, defaults to a 1-per-unit value. default=1"], [77, 2, 2, 0, "Zth", "The Thevenin-Equivalent-Impedance"]], "electricpy.fault.short_circuit_mva": [[78, 2, 2, 0, "Isc", "Short-Circuit-Current, if left as None, will force function to use default setting for Vth. default=None"], [78, 2, 2, 0, "Vth", "The Thevenin-Equivalent-Voltage, defaults to a 1-per-unit value. default=1"], [78, 2, 2, 0, "Zth", "The Thevenin-Equivalent-Impedance"]], "electricpy.fault.single_phase_to_ground_fault": [[79, 2, 2, 0, "Rf", "The fault resistance, default=0"], [79, 2, 2, 0, "Vth", "The Thevenin-Equivalent-Voltage"], [79, 2, 2, 0, "Zseq", "Tupple of sequence reactances as (Z0, Z1, Z2)"], [79, 2, 2, 0, "reference", "Single character denoting the reference, default='A'"], [79, 2, 2, 0, "sequence", "Control argument to force return into symmetrical- or phase-domain values."]], "electricpy.fault.symrmsfaultcur": [[80, 2, 2, 0, "R", "The fault resistance in ohms."], [80, 2, 2, 0, "V", "Voltage magnitude at fault point, not described as line-to-line or line-to-neutral."], [80, 2, 2, 0, "X", "The fault impedance in ohms."], [80, 2, 2, 0, "freq", "The system frequency in Hz."], [80, 2, 2, 0, "t", "The time in seconds."]], "electricpy.fault.synmach_Iasym": [[81, 2, 2, 0, "Eq", "The internal machine voltage in per-unit-volts"], [81, 2, 2, 0, "Ta", "Armature short-circuit (DC) time constant in seconds"], [81, 2, 2, 0, "Xdpp", "The X\"d (d-axis subtransient) reactance in per-unit-ohms"], [81, 2, 2, 0, "Xqpp", "The X\"q (q-axis subtransient) reactance in per-unit-ohms"], [81, 2, 2, 0, "t", "Time at which to calculate the fault current"]], "electricpy.fault.synmach_Isym": [[82, 2, 2, 0, "Eq", "The internal machine voltage in per-unit-volts"], [82, 2, 2, 0, "Tdp", "The T'd (d-axis transient) time constant of the machine in seconds"], [82, 2, 2, 0, "Tdpp", "The T\"d (d-axis subtransient) time constant of the machine in seconds"], [82, 2, 2, 0, "Xd", "The Xd (d-axis) reactance in per-unit-ohms"], [82, 2, 2, 0, "Xdp", "The X\"d (d-axis transient) reactance in per-unit-ohms"], [82, 2, 2, 0, "Xdpp", "The X\"d (d-axis subtransient) reactance in per-unit-ohms"], [82, 2, 2, 0, "t", "Time at which to calculate the fault current"]], "electricpy.fault.synmach_ifault": [[83, 2, 2, 0, "Ta", "Armature short-circuit (DC) time constant in seconds"], [83, 2, 2, 0, "Tdp", "The T'd (d-axis transient) time constant of the machine in seconds"], [83, 2, 2, 0, "Tdpp", "The T\"d (d-axis sub-transient) time constant of the machine in seconds"], [83, 2, 2, 0, "Xd", "The Xd (d-axis) reactance in per-unit-ohms"], [83, 2, 2, 0, "Xdp", "The X\"d (d-axis transient) reactance in per-unit-ohms"], [83, 2, 2, 0, "Xdpp", "The X\"d (d-axis sub-transient) reactance in per-unit-ohms"], [83, 2, 2, 0, "Xqpp", "The X\"q (q-axis sub-transient) reactance in per-unit-ohms"], [83, 2, 2, 0, "alpha", "Fault inception angle (in degrees)"], [83, 2, 2, 0, "freq", "System (electrical) frequency (in degrees), default=60"], [83, 2, 2, 0, "t", "Time at which to calculate the fault current"]], "electricpy.fault.tdradial": [[84, 2, 2, 0, "CTI", "Coordinating Time Interval in cycles."], [84, 2, 2, 0, "CTR_dn", "Current Transformer Ratio for downstream relay. default=1"], [84, 2, 2, 0, "CTR_up", "Current Transformer Ratio for upstream relay. default=1"], [84, 2, 2, 0, "I", "Measured fault current in Amps, typically set using the maximum fault current available."], [84, 2, 2, 0, "Ipu_dn", "Pickup setting for downstream protection, specified in amps, default=0"], [84, 2, 2, 0, "Ipu_up", "Pickup setting for upstream protection, specified in amps"], [84, 2, 2, 0, "TDdn", "Time-Dial setting for downstream protection, specified in seconds, default=0"], [84, 2, 2, 0, "curve", "Name of specified TOC curve, may be entry from set: {U1,U2,U3,U4,U5,C1,C2,C3,C4,C5}, default=U1"], [84, 2, 2, 0, "freq", "System operating frequency, default=60"], [84, 2, 2, 0, "scale", "Scaling value used to evaluate a practical TD setting, default=2"], [84, 2, 2, 0, "tfixed", "Used to specify a fixed time delay for coordinated protection elements, primarily used for coordinating TOC elements (51) with OC elements (50) with a fixed tripping time. Overrides downstream TOC arguments including Ipu_dn and TDdn."]], "electricpy.fault.thermaltime": [[85, 2, 2, 0, "Ibase", "Base current, at which maximum time tbase is allowable."], [85, 2, 2, 0, "In", "Current at which to calculate max time."], [85, 2, 2, 0, "tbase", "Base time for which a maximum allowable current Ibase is specified. Unitless."]], "electricpy.fault.three_phase_fault": [[86, 2, 2, 0, "Rf", "The fault resistance, default=0"], [86, 2, 2, 0, "Vth", "The Thevenin-Equivalent-Voltage"], [86, 2, 2, 0, "Zseq", "Tupple of sequence reactances as (Z0, Z1, Z2)"], [86, 2, 2, 0, "reference", "Single character denoting the reference, default='A'"], [86, 2, 2, 0, "sequence", "Control argument to force return into symmetrical- or phase-domain values."]], "electricpy.fault.tocreset": [[87, 2, 2, 0, "CTR", "Current Transformer Ratio, default=1"], [87, 2, 2, 0, "I", "Measured Current in Amps"], [87, 2, 2, 0, "Ipickup", "Fault Current Pickup Setting (in Amps)"], [87, 2, 2, 0, "TD", "Time Dial Setting"], [87, 2, 2, 0, "curve", "Name of specified TOC curve, may be entry from set: {U1,U2,U3,U4,U5,C1,C2,C3,C4,C5}, default=U1"]], "electricpy.fault.toctriptime": [[88, 2, 2, 0, "CTR", "Current Transformer Ratio, default=1"], [88, 2, 2, 0, "I", "Measured Current in Amps"], [88, 2, 2, 0, "Ipickup", "Fault Current Pickup Setting (in Amps)"], [88, 2, 2, 0, "TD", "Time Dial Setting"], [88, 2, 2, 0, "curve", "Name of specified TOC curve, may be entry from set: {U1,U2,U3,U4,U5,C1,C2,C3,C4,C5}, default=U1"]], "electricpy.fault.transmismatch": [[89, 2, 2, 0, "I1", "Current (in amps) on transformer primary side."], [89, 2, 2, 0, "I2", "Current (in amps) on transformer secondary."], [89, 2, 2, 0, "tap1", "Relay TAP setting on the primary side."], [89, 2, 2, 0, "tap2", "Relay TAP setting on the secondary side."]], "electricpy.fault.trvresistor": [[90, 2, 2, 0, "C", "Capacitance Value in Farads."], [90, 2, 2, 0, "L", "Inductance in Henries."], [90, 2, 2, 0, "Rd0", "Damping Resistor Evaluation Starting Point, default=500"], [90, 2, 2, 0, "reduction", "The percentage that the TRV should be reduced by."], [90, 2, 2, 0, "tpk0", "Time of peak voltage evaluation starting point, default=10*u"], [90, 2, 2, 0, "wd0", "Omega-d evaluation starting point, default=260*k"]], "electricpy.fftplot": [[91, 2, 2, 0, "dc", "The DC offset term"], [91, 2, 2, 0, "imag", "Imaginary terms of FFT (sine terms)"], [91, 2, 2, 0, "real", "Real terms of FFT (cosine terms)"], [91, 2, 2, 0, "title", "String appended to plot title, default=\"Fourier Coefficients\""]], "electricpy.fftsumplot": [[92, 2, 2, 0, "dc", "The DC offset term"], [92, 2, 2, 0, "freq", "Fundamental (minimum nonzero) frequency in Hz, default=60"], [92, 2, 2, 0, "imag", "Imaginary terms of FFT (sine terms)"], [92, 2, 2, 0, "npts", "Number of time step points, default=1000"], [92, 2, 2, 0, "real", "Real terms of FFT (cosine terms)"], [92, 2, 2, 0, "title", "String appended to plot title, default=\"Fourier Series Summation\""], [92, 2, 2, 0, "xrange", "List of two floats containing the minimum time and the maximum time."]], "electricpy.funcfft": [[93, 2, 2, 0, "complex", "Control argument to force returned values into complex format."], [93, 2, 2, 0, "func", "Callable function from which to evaluate values."], [93, 2, 2, 0, "maxmult", "Maximum harmonic (multiple of minfreq) which to evaluate. default=15"], [93, 2, 2, 0, "minfreq", "Minimum frequency (in Hz) at which to evaluate FFT. default=60"]], "electricpy.geninternalv": [[94, 2, 2, 0, "I", "The current on the phase of interest."], [94, 2, 2, 0, "Ip", "The first mutual phase current in amps."], [94, 2, 2, 0, "Ipp", "The second mutual phase current in amps."], [94, 2, 2, 0, "Vgn", "The ground-to-neutral connection voltage."], [94, 2, 2, 0, "Vt", "The generator's terminal voltage."], [94, 2, 2, 0, "Zmp", "The mutual coupling with the first additional phase impedance in ohms."], [94, 2, 2, 0, "Zmpp", "The mutual coupling with the second additional phase impedance in ohms."], [94, 2, 2, 0, "Zs", "The internal impedance of the phase of interest in ohms."]], "electricpy.gmd": [[95, 2, 2, 0, "Ds", "Self distance (unitless), normally provided from datasheet/reference"]], "electricpy.harmonics": [[96, 2, 2, 0, "dc", "The DC offset for the harmonic system, default=0"], [96, 2, 2, 0, "domain", "Domain of time samples at which to calculate the harmonic system, must be array-like, will cause function to return numpy array instead of function object."], [96, 2, 2, 0, "freq", "The fundamental frequency of the system in Hz, default=60"], [96, 2, 2, 0, "imag", "The imaginary (sine) component coefficients for the harmonic system."], [96, 2, 2, 0, "real", "The real (cosine) component coefficients for the harmonic system."]], "electricpy.hartleydata": [[97, 2, 2, 0, "BW", "Bandwidth of the data channel."], [97, 2, 2, 0, "M", "Number of signal levels."]], "electricpy.ic_555_astable": [[98, 2, 2, 0, "C", "Capacitance between Threshold Pin and ground"], [98, 2, 2, 0, "R", "List of 2 resistor which are need in configuring IC 555."], [98, 2, 2, 0, "t_high", "ON time of IC 555"], [98, 2, 2, 0, "t_low", "OFF time of IC 555"]], "electricpy.ic_555_monostable": [[99, 2, 2, 0, "C", "Capacitance between Threshold Pin and ground"], [99, 2, 2, 0, "R", "List of 2 resistor which are need in configuring IC 555."], [99, 2, 2, 0, "t_high", "ON time of IC 555"], [99, 2, 2, 0, "t_low", "OFF time of IC 555"]], "electricpy.induction_machine_slip": [[100, 2, 2, 0, "Nr", ""], [100, 2, 2, 0, "freq", ""], [100, 2, 2, 0, "poles", ""]], "electricpy.instpower": [[101, 2, 2, 0, "P", "Magnitude of Real Power"], [101, 2, 2, 0, "Q", "Magnitude of Reactive Power"], [101, 2, 2, 0, "freq", "System frequency (in Hz), default=60"], [101, 2, 2, 0, "t", "Time at which to evaluate"]], "electricpy.ipu": [[102, 2, 2, 0, "S", "The per-unit power base."], [102, 2, 2, 0, "V1phs", "The voltage base of the single phase system."], [102, 2, 2, 0, "VLL", "The Line-to-Line Voltage; default=None"], [102, 2, 2, 0, "VLN", "The Line-to-Neutral Voltage; default=None"]], "electricpy.iscrl": [[103, 2, 2, 0, "V", "The absolute magnitude of the voltage."], [103, 2, 2, 0, "Z", "The complex value of the impedance. (R + jX)"], [103, 2, 2, 0, "alpha", "Angle specification, default=None"], [103, 2, 2, 0, "f", "The system frequency, specified in Hz, default=None"], [103, 2, 2, 0, "mxcurrent", "Control variable to enable calculating the value at maximum current, default=True"], [103, 2, 2, 0, "t", "The time at which the value should be calculated, should be specified in seconds, default=None"]], "electricpy.latex": [[105, 1, 1, 0, "clatex", "Complex Value Latex Generator."], [106, 1, 1, 0, "tflatex", "Transfer Function LaTeX String Generator."]], "electricpy.latex.clatex": [[105, 2, 2, 0, "double", "Control argument to specify whether or not LaTeX dollar signs should be double or single, default=False"], [105, 2, 2, 0, "polar", "Control argument to force result into polar coordinates instead of rectangular. default=True"], [105, 2, 2, 0, "postdollar", "Control argument to enable/disable the dollar sign after the string. default=True"], [105, 2, 2, 0, "predollar", "Control argument to enable/disable the dollar sign before the string. default=True"], [105, 2, 2, 0, "round", "Control to specify number of decimal places that should displayed. default=True"], [105, 2, 2, 0, "val", "The complex value to be printed, if value is a list or numpy array, the result will be demonstrated as a matrix."]], "electricpy.latex.tflatex": [[106, 2, 2, 0, "double", "Control argument to specify whether or not LaTeX dollar signs should be double or single, default=False"], [106, 2, 2, 0, "postdollar", "Control argument to enable/disable the dollar sign after the string. default=True"], [106, 2, 2, 0, "predollar", "Control argument to enable/disable the dollar sign before the string. default=True"], [106, 2, 2, 0, "sys", "If provided in conjunction with optional parameter sysp, the parameter sys will act as the numerator set. Otherwise, can be passed as a list containing two sublists, the first being the numerator set, and the second being the denominator set."], [106, 2, 2, 0, "sysp", "If provided, this input will act as the denominator of the transfer function."], [106, 2, 2, 0, "tolerance", "The floating point tolerance cutoff to evaluate each term against. If the absolute value of the particular term is greater than the tolerance, the value will be printed, if not, it will not be printed. default=1e-8"], [106, 2, 2, 0, "var", "The variable that should be printed for each term (i.e. 's' or 'jomega'). default='s'"]], "electricpy.led_resistor": [[107, 2, 2, 0, "Ifwd", "Forward current of LEDs in milliamps, default=20 (milliamps)"], [107, 2, 2, 0, "Vfwd", "Forward voltage of LED (or series LEDs if available), default=2"], [107, 2, 2, 0, "Vsrc", "Source voltage, as measured across both LED and resistor in circuit."]], "electricpy.lm317": [[108, 2, 2, 0, "r1", "r1 is resistance and is measured in ohm"], [108, 2, 2, 0, "r2", "r2 is resistance and is measured in ohm"], [108, 2, 2, 0, "v_out", "Output Voltage in LM317 in Volts"]], "electricpy.machslip": [[109, 2, 2, 0, "mech", "The mechanical frequency (or speed), of the rotating machine."], [109, 2, 2, 0, "syn", "The synchronous frequency (or speed), defaults as a frequency set to 60Hz, default=60"]], "electricpy.math": [[111, 1, 1, 0, "convolve", "Filter Convolution Function."], [112, 1, 1, 0, "funcrms", "Root-Mean-Square (RMS) Evaluator for Callable Functions."], [113, 1, 1, 0, "gausdist", "Gaussian Distribution Function."], [114, 1, 1, 0, "gaussian", "Gaussian Function."], [115, 1, 1, 0, "probdensity", "Probability Density Function."], [116, 1, 1, 0, "rfft", "RFFT Function."], [117, 1, 1, 0, "step", "Step Function [ u(t) ]."]], "electricpy.math.convolve": [[111, 2, 2, 0, "tuple", "Tuple of terms to be convolved."]], "electricpy.math.funcrms": [[112, 2, 2, 0, "T", "The period of the function f, so that f(0)==f(T)"], [112, 2, 2, 0, "func", "The periodic function, a callable like f(t)"]], "electricpy.math.gausdist": [[113, 2, 2, 0, "mu", "Optional control argument, default=0"], [113, 2, 2, 0, "sigma", "Optional control argument, default=1"], [113, 2, 2, 0, "x", "The input (array) x"]], "electricpy.math.gaussian": [[114, 2, 2, 0, "mu", "Optional control argument, default=0"], [114, 2, 2, 0, "sigma", "Optional control argument, default=1"], [114, 2, 2, 0, "x", "The input (array) x."]], "electricpy.math.probdensity": [[115, 2, 2, 0, "func", "The function for which to calculate the PDF"], [115, 2, 2, 0, "scale", "The scaling to be applied to the output, default=True"], [115, 2, 2, 0, "x", "The (array of) value(s) at which to calculate the PDF"], [115, 2, 2, 0, "x0", "The lower-bound of the integral, starting point for the PDF to be calculated over, default=0"]], "electricpy.math.rfft": [[116, 2, 2, 0, "absolute", "Control argument to force absolute values, default=True"], [116, 2, 2, 0, "arr", "The input array representing the signal"], [116, 2, 2, 0, "dt", "The time-step used for the array, default=0.01"], [116, 2, 2, 0, "resample", "Control argument specifying whether the FFT output should be resampled, or if it should have a specific resampling rate, default=True"]], "electricpy.math.step": [[117, 2, 2, 0, "t", "Time samples for which the step response should be generated."]], "electricpy.motorstartcap": [[118, 2, 2, 0, "I", "Magnitude of motor no-load current in amps."], [118, 2, 2, 0, "V", "Magnitude of motor terminal voltage in volts."], [118, 2, 2, 0, "freq", "Motor/System frequency, default=60."]], "electricpy.natfreq": [[119, 2, 2, 0, "C", "Capacitance Value in Farads."], [119, 2, 2, 0, "Hz", "Control argument to set return value in either Hz or rad/sec; default=True."], [119, 2, 2, 0, "L", "Inductance in Henries."]], "electricpy.nlinpf": [[120, 2, 2, 0, "PFdisp", "The \"Displacement\" power-factor, default=None"], [120, 2, 2, 0, "PFdist", "The \"Distorted\" power-factor, default=None"], [120, 2, 2, 0, "PFtrue", "The \"True\" power-factor, default=None"]], "electricpy.non_linear_pf": [[121, 2, 2, 0, "PFdisp", "The \"Displacement\" power-factor, default=None"], [121, 2, 2, 0, "PFdist", "The \"Distorted\" power-factor, default=None"], [121, 2, 2, 0, "PFtrue", "The \"True\" power-factor, default=None"]], "electricpy.parallel_plate_capacitance": [[122, 2, 2, 0, "A", "Area of the plate, unitless."], [122, 2, 2, 0, "C", "Capacitance, unitless."], [122, 2, 2, 0, "d", "Distance between the plates, unitless."], [122, 2, 2, 0, "e", "Permitivity of the dielectric, unitless. Default value is the permittivity of free space: 8.854E-12"]], "electricpy.passive": [[124, 1, 1, 0, "air_core_inductance", "Compute Inductance of Air Core Inductor."], [125, 1, 1, 0, "capbacktoback", "Back to Back Capacitor Transient Current Calculator."], [126, 1, 1, 0, "capenergy", "Capacitor Energy Formula."], [127, 1, 1, 0, "captransfer", "Capacitor Energy Transfer Function."], [128, 1, 1, 0, "farads", "Capacitance from Apparent Power Formula."], [129, 1, 1, 0, "inductive_voltdiv", "Inductive voltage divider."], [130, 1, 1, 0, "inductorcharge", "Charging Inductor Formula."], [131, 1, 1, 0, "inductordischarge", "Discharging Inductor Formula."], [132, 1, 1, 0, "inductorenergy", "Energy Stored in Inductor Formula."], [133, 1, 1, 0, "loadedvcapdischarge", "Loaded Capacitor Discharge Formula."], [134, 1, 1, 0, "rectifiercap", "Rectifier Capacitor Formula."], [135, 1, 1, 0, "timedischarge", "Capacitor Discharge Time Formula."], [136, 1, 1, 0, "vcapcharge", "Charging Capacitor Voltage."], [137, 1, 1, 0, "vcapdischarge", "Discharging Capacitor Function."]], "electricpy.passive.air_core_inductance": [[124, 2, 2, 0, "coil_l", "Coil length, measured in meters"], [124, 2, 2, 0, "d", "Coil diameter, measured in meters"], [124, 2, 2, 0, "n", "Number of inductor turns"]], "electricpy.passive.capbacktoback": [[125, 2, 2, 0, "C1", "The capacitance of the"], [125, 2, 2, 0, "VLL", "The line-to-line voltage experienced by the three-phase capacitor bank."], [125, 2, 2, 0, "VLN", "The line-to-neutral voltage experienced by any one of the (three) capacitors in the three-phase capacitor bank."]], "electricpy.passive.capenergy": [[126, 2, 2, 0, "C", "Capacitance in Farads."], [126, 2, 2, 0, "V", "Voltage across capacitor."]], "electricpy.passive.captransfer": [[127, 2, 2, 0, "Cd", "Destination capacitance value in Farads."], [127, 2, 2, 0, "Cs", "Source capacitance value in Farads."], [127, 2, 2, 0, "R", "Value of resistor that connects capacitors."], [127, 2, 2, 0, "Vs", "Initial voltage across source-capacitor (Cs)."], [127, 2, 2, 0, "t", "Time at which to calculate resistor voltage."]], "electricpy.passive.farads": [[128, 2, 2, 0, "V", "The voltage across the capacitor; not described as VLL or VLN, merely the capacitor voltage."], [128, 2, 2, 0, "VAR", "The rated power to meet."], [128, 2, 2, 0, "freq", "The System frequency"]], "electricpy.passive.inductive_voltdiv": [[129, 2, 2, 0, "L1", "Value of the inductor above the output voltage, default=None"], [129, 2, 2, 0, "L2", "Value of the inductor below the output voltage, default=None"], [129, 2, 2, 0, "Vin", "The input voltage for the system, default=None"], [129, 2, 2, 0, "Vout", "The output voltage for the system, default=None"], [129, 2, 2, 0, "find", "Control argument to specify which value should be returned."]], "electricpy.passive.inductorcharge": [[130, 2, 2, 0, "L", "Inductance value in Henries."], [130, 2, 2, 0, "R", "Resistance related to inductor."], [130, 2, 2, 0, "Vs", "Charging voltage across inductor and resistor."], [130, 2, 2, 0, "t", "Time at which to calculate voltage and current."]], "electricpy.passive.inductordischarge": [[131, 2, 2, 0, "Io", "Initial current traveling through inductor."], [131, 2, 2, 0, "L", "Inductance value in Henries."], [131, 2, 2, 0, "R", "Resistance being discharged to."], [131, 2, 2, 0, "t", "Time at which to calculate voltage and current."]], "electricpy.passive.inductorenergy": [[132, 2, 2, 0, "I", "Current traveling through inductor."], [132, 2, 2, 0, "L", "Inductance Value (in Henries)"]], "electricpy.passive.loadedvcapdischarge": [[133, 2, 2, 0, "C", "Capacitance (in Farads)"], [133, 2, 2, 0, "P", "Load power consumption (in Watts)."], [133, 2, 2, 0, "t", "Time at which to calculate voltage."], [133, 2, 2, 0, "vo", "Initial capacitor voltage."]], "electricpy.passive.rectifiercap": [[134, 2, 2, 0, "Iload", "The load current that must be met."], [134, 2, 2, 0, "dVout", "Desired delta-V on the output."], [134, 2, 2, 0, "fswitch", "The switching frequency of the system."]], "electricpy.passive.timedischarge": [[135, 2, 2, 0, "C", "Capacitance (in Farads)"], [135, 2, 2, 0, "Eremain", "if true: also returns the energy remaining in cap"], [135, 2, 2, 0, "P", "Load Power being consumed (in Watts)"], [135, 2, 2, 0, "RMS", "if true converts RMS Vin to peak"], [135, 2, 2, 0, "Vinit", "Initial Voltage (in volts)"], [135, 2, 2, 0, "Vmin", "Final Voltage (the minimum allowable voltage) (in volts)"], [135, 2, 2, 0, "dt", "Time step-size (in seconds) (defaults to 1e-3 | 1ms)"]], "electricpy.passive.vcapcharge": [[136, 2, 2, 0, "C", "Capacitive value (in Farads)."], [136, 2, 2, 0, "R", "The ohmic value of the resistor being used to discharge."], [136, 2, 2, 0, "Vs", "The charging voltage for the capacitor."], [136, 2, 2, 0, "t", "The time at which to calculate the voltage."]], "electricpy.passive.vcapdischarge": [[137, 2, 2, 0, "C", "Capacitive value (in Farads)."], [137, 2, 2, 0, "R", "The ohmic value of the resistor being used to discharge."], [137, 2, 2, 0, "Vs", "The starting voltage for the capacitor."], [137, 2, 2, 0, "t", "The time at which to calculate the voltage."]], "electricpy.pfcorrection": [[139, 2, 2, 0, "PFnew", "The desired (new) power factor, should be a decimal value."], [139, 2, 2, 0, "PFold", "The current (old) power factor, should be a decimal value."], [139, 2, 2, 0, "S", "Apparent power consumed by the load."], [139, 2, 2, 0, "V", "Voltage across the capacitor, ignores line-to-line or line-to-neutral constraints. default=None"], [139, 2, 2, 0, "VLL", "The Line-to-Line Voltage; default=None"], [139, 2, 2, 0, "VLN", "The Line-to-Neutral Voltage; default=None"], [139, 2, 2, 0, "freq", "System frequency, default=60"]], "electricpy.phaseline": [[140, 2, 2, 0, "Iline", "The Line-Current; default=None"], [140, 2, 2, 0, "Iphase", "The Phase-Current; default=None"], [140, 2, 2, 0, "VLL", "The Line-to-Line Voltage; default=None"], [140, 2, 2, 0, "VLN", "The Line-to-Neutral Voltage; default=None"], [140, 2, 2, 0, "realonly", "Replacement of complex argument. Control to return value in complex form; default=None"]], "electricpy.phs3valpha": [[142, 2, 2, 0, "VA", "A-phase voltage, (or tuple/list of voltages), unitless."], [142, 2, 2, 0, "VB", "B-phase voltage, unitless."], [142, 2, 2, 0, "VC", "C-phase voltage, unitless."]], "electricpy.pi_attenuator": [[143, 2, 2, 0, "Adb", ""], [143, 2, 2, 0, "Z0", ""]], "electricpy.powerflow": [[144, 2, 2, 0, "Vrec", "The receiving-end voltage, should be complex"], [144, 2, 2, 0, "Vsend", "The sending-end voltage, should be complex"], [144, 2, 2, 0, "Xline", "The line admitance, should be float"]], "electricpy.powerimpedance": [[145, 2, 2, 0, "PF", "The operating Power-Factor, should be specified if S is given as a float (not complex). Positive PF correlates to lagging, negative to leading. default=None"], [145, 2, 2, 0, "S", "The apparent power of the passive element, may be purely resistive or purely reactive."], [145, 2, 2, 0, "V", "The operating voltage of the passive element. Note that this is specifically not Line-Line or Line-Neutral voltage, rather the voltage of the element."], [145, 2, 2, 0, "parallel", "Control point to specify whether the ohmic impedance should be returned as series components (False opt.) or parallel components (True opt.)."], [145, 2, 2, 0, "terms", "Control point to specify whether return should be made as resistance and reactance, or simply the complex impedance. Setting of False will return complex impedance, setting of True will return individual components (R, X)."]], "electricpy.powerset": [[146, 2, 2, 0, "P", "Real Power, unitless; default=None"], [146, 2, 2, 0, "PF", "Power Factor, unitless, provided as a decimal value, lagging is positive, leading is negative; default=None"], [146, 2, 2, 0, "Q", "Reactive Power, unitless; default=None"], [146, 2, 2, 0, "S", "Apparent Power, unitless; default=None"], [146, 2, 2, 0, "find", "Control argument to specify which value should be returned."]], "electricpy.primary": [[147, 2, 2, 0, "Np", "Number of turns on primary side."], [147, 2, 2, 0, "Ns", "Number of turns on secondary side."], [147, 2, 2, 0, "invert", "Control argument to invert the turns ratio, used when reflecting current across a voltage transformer, or voltage across a current transformer."], [147, 2, 2, 0, "val", "Value to be reflected across transformer."]], "electricpy.propagation_constants": [[148, 2, 2, 0, "y", "Admitance of the transmission line g+j*2*pi*f*C"], [148, 2, 2, 0, "z", "Impedence of the transmission line: R+j*2*pi*f*L"]], "electricpy.puchgbase": [[149, 2, 2, 0, "puB_new", "New per-unit base."], [149, 2, 2, 0, "puB_old", "Old per-unit base."], [149, 2, 2, 0, "quantity", "Current per-unit value in old base."]], "electricpy.reactance": [[150, 2, 2, 0, "freq", "The Frequency Base for Provided Impedance, default=60"], [150, 2, 2, 0, "sensetivity", "The sensetivity used to check if a resistance was provided, default=1e-12"], [150, 2, 2, 0, "z", "The Impedance Provided, may be complex (R+jI)"]], "electricpy.rxrecompose": [[152, 2, 2, 0, "S3phs", "The total three-phase power rating of the system. If left as None, the per-unit values will be set to 1, resulting in an unscaled impedance"], [152, 2, 2, 0, "VLL", "The Line-to-Line Voltage; default=None"], [152, 2, 2, 0, "VLN", "The Line-to-Neutral Voltage; default=None"], [152, 2, 2, 0, "XoR", "The X/R ratio (reactance over impedance)."], [152, 2, 2, 0, "x_pu", "The per-unit, complex value corresponding to the impedance"]], "electricpy.sampfft": [[153, 2, 2, 0, "complex", "Control argument to force returned values into complex format."], [153, 2, 2, 0, "data", "Numpy data array containing 1-D values."], [153, 2, 2, 0, "dt", "Time-difference (delta-t) between data samples."], [153, 2, 2, 0, "minfreq", "Minimum frequency (in Hz) at which to evaluate FFT. default=60"]], "electricpy.secondary": [[154, 2, 2, 0, "Np", "Number of turns on primary side."], [154, 2, 2, 0, "Ns", "Number of turns on secondary side."], [154, 2, 2, 0, "invert", "Control argument to invert the turns ratio, used when reflecting current across a voltage transformer, or voltage across a current transformer."], [154, 2, 2, 0, "val", "Value to be reflected across transformer."]], "electricpy.shannondata": [[155, 2, 2, 0, "BW", "Bandwidth of the data channel."], [155, 2, 2, 0, "N", "Noise strength (in Watts)."], [155, 2, 2, 0, "S", "Signal strength (in Watts)."]], "electricpy.short_circuit_current": [[156, 2, 2, 0, "V", "The absolute magnitude of the voltage."], [156, 2, 2, 0, "Z", "The complex value of the impedance. (R + jX)"], [156, 2, 2, 0, "alpha", "Angle specification, default=None"], [156, 2, 2, 0, "f", "The system frequency, specified in Hz, default=None"], [156, 2, 2, 0, "mxcurrent", "Control variable to enable calculating the value at maximum current, default=True"], [156, 2, 2, 0, "t", "The time at which the value should be calculated, should be specified in seconds, default=None"]], "electricpy.sim": [[158, 1, 1, 0, "NewtonRaphson", "Newton Raphson Calculator."], [159, 1, 1, 0, "digifiltersim", "Digital Filter Simulator."], [160, 1, 1, 0, "mbuspowerflow", "Multi-Bus Power Flow Calculator."], [161, 1, 1, 0, "nr_pq", "Newton Raphson Real/Reactive Power Function Generator."], [162, 1, 1, 0, "parabolic_response", "Parabolic Function Response Plotter Function."], [163, 1, 1, 0, "ramp_response", "Ramp Function Response Plotter Function."], [164, 1, 1, 0, "statespace", "State-Space Simulation Plotter."], [165, 1, 1, 0, "step_response", "Step Function Response Plotter Function."]], "electricpy.sim.NewtonRaphson": [[158, 2, 2, 0, "F", "The Non-Linear System; a function handle/instance. The input function must accept only one (1) argument as an array or int/float representing the variables required."], [158, 2, 2, 0, "J", "The Jacobian of F; a function handle/instance. The input Jacobian of F must accept only one (1) argument as an array or int/float representing the variables required."], [158, 2, 2, 0, "X0", "The Initial Value (or initial guess); a representative array."], [158, 2, 2, 0, "eps", "Epsilon - The error value, default=0.0001"], [158, 2, 2, 0, "lsq_eps", "Least Squares Method (Failover) Epsilon - the error value. default=0.25"], [158, 2, 2, 0, "mxiter", "Maximum Iterations - The highest number of iterations allowed, default=100"]], "electricpy.sim.digifiltersim": [[159, 2, 2, 0, "NN", "The number of time-steps to be plotted; default=1000"], [159, 2, 2, 0, "dt", "The time-step size; default=0.01"], [159, 2, 2, 0, "figsize", "The figure dimensions for each subplot, default=None"], [159, 2, 2, 0, "filter", "The filter parameter set as shown here:"], [159, 2, 2, 0, "fin", "The input function, must be callable with specified step-size."], [159, 2, 2, 0, "freqs", "The set of frequencies to plot the input and output for."], [159, 2, 2, 0, "legend", "An argument to control whether the legend is shown, default=True."], [159, 2, 2, 0, "title", "The title presented on each plot; default=\"\""], [159, 2, 2, 0, "xlim", "Limit in x-axis for graph plot. Accepts tuple of: (xmin, xmax). default=False."], [159, 2, 2, 0, "xmxscale", "Scaling limit of the x-axis, will set the maximum of the x-axis to xmxscale/(dt*freq) where freq is the current frequency being plotted."]], "electricpy.sim.mbuspowerflow": [[160, 2, 2, 0, "Pknown", "List of known and unknown real powers. Known powers should be provided as a floating point value, unknown powers should be provided as None. Generated power should be noted as positive, consumed power should be noted as negative."], [160, 2, 2, 0, "Qknown", "List of known and unknown reactive powers. Known powers should be provided as a floating point value, unknown powers should be provided as None. Generated power should be noted as positive, consumed power should be noted as negative."], [160, 2, 2, 0, "Vknown", "List of known and unknown voltages. Known voltages should be provided as a list of floating values in the form of: [mag, ang], unknown voltages should be provided as None."], [160, 2, 2, 0, "X0", "Initial conditions/Initial guess. May be set to 'flatstart' to force function to generate flat voltages and angles of 1\u22200\u00b0. Must be specified in the form: [\u03981, \u03982,..., \u0398n, V1, V2,..., Vm] where n is the number of busses with unknown voltage angle, and m is the number of busses with unknown voltage magnitude."], [160, 2, 2, 0, "Ybus", "Postitive Sequence Y-Bus Matrix for Network."], [160, 2, 2, 0, "degrees", "Control argument to force returned angles to degrees. default=True"], [160, 2, 2, 0, "eps", "Epsilon - The error value, default=0.0001"], [160, 2, 2, 0, "lsq_eps", "Least Squares Method (Failover) Epsilon - the error value. default=0.25"], [160, 2, 2, 0, "mxiter", "Maximum Iterations - The highest number of iterations allowed, default=100"], [160, 2, 2, 0, "returnct", "Control argument to force function to return the iteration counter from the Newton-Raphson solution. default=False"], [160, 2, 2, 0, "slackbus", "Control argument to specify the bus index for the slack bus. If the slack bus is not positioned at bus index 1 (default), this control can be used to reformat the data sets to a format necessary for proper generation and Newton Raphson computation. Must be zero-based. default=0"], [160, 2, 2, 0, "split", "Control argument to force returned array to split into lists of magnitudes and angles. default=False"]], "electricpy.sim.nr_pq": [[161, 2, 2, 0, "P_set", "List of known and unknown real powers. Known powers should be provided as a floating point value, unknown powers should be provided as None. Generated power should be noted as positive, consumed power should be noted as negative."], [161, 2, 2, 0, "Q_set", "List of known and unknown reactive powers. Known powers should be provided as a floating point value, unknown powers should be provided as None. Generated power should be noted as positive, consumed power should be noted as negative."], [161, 2, 2, 0, "V_set", "List of known and unknown voltages. Known voltages should be provided as a list of floating values in the form of: [mag, ang], unknown voltages should be provided as None."], [161, 2, 2, 0, "Ybus", "Postitive Sequence Y-Bus Matrix for Network."], [161, 2, 2, 0, "argshape", "Control argument to force return of the voltage argument array as a tuple of: (\u0398-len, V-len). default=False"], [161, 2, 2, 0, "extend", "Control argument to format returned value as singular function handle or lists of function handles. default=True; singular function"], [161, 2, 2, 0, "verbose", "Control argument to print verbose information about function generation, useful for debugging. default=False"]], "electricpy.sim.parabolic_response": [[162, 2, 2, 0, "combine", "If combination of numerator and denominator is needed. This value should be set to \"True\" if the parts should be combined to show the complete system with feedback. default=True."], [162, 2, 2, 0, "dt", "Difference between each data point, default is 0.01."], [162, 2, 2, 0, "filename", "Control argument to specify whether the plotted figures should be saved. default=False"], [162, 2, 2, 0, "npts", "Number of steps to calculate over; default is 1000."], [162, 2, 2, 0, "system", "The Transfer Function; can be provided as the following: * 1 (instance of lti) * 2 (num, den) * 3 (zeros, poles, gain) * 4 (A, B, C, D)"], [162, 2, 2, 0, "title", "Additional string to be added to plot titles; default=\"\""], [162, 2, 2, 0, "xlim", "Limit in x-axis for graph plot. Accepts tuple of: (xmin, xmax). default=False."]], "electricpy.sim.ramp_response": [[163, 2, 2, 0, "combine", "If combination of numerator and denominator is needed. This value should be set to \"True\" if the parts should be combined to show the complete system with feedback. default=True."], [163, 2, 2, 0, "dt", "Difference between each data point, default is 0.01."], [163, 2, 2, 0, "filename", "File directory/name with which the plotted figures should be saved. default=None"], [163, 2, 2, 0, "npts", "Number of steps to calculate over; default is 1000."], [163, 2, 2, 0, "system", "The Transfer Function; can be provided as the following: * 1 (instance of lti) * 2 (num, den) * 3 (zeros, poles, gain) * 4 (A, B, C, D)"], [163, 2, 2, 0, "title", "Additional string to be added to plot titles; default=\"\""], [163, 2, 2, 0, "xlim", "Limit in x-axis for graph plot. Accepts tuple of: (xmin, xmax). default=False."]], "electricpy.sim.statespace": [[164, 2, 2, 0, "A", "Matrix A of State-Space Formulation"], [164, 2, 2, 0, "B", "Matrix B of State-Space Formulation"], [164, 2, 2, 0, "NN", "Number of descrete points; default=10,000"], [164, 2, 2, 0, "dt", "Time-step-size; default=0.01"], [164, 2, 2, 0, "plotforcing", "Control value to enable plotting of the forcing function(s)"], [164, 2, 2, 0, "plotresult", "Control value to enable plotting of the final (combined) result."], [164, 2, 2, 0, "ret", "Control value to specify whether the state space terms should be returned."], [164, 2, 2, 0, "simpts", "Changes the range of simulation; defualt=9999"], [164, 2, 2, 0, "title", "Additional String for Plot Title"], [164, 2, 2, 0, "x", "Initial Condition Matrix, if not provided, will assume initial conditions of zero."], [164, 2, 2, 0, "xlim", "Limit in x-axis for graph plot."], [164, 2, 2, 0, "ylim", "Limit in y-axis for graph plot."]], "electricpy.sim.step_response": [[165, 2, 2, 0, "combine", "If combination of numerator and denominator is needed. This value should be set to \"True\" if the parts should be combined to show the complete system with feedback. default=True."], [165, 2, 2, 0, "dt", "Difference between each data point, default is 0.01."], [165, 2, 2, 0, "filename", "Control argument to specify whether the plotted figures should be saved. default=False"], [165, 2, 2, 0, "npts", "Number of steps to calculate over; default is 1000."], [165, 2, 2, 0, "system", "The Transfer Function; can be provided as the following: * 1 (instance of lti) * 2 (num, den) * 3 (zeros, poles, gain) * 4 (A, B, C, D)"], [165, 2, 2, 0, "title", "Additional string to be added to plot titles; default=\"\""], [165, 2, 2, 0, "xlim", "Limit in x-axis for graph plot. Accepts tuple of: (xmin, xmax). default=False."]], "electricpy.sinfilt": [[166, 2, 2, 0, "Srate", "Sampling rate for dataset, specified in number of values per fundamental cycle."], [166, 2, 2, 0, "arr", "The input data array."], [166, 2, 2, 0, "domain", "Control argument to force return of x-axis array for the filtered data."]], "electricpy.slew_rate": [[167, 2, 2, 0, "SR", "Slew Rate, Volts/sec; default=None"], [167, 2, 2, 0, "V", "Voltage, Volts; default=None"], [167, 2, 2, 0, "find", "Control argument to specify which value should be returned."], [167, 2, 2, 0, "freq", "Frequency, Hz; default=None"]], "electricpy.solenoid_inductance": [[168, 2, 2, 0, "A", "Cross sectional area, unitless."], [168, 2, 2, 0, "L", "Inductance, unitless."], [168, 2, 2, 0, "N", "Number of turns, unitless."], [168, 2, 2, 0, "l", "Length, unitless."], [168, 2, 2, 0, "u", "Core permeability, unitless. Default value is the permeability of free space: 4\u03c0E-7"]], "electricpy.suspension_insulators": [[169, 2, 2, 0, "Voltage", "Voltage difference between the transmission line and ground"], [169, 2, 2, 0, "capacitance_ratio", "Ratio of disk capacitance and pin to pole air capacitance"], [169, 2, 2, 0, "number_capacitors", "Number of disk capacitors hung to transmission line"]], "electricpy.syncspeed": [[170, 2, 2, 0, "Hz", "Boolean control to enable return in Hertz. default=False"], [170, 2, 2, 0, "Npol", "Number of electrical poles in machine's construction."], [170, 2, 2, 0, "freq", "Frequency of electrical system in Hertz, default=60"], [170, 2, 2, 0, "rpm", "Boolean control to enable return in rpm. default=False"]], "electricpy.t_attenuator": [[171, 2, 2, 0, "Adb", ""], [171, 2, 2, 0, "Z0", ""]], "electricpy.tap_changing_transformer": [[172, 2, 2, 0, "Pload", "Transmission line load active power in Watt"], [172, 2, 2, 0, "Qload", "Transmission line load reactive power in VAR"], [172, 2, 2, 0, "R", "Resistance of transmission line"], [172, 2, 2, 0, "Vdis", "Distribution network voltage"], [172, 2, 2, 0, "Vgen", "Generating station voltage"], [172, 2, 2, 0, "X", "Reactance of transmission line"]], "electricpy.tcycle": [[173, 2, 2, 0, "freq", "System frequency in Hz, default=60"], [173, 2, 2, 0, "ncycles", "Number (n) of cycles to evaluate, default=1"]], "electricpy.transposez": [[174, 2, 2, 0, "Zeq", "Per-Length (or total length) line impedance in ohms."], [174, 2, 2, 0, "fabc", "Percentage of line set with phase relation ABC, default=1/3"], [174, 2, 2, 0, "fbca", "Percentage of line set with phase relation BCA, default=1/3"], [174, 2, 2, 0, "fcab", "Percentage of line set with phase relation CAB, default=1/3"], [174, 2, 2, 0, "linelen", ""]], "electricpy.unbalance": [[175, 2, 2, 0, "A", "Phase-A value"], [175, 2, 2, 0, "B", "Phase-B value"], [175, 2, 2, 0, "C", "Phase-C value"], [175, 2, 2, 0, "all", "Control argument to require function to return all voltage/current unbalances."]], "electricpy.vipf": [[176, 2, 2, 0, "I", "System current (in amps), default=None"], [176, 2, 2, 0, "PF", "System power factor, (+)ive values denote leading power factor, (-)ive values denote lagging power factor; default=1"], [176, 2, 2, 0, "V", "System voltage (in volts), default=None"], [176, 2, 2, 0, "find", "Control argument to specify which value should be returned."]], "electricpy.visu": [[178, 3, 1, 0, "InductionMotorCircle", "Plot Induction Motor Circle Diagram."], [179, 3, 1, 0, "PowerCircle", "Plot Power Circle Diagram of Transmission System."], [180, 3, 1, 0, "SeriesRLC", "Frequency Response for an RLC (Resistive, Inductive, Capacitive) Load."], [181, 1, 1, 0, "convbar", "Convolution Bar-Graph Plotter Function."], [182, 1, 1, 0, "phasorplot", "Phasor Plotting Function."], [183, 1, 1, 0, "powertriangle", "Power Triangle Plotting Function."], [184, 1, 1, 0, "receiving_end_power_circle", "Construct Receiving End Power Circle."], [185, 1, 1, 0, "sending_end_power_circle", "Construct Receiving End Power Circle."]], "electricpy.visu.InductionMotorCircle": [[178, 4, 1, 0, "__init__", "Primary Entrypoint."]], "electricpy.visu.InductionMotorCircle.__init__": [[178, 2, 2, 0, "blocked_rotor_data", "Vsc: blocked rotor terminal voltage Isc: blocked rotor current in rotor Wsc: Power consumed in blocked rotor test"], [178, 2, 2, 0, "frequency", "AC supply frequency"], [178, 2, 2, 0, "no_load_data", "V0: no load test voltage I0: no load current in rotor W0: No load power(in Watts)"], [178, 2, 2, 0, "output_power", "Desired power output from the induction motor"], [178, 2, 2, 0, "poles", "Pole count of induction Motor"], [178, 2, 2, 0, "torque_ration", "Ration between rotor resistance to stator resistance (i.e., R2/R1)"]], "electricpy.visu.PowerCircle": [[179, 4, 1, 0, "__init__", "Initialize the class."]], "electricpy.visu.PowerCircle.__init__": [[179, 2, 2, 0, "A", "Transmission System ABCD Parameters, A, default = None"], [179, 2, 2, 0, "B", "Transmission System ABCD Parameters, B, default = None"], [179, 2, 2, 0, "C", "Transmission System ABCD Parameters, C, default = None"], [179, 2, 2, 0, "D", "Transmission System ABCD Parameters, D, default = None"], [179, 2, 2, 0, "Pr", "Receiving End Real Power, default = None"], [179, 2, 2, 0, "Ps", "Sending End Real Power, default = None"], [179, 2, 2, 0, "Qr", "Receiving End Reactive Power, default = None"], [179, 2, 2, 0, "Qs", "Sending End Reactive Power, default = None"], [179, 2, 2, 0, "Sr", "Receiving End Total Complex Power, default = None"], [179, 2, 2, 0, "Ss", "Sending End Total Complex Power, default = None"], [179, 2, 2, 0, "Vr", "Transmission Line Receiving End Voltage (phasor complex value)"], [179, 2, 2, 0, "Vs", "Transmission Line Sending End Voltage (phasor complex value)"], [179, 2, 2, 0, "power_circle_type", "Type of power circle diagram to plot."], [179, 2, 2, 0, "power_factor", "Power Factor of the transmission system, default = None"]], "electricpy.visu.SeriesRLC": [[180, 4, 1, 0, "__init__", "Form the Frequency Response Analysis System."]], "electricpy.visu.SeriesRLC.__init__": [[180, 2, 2, 0, "capacitance", "Capacitance (in Hz) of the circuit."], [180, 2, 2, 0, "frequency", "Frequency (in Hz) at which the output gain should be evaluated."], [180, 2, 2, 0, "inductance", "Inductance (in Henry) of the circuit."], [180, 2, 2, 0, "resistance", "Resistance (in Ohm) of the circuit."]], "electricpy.visu.convbar": [[181, 2, 2, 0, "h", "Impulse Response - Given as Array (Prefferably Numpy Array)"], [181, 2, 2, 0, "x", "Input Function - Given as Array (Prefferably Numpy Array)"]], "electricpy.visu.phasorplot": [[182, 2, 2, 0, "bg", "Background-Color control, default=\"#d5de9c\""], [182, 2, 2, 0, "colors", "List of hexidecimal color strings denoting the line colors to use."], [182, 2, 2, 0, "legend", "Control argument to enable displaying the legend, must be passed as an array or list of strings. label and labels are mimic- arguments and will perform similar operation, default=False"], [182, 2, 2, 0, "linewidth", "Control argument to declare the line thickness. default=None"], [182, 2, 2, 0, "phasors", "The set of phasors to be plotted."], [182, 2, 2, 0, "radius", "The diagram radius, unless specified, automatically scales"], [182, 2, 2, 0, "size", "Control argument for figure size. default=None"], [182, 2, 2, 0, "title", "The Plot Title, default=\"Phasor Diagram\""], [182, 2, 2, 0, "tolerance", "Minimum magnitude to plot, anything less than tolerance will be plotted as a single point at the origin, by default, the tolerance is scaled to be 1/25-th the maximum radius. To disable the tolerance, simply provide either False or -1."]], "electricpy.visu.powertriangle": [[183, 2, 2, 0, "P", "Real Power, unitless, default=None"], [183, 2, 2, 0, "PF", "Power Factor, unitless, provided as a decimal value, lagging is positive, leading is negative; default=None"], [183, 2, 2, 0, "Q", "Reactive Power, unitless, default=None"], [183, 2, 2, 0, "S", "Apparent Power, unitless, default=None"], [183, 2, 2, 0, "color", "The color of the power triangle lines, default=\"red\""], [183, 2, 2, 0, "printval", "Control argument to allow the numeric values to be printed on the plot, default=\"False\""], [183, 2, 2, 0, "text", "The title of the power triangle plot, default=\"Power Triangle\""]], "electricpy.visu.receiving_end_power_circle": [[184, 2, 2, 0, "A", "Transmission System ABCD Parameters, A, default = None."], [184, 2, 2, 0, "B", "Transmission System ABCD Parameters, B, default = None."], [184, 2, 2, 0, "Pr", "Receiving End Real Power, default = None"], [184, 2, 2, 0, "Qr", "Receiving End Reactive Power, default = None"], [184, 2, 2, 0, "Sr", "Receiving End Apparent Power, default = None"], [184, 2, 2, 0, "Vr", "Receiving End Voltage, default = None."], [184, 2, 2, 0, "Vs", "Sending End Voltage, default = None"], [184, 2, 2, 0, "power_factor", "System End Power Factor, default = None"]], "electricpy.visu.sending_end_power_circle": [[185, 2, 2, 0, "B", "Transmission System ABCD Parameters, A"], [185, 2, 2, 0, "D", "Transmission System ABCD Parameters, B"], [185, 2, 2, 0, "Ps", "Sending End Real Power, default = None"], [185, 2, 2, 0, "Qs", "Sending End Reactive Power, default = None"], [185, 2, 2, 0, "Ss", "Sending End Apparent Power, default = None"], [185, 2, 2, 0, "Vr", "Receiving End Voltage, default = None"], [185, 2, 2, 0, "Vs", "Sending End Voltage"], [185, 2, 2, 0, "power_factor", "System Power Factor, default = None"]], "electricpy.voltdiv": [[186, 2, 2, 0, "R1", "The top resistor of the divider (real or complex)"], [186, 2, 2, 0, "R2", "The bottom resistor of the divider, the one which the output voltage is measured across, may be either real or complex"], [186, 2, 2, 0, "Rload", "The Load Resistor (or impedance), default=None"], [186, 2, 2, 0, "Vin", "The Input Voltage, may be real or complex"]], "electricpy.vscdcbus": [[187, 2, 2, 0, "P", "The desired real-power output"], [187, 2, 2, 0, "Q", "The desired reactive-power output, default=0"], [187, 2, 2, 0, "VLL", "Line-to-Line voltage on the line-side of the source impedance."], [187, 2, 2, 0, "Zs", "The source impedance of the VSC"], [187, 2, 2, 0, "debug", "Control value to enable printing stages of the calculation, default=False"], [187, 2, 2, 0, "mmax", "The maximum of the m value for the converter default=0.8"]], "electricpy.vscgains": [[188, 2, 2, 0, "Ls", "The equiv-inductance (in Henrys) of the VSC"], [188, 2, 2, 0, "Rs", "The equiv-resistance (in ohms) of the VSC"], [188, 2, 2, 0, "freq", "The system frequency (in Hz), default=60"], [188, 2, 2, 0, "tau", "The desired time-constant, default=0.005"]], "electricpy.wireresistance": [[189, 2, 2, 0, "R", "Wire resistance, unitless."], [189, 2, 2, 0, "diameter", "Wire diameter, unitless."], [189, 2, 2, 0, "length", "Wire length, unitless"], [189, 2, 2, 0, "rho", "Material resistivity, unitless Default value is copper resistivity: 16.8*10-9"]], "electricpy.wrms": [[190, 2, 2, 0, "NN", "The total number of points, default=100"], [190, 2, 2, 0, "dw", "The delta-omega to be used, default=0.1"], [190, 2, 2, 0, "func", "The callable function to use for evaluation"], [190, 2, 2, 0, "plot", "Control to enable plotting, default=True"], [190, 2, 2, 0, "quad", "Control value to enable use of integrals default=False"], [190, 2, 2, 0, "round", "Control to round the Wrms on plot, default=3"], [190, 2, 2, 0, "title", "Title displayed with plot, default=\"Power Density Spectrum\""]], "electricpy.zdecompose": [[191, 2, 2, 0, "XoR", "The X/R ratio (reactance over impedance)."], [191, 2, 2, 0, "Zmag", "The magnitude of the impedance."]], "electricpy.zener_diode_power": [[192, 2, 2, 0, "R", "Load Resistance in Ohm"], [192, 2, 2, 0, "Vin", "Maximum input Voltage in Volt"], [192, 2, 2, 0, "Vo", "Output Voltage in Volt"]], "electricpy.zener_diode_required_resistor": [[193, 2, 2, 0, "I", "Load Current in Ampere"], [193, 2, 2, 0, "Vin", "Minimum input Voltage in Volt"], [193, 2, 2, 0, "Vo", "Output Voltage in Volt"]], "electricpy.zperlength": [[194, 2, 2, 0, "Dab", "Distance between phases A and B, in feet."], [194, 2, 2, 0, "Dagw", "Distance between phase A and ground conductor, in feet."], [194, 2, 2, 0, "Dbc", "Distance between phases B and C, in feet."], [194, 2, 2, 0, "Dbgw", "Distance between phase B and ground conductor, in feet."], [194, 2, 2, 0, "Dca", "Distance between phases C and A, in feet."], [194, 2, 2, 0, "Dcgw", "Distance between phase C and ground conductor, in feet."], [194, 2, 2, 0, "De", "De term, in feet, if None provided, and rho parameter is specified, will interpretively be calculated."], [194, 2, 2, 0, "Ds", "Distance (self) for each phase conductor in feet, commonly known as GMD."], [194, 2, 2, 0, "Dsgw", "Distance (self) for the ground wire conductor in feet, commonly known as GMD."], [194, 2, 2, 0, "Rac", "AC resistance in ohms."], [194, 2, 2, 0, "Rd", "Resistance Rd term in ohms, will be generated automatically if set to None, default=None"], [194, 2, 2, 0, "Rgwac", "Ground-Wire AC resistance in ohms."], [194, 2, 2, 0, "Rself", "Self Resistance term in ohms."], [194, 2, 2, 0, "dia_gw", "Ground-Wire diameter in feet, may be used to calculate an approximate Dsgw if no Dsgw is provided."], [194, 2, 2, 0, "freq", "System frequency in Hertz."], [194, 2, 2, 0, "resolve", "Control argument to specify whether the resultant ground-wire inclusive per-length impedance matrix should be reduced to a 3x3 equivalent matrix. default=True"], [194, 2, 2, 0, "rho", "Earth resistivity in ohm-meters. default=\"AVG\""]], "electricpy.zpu": [[195, 2, 2, 0, "S", "The per-unit power base."], [195, 2, 2, 0, "VLL", "The Line-to-Line Voltage; default=None"], [195, 2, 2, 0, "VLN", "The Line-to-Neutral Voltage; default=None"]], "electricpy.zrecompose": [[196, 2, 2, 0, "S3phs", "The total three-phase power rating of the system."], [196, 2, 2, 0, "VLL", "The Line-to-Line Voltage; default=None"], [196, 2, 2, 0, "VLN", "The Line-to-Neutral Voltage; default=None"], [196, 2, 2, 0, "z_pu", "The per-unit, complex value corresponding to the impedance"]], "electricpy.zsource": [[197, 2, 2, 0, "S", "The (rated) apparent power magnitude of the source. This may also be refferred to as the \"Short-Circuit MVA\""], [197, 2, 2, 0, "Sbase", "The per-unit base for the apparent power. If set to None, will automatically force Sbase to equal S. If set to True will treat S as the per-unit value."], [197, 2, 2, 0, "V", "The (rated) voltage of the source terminals, not specifically identified as either Line-to-Line or Line-to- Neutral."], [197, 2, 2, 0, "Vbase", "The per-unit base for the terminal voltage. If set to None, will automaticlaly force Vbase to equal V. If set to True, will treat V as the per-unit value."], [197, 2, 2, 0, "XoR", "The X/R ratio rated for the source, may optionally be a list of floats to accomidate sequence impedances or otherwise."], [197, 2, 2, 0, "perunit", "Control value to enable the return of output in per- unit base. default=True"]]}, "objtypes": {"0": "py:module", "1": "py:function", "2": "py:parameter", "3": "py:class", "4": "py:method"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "function", "Python function"], "2": ["py", "parameter", "Python parameter"], "3": ["py", "class", "Python class"], "4": ["py", "method", "Python method"]}, "titleterms": {"addit": 0, "resourc": 0, "gener": [0, 201], "data": 0, "scienc": 0, "electr": 0, "engin": 0, "focu": 0, "electricpi": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 200, 201], "acpiv": 2, "bode": [3, 4, 5, 6], "sbode": 5, "zbode": 6, "bridge_imped": 7, "characterz": 8, "convers": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39], "abc_to_seq": 10, "see": [10, 26, 32, 33, 34, 41, 141, 158, 160, 161], "also": [10, 26, 32, 33, 34, 41, 141, 158, 160, 161], "btu": 11, "btu_to_kwh": 12, "db_to_voltag": 13, "db_to_vref": 14, "dbmw_to_dbw": 15, "dbmw_to_watt": 16, "dbw_to_dbmw": 17, "dbw_to_watt": 18, "hertz": 19, "horsepow": 20, "hp_to_watt": 21, "hz_to_rad": 22, "hz_to_rpm": 23, "kwh": 24, "kwh_to_btu": 25, "phs_to_seq": 26, "rad_to_hz": 27, "rad_to_rpm": 28, "radsec": 29, "rpm_to_hz": 30, "rpm_to_rad": 31, "seq_to_abc": 32, "seq_to_ph": 33, "sequencez": 34, "voltage_to_db": 35, "watt": 36, "watts_to_dbmw": 37, "watts_to_dbw": 38, "watts_to_hp": 39, "cosfilt": 40, "cprint": 41, "curdiv": 42, "de_calc": 43, "dynetz": 44, "fault": [45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90], "busvolt": 46, "correctedcurr": 47, "ct_cclass": 48, "ct_satratburden": 49, "ct_satur": 50, "ct_timetosat": 51, "ct_vpeak": 52, "distmeasz": 53, "double_phase_to_ground_fault": 54, "faultratio": 55, "genlossfield": 56, "highzmini": 57, "highzvpickup": 58, "indmacheigenvalu": 59, "indmachphs3sc": 60, "indmachphs3torq": 61, "instoc": 62, "iopirt": 63, "phase_to_phase_fault": 64, "phs1g": 65, "phs1mvasc": 66, "phs2": 67, "phs2g": 68, "phs3": 69, "phs3mvasc": 70, "pickup": 71, "pktransrecvolt": 72, "poleopen1": 73, "poleopen2": 74, "protectiontap": 75, "residcomp": 76, "scmva": 77, "short_circuit_mva": 78, "single_phase_to_ground_fault": 79, "symrmsfaultcur": 80, "synmach_iasym": 81, "synmach_isym": 82, "synmach_ifault": 83, "tdradial": 84, "thermaltim": 85, "three_phase_fault": 86, "tocreset": 87, "toctriptim": 88, "transmismatch": 89, "trvresistor": 90, "fftplot": 91, "fftsumplot": 92, "funcfft": 93, "geninternalv": 94, "gmd": 95, "harmon": 96, "hartleydata": 97, "ic_555_ast": 98, "ic_555_monost": 99, "induction_machine_slip": 100, "instpow": 101, "ipu": 102, "iscrl": 103, "note": [103, 120, 121, 125, 150, 156], "latex": [104, 105, 106], "clatex": 105, "tflatex": 106, "led_resistor": 107, "lm317": 108, "machslip": 109, "math": [110, 111, 112, 113, 114, 115, 116, 117], "convolv": 111, "funcrm": 112, "gausdist": 113, "gaussian": 114, "probdens": 115, "rfft": 116, "step": 117, "motorstartcap": 118, "natfreq": 119, "nlinpf": 120, "non_linear_pf": 121, "parallel_plate_capacit": 122, "passiv": [123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137], "air_core_induct": 124, "capbacktoback": 125, "capenergi": 126, "captransf": 127, "farad": 128, "inductive_voltdiv": 129, "inductorcharg": 130, "inductordischarg": 131, "inductorenergi": 132, "loadedvcapdischarg": 133, "rectifiercap": 134, "timedischarg": 135, "vcapcharg": 136, "vcapdischarg": 137, "peak": 138, "pfcorrect": 139, "phaselin": 140, "phasor": 141, "phs3valpha": 142, "pi_attenu": 143, "powerflow": 144, "powerimped": 145, "powerset": 146, "primari": 147, "propagation_const": 148, "puchgbas": 149, "reactanc": 150, "rm": 151, "rxrecompos": 152, "sampfft": 153, "secondari": 154, "shannondata": 155, "short_circuit_curr": 156, "sim": [157, 158, 159, 160, 161, 162, 163, 164, 165], "newtonraphson": 158, "digifiltersim": 159, "mbuspowerflow": 160, "nr_pq": 161, "parabolic_respons": 162, "ramp_respons": 163, "statespac": 164, "step_respons": 165, "sinfilt": 166, "slew_rat": 167, "solenoid_induct": 168, "suspension_insul": 169, "syncspe": 170, "t_attenu": 171, "tap_changing_transform": 172, "tcycl": 173, "transposez": 174, "unbal": 175, "vipf": 176, "visu": [177, 178, 179, 180, 181, 182, 183, 184, 185], "inductionmotorcircl": 178, "powercircl": 179, "seriesrlc": 180, "convbar": 181, "phasorplot": 182, "powertriangl": 183, "receiving_end_power_circl": 184, "sending_end_power_circl": 185, "voltdiv": 186, "vscdcbu": 187, "vscgain": 188, "wireresist": 189, "wrm": 190, "zdecompos": 191, "zener_diode_pow": 192, "zener_diode_required_resistor": 193, "zperlength": 194, "zpu": 195, "zrecompos": 196, "zsourc": 197, "recent": 198, "chang": 198, "constant": 199, "api": 200, "content": 201, "featur": 201, "sampl": 201, "instal": 201, "get": 201, "start": 201, "from": 201, "sourc": 201, "depend": 201, "option": 201, "involv": 201, "contribut": 201, "special": 201, "thank": 201, "contact": 201, "licens": 201, "usag": 201}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx": 60}, "alltitles": {"Additional Resources": [[0, "additional-resources"]], "Generic and Data Science": [[0, "generic-and-data-science"]], "Electrical Engineering Focus": [[0, "electrical-engineering-focus"]], "electricpy": [[1, "electricpy"]], "electricpy.acpiv": [[2, "electricpy-acpiv"]], "electricpy.bode": [[3, "electricpy-bode"]], "electricpy.bode.bode": [[4, "electricpy-bode-bode"]], "electricpy.bode.sbode": [[5, "electricpy-bode-sbode"]], "electricpy.bode.zbode": [[6, "electricpy-bode-zbode"]], "electricpy.bridge_impedance": [[7, "electricpy-bridge-impedance"]], "electricpy.characterz": [[8, "electricpy-characterz"]], "electricpy.conversions": [[9, "electricpy-conversions"]], "electricpy.conversions.abc_to_seq": [[10, "electricpy-conversions-abc-to-seq"]], "See also": [[10, null], [26, null], [32, null], [33, null], [34, null], [41, null], [141, null], [158, null], [160, null], [161, null]], "electricpy.conversions.btu": [[11, "electricpy-conversions-btu"]], "electricpy.conversions.btu_to_kwh": [[12, "electricpy-conversions-btu-to-kwh"]], "electricpy.conversions.db_to_voltage": [[13, "electricpy-conversions-db-to-voltage"]], "electricpy.conversions.db_to_vref": [[14, "electricpy-conversions-db-to-vref"]], "electricpy.conversions.dbmw_to_dbw": [[15, "electricpy-conversions-dbmw-to-dbw"]], "electricpy.conversions.dbmw_to_watts": [[16, "electricpy-conversions-dbmw-to-watts"]], "electricpy.conversions.dbw_to_dbmw": [[17, "electricpy-conversions-dbw-to-dbmw"]], "electricpy.conversions.dbw_to_watts": [[18, "electricpy-conversions-dbw-to-watts"]], "electricpy.conversions.hertz": [[19, "electricpy-conversions-hertz"]], "electricpy.conversions.horsepower": [[20, "electricpy-conversions-horsepower"]], "electricpy.conversions.hp_to_watts": [[21, "electricpy-conversions-hp-to-watts"]], "electricpy.conversions.hz_to_rad": [[22, "electricpy-conversions-hz-to-rad"]], "electricpy.conversions.hz_to_rpm": [[23, "electricpy-conversions-hz-to-rpm"]], "electricpy.conversions.kwh": [[24, "electricpy-conversions-kwh"]], "electricpy.conversions.kwh_to_btu": [[25, "electricpy-conversions-kwh-to-btu"]], "electricpy.conversions.phs_to_seq": [[26, "electricpy-conversions-phs-to-seq"]], "electricpy.conversions.rad_to_hz": [[27, "electricpy-conversions-rad-to-hz"]], "electricpy.conversions.rad_to_rpm": [[28, "electricpy-conversions-rad-to-rpm"]], "electricpy.conversions.radsec": [[29, "electricpy-conversions-radsec"]], "electricpy.conversions.rpm_to_hz": [[30, "electricpy-conversions-rpm-to-hz"]], "electricpy.conversions.rpm_to_rad": [[31, "electricpy-conversions-rpm-to-rad"]], "electricpy.conversions.seq_to_abc": [[32, "electricpy-conversions-seq-to-abc"]], "electricpy.conversions.seq_to_phs": [[33, "electricpy-conversions-seq-to-phs"]], "electricpy.conversions.sequencez": [[34, "electricpy-conversions-sequencez"]], "electricpy.conversions.voltage_to_db": [[35, "electricpy-conversions-voltage-to-db"]], "electricpy.conversions.watts": [[36, "electricpy-conversions-watts"]], "electricpy.conversions.watts_to_dbmw": [[37, "electricpy-conversions-watts-to-dbmw"]], "electricpy.conversions.watts_to_dbw": [[38, "electricpy-conversions-watts-to-dbw"]], "electricpy.conversions.watts_to_hp": [[39, "electricpy-conversions-watts-to-hp"]], "electricpy.cosfilt": [[40, "electricpy-cosfilt"]], "electricpy.cprint": [[41, "electricpy-cprint"]], "electricpy.curdiv": [[42, "electricpy-curdiv"]], "electricpy.de_calc": [[43, "electricpy-de-calc"]], "electricpy.dynetz": [[44, "electricpy-dynetz"]], "electricpy.fault": [[45, "electricpy-fault"]], "electricpy.fault.busvolt": [[46, "electricpy-fault-busvolt"]], "electricpy.fault.correctedcurrents": [[47, "electricpy-fault-correctedcurrents"]], "electricpy.fault.ct_cclass": [[48, "electricpy-fault-ct-cclass"]], "electricpy.fault.ct_satratburden": [[49, "electricpy-fault-ct-satratburden"]], "electricpy.fault.ct_saturation": [[50, "electricpy-fault-ct-saturation"]], "electricpy.fault.ct_timetosat": [[51, "electricpy-fault-ct-timetosat"]], "electricpy.fault.ct_vpeak": [[52, "electricpy-fault-ct-vpeak"]], "electricpy.fault.distmeasz": [[53, "electricpy-fault-distmeasz"]], "electricpy.fault.double_phase_to_ground_fault": [[54, "electricpy-fault-double-phase-to-ground-fault"]], "electricpy.fault.faultratio": [[55, "electricpy-fault-faultratio"]], "electricpy.fault.genlossfield": [[56, "electricpy-fault-genlossfield"]], "electricpy.fault.highzmini": [[57, "electricpy-fault-highzmini"]], "electricpy.fault.highzvpickup": [[58, "electricpy-fault-highzvpickup"]], "electricpy.fault.indmacheigenvalues": [[59, "electricpy-fault-indmacheigenvalues"]], "electricpy.fault.indmachphs3sc": [[60, "electricpy-fault-indmachphs3sc"]], "electricpy.fault.indmachphs3torq": [[61, "electricpy-fault-indmachphs3torq"]], "electricpy.fault.instoc": [[62, "electricpy-fault-instoc"]], "electricpy.fault.iopirt": [[63, "electricpy-fault-iopirt"]], "electricpy.fault.phase_to_phase_fault": [[64, "electricpy-fault-phase-to-phase-fault"]], "electricpy.fault.phs1g": [[65, "electricpy-fault-phs1g"]], "electricpy.fault.phs1mvasc": [[66, "electricpy-fault-phs1mvasc"]], "electricpy.fault.phs2": [[67, "electricpy-fault-phs2"]], "electricpy.fault.phs2g": [[68, "electricpy-fault-phs2g"]], "electricpy.fault.phs3": [[69, "electricpy-fault-phs3"]], "electricpy.fault.phs3mvasc": [[70, "electricpy-fault-phs3mvasc"]], "electricpy.fault.pickup": [[71, "electricpy-fault-pickup"]], "electricpy.fault.pktransrecvolt": [[72, "electricpy-fault-pktransrecvolt"]], "electricpy.fault.poleopen1": [[73, "electricpy-fault-poleopen1"]], "electricpy.fault.poleopen2": [[74, "electricpy-fault-poleopen2"]], "electricpy.fault.protectiontap": [[75, "electricpy-fault-protectiontap"]], "electricpy.fault.residcomp": [[76, "electricpy-fault-residcomp"]], "electricpy.fault.scMVA": [[77, "electricpy-fault-scmva"]], "electricpy.fault.short_circuit_mva": [[78, "electricpy-fault-short-circuit-mva"]], "electricpy.fault.single_phase_to_ground_fault": [[79, "electricpy-fault-single-phase-to-ground-fault"]], "electricpy.fault.symrmsfaultcur": [[80, "electricpy-fault-symrmsfaultcur"]], "electricpy.fault.synmach_Iasym": [[81, "electricpy-fault-synmach-iasym"]], "electricpy.fault.synmach_Isym": [[82, "electricpy-fault-synmach-isym"]], "electricpy.fault.synmach_ifault": [[83, "electricpy-fault-synmach-ifault"]], "electricpy.fault.tdradial": [[84, "electricpy-fault-tdradial"]], "electricpy.fault.thermaltime": [[85, "electricpy-fault-thermaltime"]], "electricpy.fault.three_phase_fault": [[86, "electricpy-fault-three-phase-fault"]], "electricpy.fault.tocreset": [[87, "electricpy-fault-tocreset"]], "electricpy.fault.toctriptime": [[88, "electricpy-fault-toctriptime"]], "electricpy.fault.transmismatch": [[89, "electricpy-fault-transmismatch"]], "electricpy.fault.trvresistor": [[90, "electricpy-fault-trvresistor"]], "electricpy.fftplot": [[91, "electricpy-fftplot"]], "electricpy.fftsumplot": [[92, "electricpy-fftsumplot"]], "electricpy.funcfft": [[93, "electricpy-funcfft"]], "electricpy.geninternalv": [[94, "electricpy-geninternalv"]], "electricpy.gmd": [[95, "electricpy-gmd"]], "electricpy.harmonics": [[96, "electricpy-harmonics"]], "electricpy.hartleydata": [[97, "electricpy-hartleydata"]], "electricpy.ic_555_astable": [[98, "electricpy-ic-555-astable"]], "electricpy.ic_555_monostable": [[99, "electricpy-ic-555-monostable"]], "electricpy.induction_machine_slip": [[100, "electricpy-induction-machine-slip"]], "electricpy.instpower": [[101, "electricpy-instpower"]], "electricpy.ipu": [[102, "electricpy-ipu"]], "electricpy.iscrl": [[103, "electricpy-iscrl"]], "Note": [[103, null], [120, null], [121, null], [125, null], [150, null], [156, null]], "electricpy.latex": [[104, "electricpy-latex"]], "electricpy.latex.clatex": [[105, "electricpy-latex-clatex"]], "electricpy.latex.tflatex": [[106, "electricpy-latex-tflatex"]], "electricpy.led_resistor": [[107, "electricpy-led-resistor"]], "electricpy.lm317": [[108, "electricpy-lm317"]], "electricpy.machslip": [[109, "electricpy-machslip"]], "electricpy.math": [[110, "electricpy-math"]], "electricpy.math.convolve": [[111, "electricpy-math-convolve"]], "electricpy.math.funcrms": [[112, "electricpy-math-funcrms"]], "electricpy.math.gausdist": [[113, "electricpy-math-gausdist"]], "electricpy.math.gaussian": [[114, "electricpy-math-gaussian"]], "electricpy.math.probdensity": [[115, "electricpy-math-probdensity"]], "electricpy.math.rfft": [[116, "electricpy-math-rfft"]], "electricpy.math.step": [[117, "electricpy-math-step"]], "electricpy.motorstartcap": [[118, "electricpy-motorstartcap"]], "electricpy.natfreq": [[119, "electricpy-natfreq"]], "electricpy.nlinpf": [[120, "electricpy-nlinpf"]], "electricpy.non_linear_pf": [[121, "electricpy-non-linear-pf"]], "electricpy.parallel_plate_capacitance": [[122, "electricpy-parallel-plate-capacitance"]], "electricpy.passive": [[123, "electricpy-passive"]], "electricpy.passive.air_core_inductance": [[124, "electricpy-passive-air-core-inductance"]], "electricpy.passive.capbacktoback": [[125, "electricpy-passive-capbacktoback"]], "electricpy.passive.capenergy": [[126, "electricpy-passive-capenergy"]], "electricpy.passive.captransfer": [[127, "electricpy-passive-captransfer"]], "electricpy.passive.farads": [[128, "electricpy-passive-farads"]], "electricpy.passive.inductive_voltdiv": [[129, "electricpy-passive-inductive-voltdiv"]], "electricpy.passive.inductorcharge": [[130, "electricpy-passive-inductorcharge"]], "electricpy.passive.inductordischarge": [[131, "electricpy-passive-inductordischarge"]], "electricpy.passive.inductorenergy": [[132, "electricpy-passive-inductorenergy"]], "electricpy.passive.loadedvcapdischarge": [[133, "electricpy-passive-loadedvcapdischarge"]], "electricpy.passive.rectifiercap": [[134, "electricpy-passive-rectifiercap"]], "electricpy.passive.timedischarge": [[135, "electricpy-passive-timedischarge"]], "electricpy.passive.vcapcharge": [[136, "electricpy-passive-vcapcharge"]], "electricpy.passive.vcapdischarge": [[137, "electricpy-passive-vcapdischarge"]], "electricpy.peak": [[138, "electricpy-peak"]], "electricpy.pfcorrection": [[139, "electricpy-pfcorrection"]], "electricpy.phaseline": [[140, "electricpy-phaseline"]], "electricpy.phasor": [[141, "electricpy-phasor"]], "electricpy.phs3valpha": [[142, "electricpy-phs3valpha"]], "electricpy.pi_attenuator": [[143, "electricpy-pi-attenuator"]], "electricpy.powerflow": [[144, "electricpy-powerflow"]], "electricpy.powerimpedance": [[145, "electricpy-powerimpedance"]], "electricpy.powerset": [[146, "electricpy-powerset"]], "electricpy.primary": [[147, "electricpy-primary"]], "electricpy.propagation_constants": [[148, "electricpy-propagation-constants"]], "electricpy.puchgbase": [[149, "electricpy-puchgbase"]], "electricpy.reactance": [[150, "electricpy-reactance"]], "electricpy.rms": [[151, "electricpy-rms"]], "electricpy.rxrecompose": [[152, "electricpy-rxrecompose"]], "electricpy.sampfft": [[153, "electricpy-sampfft"]], "electricpy.secondary": [[154, "electricpy-secondary"]], "electricpy.shannondata": [[155, "electricpy-shannondata"]], "electricpy.short_circuit_current": [[156, "electricpy-short-circuit-current"]], "electricpy.sim": [[157, "electricpy-sim"]], "electricpy.sim.NewtonRaphson": [[158, "electricpy-sim-newtonraphson"]], "electricpy.sim.digifiltersim": [[159, "electricpy-sim-digifiltersim"]], "electricpy.sim.mbuspowerflow": [[160, "electricpy-sim-mbuspowerflow"]], "electricpy.sim.nr_pq": [[161, "electricpy-sim-nr-pq"]], "electricpy.sim.parabolic_response": [[162, "electricpy-sim-parabolic-response"]], "electricpy.sim.ramp_response": [[163, "electricpy-sim-ramp-response"]], "electricpy.sim.statespace": [[164, "electricpy-sim-statespace"]], "electricpy.sim.step_response": [[165, "electricpy-sim-step-response"]], "electricpy.sinfilt": [[166, "electricpy-sinfilt"]], "electricpy.slew_rate": [[167, "electricpy-slew-rate"]], "electricpy.solenoid_inductance": [[168, "electricpy-solenoid-inductance"]], "electricpy.suspension_insulators": [[169, "electricpy-suspension-insulators"]], "electricpy.syncspeed": [[170, "electricpy-syncspeed"]], "electricpy.t_attenuator": [[171, "electricpy-t-attenuator"]], "electricpy.tap_changing_transformer": [[172, "electricpy-tap-changing-transformer"]], "electricpy.tcycle": [[173, "electricpy-tcycle"]], "electricpy.transposez": [[174, "electricpy-transposez"]], "electricpy.unbalance": [[175, "electricpy-unbalance"]], "electricpy.vipf": [[176, "electricpy-vipf"]], "electricpy.visu": [[177, "electricpy-visu"]], "electricpy.visu.InductionMotorCircle": [[178, "electricpy-visu-inductionmotorcircle"]], "electricpy.visu.PowerCircle": [[179, "electricpy-visu-powercircle"]], "electricpy.visu.SeriesRLC": [[180, "electricpy-visu-seriesrlc"]], "electricpy.visu.convbar": [[181, "electricpy-visu-convbar"]], "electricpy.visu.phasorplot": [[182, "electricpy-visu-phasorplot"]], "electricpy.visu.powertriangle": [[183, "electricpy-visu-powertriangle"]], "electricpy.visu.receiving_end_power_circle": [[184, "electricpy-visu-receiving-end-power-circle"]], "electricpy.visu.sending_end_power_circle": [[185, "electricpy-visu-sending-end-power-circle"]], "electricpy.voltdiv": [[186, "electricpy-voltdiv"]], "electricpy.vscdcbus": [[187, "electricpy-vscdcbus"]], "electricpy.vscgains": [[188, "electricpy-vscgains"]], "electricpy.wireresistance": [[189, "electricpy-wireresistance"]], "electricpy.wrms": [[190, "electricpy-wrms"]], "electricpy.zdecompose": [[191, "electricpy-zdecompose"]], "electricpy.zener_diode_power": [[192, "electricpy-zener-diode-power"]], "electricpy.zener_diode_required_resistor": [[193, "electricpy-zener-diode-required-resistor"]], "electricpy.zperlength": [[194, "electricpy-zperlength"]], "electricpy.zpu": [[195, "electricpy-zpu"]], "electricpy.zrecompose": [[196, "electricpy-zrecompose"]], "electricpy.zsource": [[197, "electricpy-zsource"]], "Recent Changes": [[198, "recent-changes"]], "Constants": [[199, "constants"]], "ElectricPy API": [[200, "electricpy-api"]], "ElectricPy": [[201, "electricpy"], [201, "electricpy"]], "Contents:": [[201, "contents"]], "Features": [[201, "features"]], "Samples Generated with ElectricPy": [[201, "samples-generated-with-electricpy"]], "Installing / Getting Started": [[201, "installing-getting-started"]], "Installing from Source": [[201, "installing-from-source"]], "Dependencies": [[201, "dependencies"]], "Optional Dependencies": [[201, "optional-dependencies"]], "Get Involved / Contribute": [[201, "get-involved-contribute"]], "Special thanks to\u2026": [[201, "special-thanks-to"]], "Contact": [[201, "contact"]], "License and Usage": [[201, "license-and-usage"]]}, "indexentries": {"electricpy": [[1, "module-electricpy"]], "module": [[1, "module-electricpy"], [3, "module-electricpy.bode"], [9, "module-electricpy.conversions"], [45, "module-electricpy.fault"], [104, "module-electricpy.latex"], [110, "module-electricpy.math"], [123, "module-electricpy.passive"], [141, "module-electricpy.phasor"], [157, "module-electricpy.sim"], [177, "module-electricpy.visu"]], "acpiv() (in module electricpy)": [[2, "electricpy.acpiv"]], "electricpy.bode": [[3, "module-electricpy.bode"]], "bode() (in module electricpy.bode)": [[4, "electricpy.bode.bode"]], "sbode() (in module electricpy.bode)": [[5, "electricpy.bode.sbode"]], "zbode() (in module electricpy.bode)": [[6, "electricpy.bode.zbode"]], "bridge_impedance() (in module electricpy)": [[7, "electricpy.bridge_impedance"]], "characterz() (in module electricpy)": [[8, "electricpy.characterz"]], "electricpy.conversions": [[9, "module-electricpy.conversions"]], "abc_to_seq() (in module electricpy.conversions)": [[10, "electricpy.conversions.abc_to_seq"]], "btu() (in module electricpy.conversions)": [[11, "electricpy.conversions.btu"]], "btu_to_kwh() (in module electricpy.conversions)": [[12, "electricpy.conversions.btu_to_kwh"]], "db_to_voltage() (in module electricpy.conversions)": [[13, "electricpy.conversions.db_to_voltage"]], "db_to_vref() (in module electricpy.conversions)": [[14, "electricpy.conversions.db_to_vref"]], "dbmw_to_dbw() (in module electricpy.conversions)": [[15, "electricpy.conversions.dbmw_to_dbw"]], "dbmw_to_watts() (in module electricpy.conversions)": [[16, "electricpy.conversions.dbmw_to_watts"]], "dbw_to_dbmw() (in module electricpy.conversions)": [[17, "electricpy.conversions.dbw_to_dbmw"]], "dbw_to_watts() (in module electricpy.conversions)": [[18, "electricpy.conversions.dbw_to_watts"]], "hertz() (in module electricpy.conversions)": [[19, "electricpy.conversions.hertz"]], "horsepower() (in module electricpy.conversions)": [[20, "electricpy.conversions.horsepower"]], "hp_to_watts() (in module electricpy.conversions)": [[21, "electricpy.conversions.hp_to_watts"]], "hz_to_rad() (in module electricpy.conversions)": [[22, "electricpy.conversions.hz_to_rad"]], "hz_to_rpm() (in module electricpy.conversions)": [[23, "electricpy.conversions.hz_to_rpm"]], "kwh() (in module electricpy.conversions)": [[24, "electricpy.conversions.kwh"]], "kwh_to_btu() (in module electricpy.conversions)": [[25, "electricpy.conversions.kwh_to_btu"]], "phs_to_seq() (in module electricpy.conversions)": [[26, "electricpy.conversions.phs_to_seq"]], "rad_to_hz() (in module electricpy.conversions)": [[27, "electricpy.conversions.rad_to_hz"]], "rad_to_rpm() (in module electricpy.conversions)": [[28, "electricpy.conversions.rad_to_rpm"]], "radsec() (in module electricpy.conversions)": [[29, "electricpy.conversions.radsec"]], "rpm_to_hz() (in module electricpy.conversions)": [[30, "electricpy.conversions.rpm_to_hz"]], "rpm_to_rad() (in module electricpy.conversions)": [[31, "electricpy.conversions.rpm_to_rad"]], "seq_to_abc() (in module electricpy.conversions)": [[32, "electricpy.conversions.seq_to_abc"]], "seq_to_phs() (in module electricpy.conversions)": [[33, "electricpy.conversions.seq_to_phs"]], "sequencez() (in module electricpy.conversions)": [[34, "electricpy.conversions.sequencez"]], "voltage_to_db() (in module electricpy.conversions)": [[35, "electricpy.conversions.voltage_to_db"]], "watts() (in module electricpy.conversions)": [[36, "electricpy.conversions.watts"]], "watts_to_dbmw() (in module electricpy.conversions)": [[37, "electricpy.conversions.watts_to_dbmw"]], "watts_to_dbw() (in module electricpy.conversions)": [[38, "electricpy.conversions.watts_to_dbw"]], "watts_to_hp() (in module electricpy.conversions)": [[39, "electricpy.conversions.watts_to_hp"]], "cosfilt() (in module electricpy)": [[40, "electricpy.cosfilt"]], "cprint() (in module electricpy)": [[41, "electricpy.cprint"]], "curdiv() (in module electricpy)": [[42, "electricpy.curdiv"]], "de_calc() (in module electricpy)": [[43, "electricpy.de_calc"]], "dynetz() (in module electricpy)": [[44, "electricpy.dynetz"]], "electricpy.fault": [[45, "module-electricpy.fault"]], "busvolt() (in module electricpy.fault)": [[46, "electricpy.fault.busvolt"]], "correctedcurrents() (in module electricpy.fault)": [[47, "electricpy.fault.correctedcurrents"]], "ct_cclass() (in module electricpy.fault)": [[48, "electricpy.fault.ct_cclass"]], "ct_satratburden() (in module electricpy.fault)": [[49, "electricpy.fault.ct_satratburden"]], "ct_saturation() (in module electricpy.fault)": [[50, "electricpy.fault.ct_saturation"]], "ct_timetosat() (in module electricpy.fault)": [[51, "electricpy.fault.ct_timetosat"]], "ct_vpeak() (in module electricpy.fault)": [[52, "electricpy.fault.ct_vpeak"]], "distmeasz() (in module electricpy.fault)": [[53, "electricpy.fault.distmeasz"]], "double_phase_to_ground_fault() (in module electricpy.fault)": [[54, "electricpy.fault.double_phase_to_ground_fault"]], "faultratio() (in module electricpy.fault)": [[55, "electricpy.fault.faultratio"]], "genlossfield() (in module electricpy.fault)": [[56, "electricpy.fault.genlossfield"]], "highzmini() (in module electricpy.fault)": [[57, "electricpy.fault.highzmini"]], "highzvpickup() (in module electricpy.fault)": [[58, "electricpy.fault.highzvpickup"]], "indmacheigenvalues() (in module electricpy.fault)": [[59, "electricpy.fault.indmacheigenvalues"]], "indmachphs3sc() (in module electricpy.fault)": [[60, "electricpy.fault.indmachphs3sc"]], "indmachphs3torq() (in module electricpy.fault)": [[61, "electricpy.fault.indmachphs3torq"]], "instoc() (in module electricpy.fault)": [[62, "electricpy.fault.instoc"]], "iopirt() (in module electricpy.fault)": [[63, "electricpy.fault.iopirt"]], "phase_to_phase_fault() (in module electricpy.fault)": [[64, "electricpy.fault.phase_to_phase_fault"]], "phs1g() (in module electricpy.fault)": [[65, "electricpy.fault.phs1g"]], "phs1mvasc() (in module electricpy.fault)": [[66, "electricpy.fault.phs1mvasc"]], "phs2() (in module electricpy.fault)": [[67, "electricpy.fault.phs2"]], "phs2g() (in module electricpy.fault)": [[68, "electricpy.fault.phs2g"]], "phs3() (in module electricpy.fault)": [[69, "electricpy.fault.phs3"]], "phs3mvasc() (in module electricpy.fault)": [[70, "electricpy.fault.phs3mvasc"]], "pickup() (in module electricpy.fault)": [[71, "electricpy.fault.pickup"]], "pktransrecvolt() (in module electricpy.fault)": [[72, "electricpy.fault.pktransrecvolt"]], "poleopen1() (in module electricpy.fault)": [[73, "electricpy.fault.poleopen1"]], "poleopen2() (in module electricpy.fault)": [[74, "electricpy.fault.poleopen2"]], "protectiontap() (in module electricpy.fault)": [[75, "electricpy.fault.protectiontap"]], "residcomp() (in module electricpy.fault)": [[76, "electricpy.fault.residcomp"]], "scmva() (in module electricpy.fault)": [[77, "electricpy.fault.scMVA"]], "short_circuit_mva() (in module electricpy.fault)": [[78, "electricpy.fault.short_circuit_mva"]], "single_phase_to_ground_fault() (in module electricpy.fault)": [[79, "electricpy.fault.single_phase_to_ground_fault"]], "symrmsfaultcur() (in module electricpy.fault)": [[80, "electricpy.fault.symrmsfaultcur"]], "synmach_iasym() (in module electricpy.fault)": [[81, "electricpy.fault.synmach_Iasym"]], "synmach_isym() (in module electricpy.fault)": [[82, "electricpy.fault.synmach_Isym"]], "synmach_ifault() (in module electricpy.fault)": [[83, "electricpy.fault.synmach_ifault"]], "tdradial() (in module electricpy.fault)": [[84, "electricpy.fault.tdradial"]], "thermaltime() (in module electricpy.fault)": [[85, "electricpy.fault.thermaltime"]], "three_phase_fault() (in module electricpy.fault)": [[86, "electricpy.fault.three_phase_fault"]], "tocreset() (in module electricpy.fault)": [[87, "electricpy.fault.tocreset"]], "toctriptime() (in module electricpy.fault)": [[88, "electricpy.fault.toctriptime"]], "transmismatch() (in module electricpy.fault)": [[89, "electricpy.fault.transmismatch"]], "trvresistor() (in module electricpy.fault)": [[90, "electricpy.fault.trvresistor"]], "fftplot() (in module electricpy)": [[91, "electricpy.fftplot"]], "fftsumplot() (in module electricpy)": [[92, "electricpy.fftsumplot"]], "funcfft() (in module electricpy)": [[93, "electricpy.funcfft"]], "geninternalv() (in module electricpy)": [[94, "electricpy.geninternalv"]], "gmd() (in module electricpy)": [[95, "electricpy.gmd"]], "harmonics() (in module electricpy)": [[96, "electricpy.harmonics"]], "hartleydata() (in module electricpy)": [[97, "electricpy.hartleydata"]], "ic_555_astable() (in module electricpy)": [[98, "electricpy.ic_555_astable"]], "ic_555_monostable() (in module electricpy)": [[99, "electricpy.ic_555_monostable"]], "induction_machine_slip() (in module electricpy)": [[100, "electricpy.induction_machine_slip"]], "instpower() (in module electricpy)": [[101, "electricpy.instpower"]], "ipu() (in module electricpy)": [[102, "electricpy.ipu"]], "iscrl() (in module electricpy)": [[103, "electricpy.iscrl"]], "electricpy.latex": [[104, "module-electricpy.latex"]], "clatex() (in module electricpy.latex)": [[105, "electricpy.latex.clatex"]], "tflatex() (in module electricpy.latex)": [[106, "electricpy.latex.tflatex"]], "led_resistor() (in module electricpy)": [[107, "electricpy.led_resistor"]], "lm317() (in module electricpy)": [[108, "electricpy.lm317"]], "machslip() (in module electricpy)": [[109, "electricpy.machslip"]], "electricpy.math": [[110, "module-electricpy.math"]], "convolve() (in module electricpy.math)": [[111, "electricpy.math.convolve"]], "funcrms() (in module electricpy.math)": [[112, "electricpy.math.funcrms"]], "gausdist() (in module electricpy.math)": [[113, "electricpy.math.gausdist"]], "gaussian() (in module electricpy.math)": [[114, "electricpy.math.gaussian"]], "probdensity() (in module electricpy.math)": [[115, "electricpy.math.probdensity"]], "rfft() (in module electricpy.math)": [[116, "electricpy.math.rfft"]], "step() (in module electricpy.math)": [[117, "electricpy.math.step"]], "motorstartcap() (in module electricpy)": [[118, "electricpy.motorstartcap"]], "natfreq() (in module electricpy)": [[119, "electricpy.natfreq"]], "nlinpf() (in module electricpy)": [[120, "electricpy.nlinpf"]], "non_linear_pf() (in module electricpy)": [[121, "electricpy.non_linear_pf"]], "parallel_plate_capacitance() (in module electricpy)": [[122, "electricpy.parallel_plate_capacitance"]], "electricpy.passive": [[123, "module-electricpy.passive"]], "air_core_inductance() (in module electricpy.passive)": [[124, "electricpy.passive.air_core_inductance"]], "capbacktoback() (in module electricpy.passive)": [[125, "electricpy.passive.capbacktoback"]], "capenergy() (in module electricpy.passive)": [[126, "electricpy.passive.capenergy"]], "captransfer() (in module electricpy.passive)": [[127, "electricpy.passive.captransfer"]], "farads() (in module electricpy.passive)": [[128, "electricpy.passive.farads"]], "inductive_voltdiv() (in module electricpy.passive)": [[129, "electricpy.passive.inductive_voltdiv"]], "inductorcharge() (in module electricpy.passive)": [[130, "electricpy.passive.inductorcharge"]], "inductordischarge() (in module electricpy.passive)": [[131, "electricpy.passive.inductordischarge"]], "inductorenergy() (in module electricpy.passive)": [[132, "electricpy.passive.inductorenergy"]], "loadedvcapdischarge() (in module electricpy.passive)": [[133, "electricpy.passive.loadedvcapdischarge"]], "rectifiercap() (in module electricpy.passive)": [[134, "electricpy.passive.rectifiercap"]], "timedischarge() (in module electricpy.passive)": [[135, "electricpy.passive.timedischarge"]], "vcapcharge() (in module electricpy.passive)": [[136, "electricpy.passive.vcapcharge"]], "vcapdischarge() (in module electricpy.passive)": [[137, "electricpy.passive.vcapdischarge"]], "peak() (in module electricpy)": [[138, "electricpy.peak"]], "pfcorrection() (in module electricpy)": [[139, "electricpy.pfcorrection"]], "phaseline() (in module electricpy)": [[140, "electricpy.phaseline"]], "electricpy.phasor": [[141, "module-electricpy.phasor"]], "phs3valpha() (in module electricpy)": [[142, "electricpy.phs3valpha"]], "pi_attenuator() (in module electricpy)": [[143, "electricpy.pi_attenuator"]], "powerflow() (in module electricpy)": [[144, "electricpy.powerflow"]], "powerimpedance() (in module electricpy)": [[145, "electricpy.powerimpedance"]], "powerset() (in module electricpy)": [[146, "electricpy.powerset"]], "primary() (in module electricpy)": [[147, "electricpy.primary"]], "propagation_constants() (in module electricpy)": [[148, "electricpy.propagation_constants"]], "puchgbase() (in module electricpy)": [[149, "electricpy.puchgbase"]], "reactance() (in module electricpy)": [[150, "electricpy.reactance"]], "rms() (in module electricpy)": [[151, "electricpy.rms"]], "rxrecompose() (in module electricpy)": [[152, "electricpy.rxrecompose"]], "sampfft() (in module electricpy)": [[153, "electricpy.sampfft"]], "secondary() (in module electricpy)": [[154, "electricpy.secondary"]], "shannondata() (in module electricpy)": [[155, "electricpy.shannondata"]], "short_circuit_current() (in module electricpy)": [[156, "electricpy.short_circuit_current"]], "electricpy.sim": [[157, "module-electricpy.sim"]], "newtonraphson() (in module electricpy.sim)": [[158, "electricpy.sim.NewtonRaphson"]], "digifiltersim() (in module electricpy.sim)": [[159, "electricpy.sim.digifiltersim"]], "mbuspowerflow() (in module electricpy.sim)": [[160, "electricpy.sim.mbuspowerflow"]], "nr_pq() (in module electricpy.sim)": [[161, "electricpy.sim.nr_pq"]], "parabolic_response() (in module electricpy.sim)": [[162, "electricpy.sim.parabolic_response"]], "ramp_response() (in module electricpy.sim)": [[163, "electricpy.sim.ramp_response"]], "statespace() (in module electricpy.sim)": [[164, "electricpy.sim.statespace"]], "step_response() (in module electricpy.sim)": [[165, "electricpy.sim.step_response"]], "sinfilt() (in module electricpy)": [[166, "electricpy.sinfilt"]], "slew_rate() (in module electricpy)": [[167, "electricpy.slew_rate"]], "solenoid_inductance() (in module electricpy)": [[168, "electricpy.solenoid_inductance"]], "suspension_insulators() (in module electricpy)": [[169, "electricpy.suspension_insulators"]], "syncspeed() (in module electricpy)": [[170, "electricpy.syncspeed"]], "t_attenuator() (in module electricpy)": [[171, "electricpy.t_attenuator"]], "tap_changing_transformer() (in module electricpy)": [[172, "electricpy.tap_changing_transformer"]], "tcycle() (in module electricpy)": [[173, "electricpy.tcycle"]], "transposez() (in module electricpy)": [[174, "electricpy.transposez"]], "unbalance() (in module electricpy)": [[175, "electricpy.unbalance"]], "vipf() (in module electricpy)": [[176, "electricpy.vipf"]], "electricpy.visu": [[177, "module-electricpy.visu"]], "inductionmotorcircle (class in electricpy.visu)": [[178, "electricpy.visu.InductionMotorCircle"]], "__init__() (electricpy.visu.inductionmotorcircle method)": [[178, "electricpy.visu.InductionMotorCircle.__init__"]], "powercircle (class in electricpy.visu)": [[179, "electricpy.visu.PowerCircle"]], "__init__() (electricpy.visu.powercircle method)": [[179, "electricpy.visu.PowerCircle.__init__"]], "seriesrlc (class in electricpy.visu)": [[180, "electricpy.visu.SeriesRLC"]], "__init__() (electricpy.visu.seriesrlc method)": [[180, "electricpy.visu.SeriesRLC.__init__"]], "convbar() (in module electricpy.visu)": [[181, "electricpy.visu.convbar"]], "phasorplot() (in module electricpy.visu)": [[182, "electricpy.visu.phasorplot"]], "powertriangle() (in module electricpy.visu)": [[183, "electricpy.visu.powertriangle"]], "receiving_end_power_circle() (in module electricpy.visu)": [[184, "electricpy.visu.receiving_end_power_circle"]], "sending_end_power_circle() (in module electricpy.visu)": [[185, "electricpy.visu.sending_end_power_circle"]], "voltdiv() (in module electricpy)": [[186, "electricpy.voltdiv"]], "vscdcbus() (in module electricpy)": [[187, "electricpy.vscdcbus"]], "vscgains() (in module electricpy)": [[188, "electricpy.vscgains"]], "wireresistance() (in module electricpy)": [[189, "electricpy.wireresistance"]], "wrms() (in module electricpy)": [[190, "electricpy.wrms"]], "zdecompose() (in module electricpy)": [[191, "electricpy.zdecompose"]], "zener_diode_power() (in module electricpy)": [[192, "electricpy.zener_diode_power"]], "zener_diode_required_resistor() (in module electricpy)": [[193, "electricpy.zener_diode_required_resistor"]], "zperlength() (in module electricpy)": [[194, "electricpy.zperlength"]], "zpu() (in module electricpy)": [[195, "electricpy.zpu"]], "zrecompose() (in module electricpy)": [[196, "electricpy.zrecompose"]], "zsource() (in module electricpy)": [[197, "electricpy.zsource"]]}, "docurls": ["additionalresources.html", "api/electricpy.html", "api/electricpy.acpiv.html", "api/electricpy.bode.html", "api/electricpy.bode.bode.html", "api/electricpy.bode.sbode.html", "api/electricpy.bode.zbode.html", "api/electricpy.bridge_impedance.html", "api/electricpy.characterz.html", "api/electricpy.conversions.html", "api/electricpy.conversions.abc_to_seq.html", "api/electricpy.conversions.btu.html", "api/electricpy.conversions.btu_to_kwh.html", "api/electricpy.conversions.db_to_voltage.html", "api/electricpy.conversions.db_to_vref.html", "api/electricpy.conversions.dbmw_to_dbw.html", "api/electricpy.conversions.dbmw_to_watts.html", "api/electricpy.conversions.dbw_to_dbmw.html", "api/electricpy.conversions.dbw_to_watts.html", "api/electricpy.conversions.hertz.html", "api/electricpy.conversions.horsepower.html", "api/electricpy.conversions.hp_to_watts.html", "api/electricpy.conversions.hz_to_rad.html", "api/electricpy.conversions.hz_to_rpm.html", "api/electricpy.conversions.kwh.html", "api/electricpy.conversions.kwh_to_btu.html", "api/electricpy.conversions.phs_to_seq.html", "api/electricpy.conversions.rad_to_hz.html", "api/electricpy.conversions.rad_to_rpm.html", "api/electricpy.conversions.radsec.html", "api/electricpy.conversions.rpm_to_hz.html", "api/electricpy.conversions.rpm_to_rad.html", "api/electricpy.conversions.seq_to_abc.html", "api/electricpy.conversions.seq_to_phs.html", "api/electricpy.conversions.sequencez.html", "api/electricpy.conversions.voltage_to_db.html", "api/electricpy.conversions.watts.html", "api/electricpy.conversions.watts_to_dbmw.html", "api/electricpy.conversions.watts_to_dbw.html", "api/electricpy.conversions.watts_to_hp.html", "api/electricpy.cosfilt.html", "api/electricpy.cprint.html", "api/electricpy.curdiv.html", "api/electricpy.de_calc.html", "api/electricpy.dynetz.html", "api/electricpy.fault.html", "api/electricpy.fault.busvolt.html", "api/electricpy.fault.correctedcurrents.html", "api/electricpy.fault.ct_cclass.html", "api/electricpy.fault.ct_satratburden.html", "api/electricpy.fault.ct_saturation.html", "api/electricpy.fault.ct_timetosat.html", "api/electricpy.fault.ct_vpeak.html", "api/electricpy.fault.distmeasz.html", "api/electricpy.fault.double_phase_to_ground_fault.html", "api/electricpy.fault.faultratio.html", "api/electricpy.fault.genlossfield.html", "api/electricpy.fault.highzmini.html", "api/electricpy.fault.highzvpickup.html", "api/electricpy.fault.indmacheigenvalues.html", "api/electricpy.fault.indmachphs3sc.html", "api/electricpy.fault.indmachphs3torq.html", "api/electricpy.fault.instoc.html", "api/electricpy.fault.iopirt.html", "api/electricpy.fault.phase_to_phase_fault.html", "api/electricpy.fault.phs1g.html", "api/electricpy.fault.phs1mvasc.html", "api/electricpy.fault.phs2.html", "api/electricpy.fault.phs2g.html", "api/electricpy.fault.phs3.html", "api/electricpy.fault.phs3mvasc.html", "api/electricpy.fault.pickup.html", "api/electricpy.fault.pktransrecvolt.html", "api/electricpy.fault.poleopen1.html", "api/electricpy.fault.poleopen2.html", "api/electricpy.fault.protectiontap.html", "api/electricpy.fault.residcomp.html", "api/electricpy.fault.scMVA.html", "api/electricpy.fault.short_circuit_mva.html", "api/electricpy.fault.single_phase_to_ground_fault.html", "api/electricpy.fault.symrmsfaultcur.html", "api/electricpy.fault.synmach_Iasym.html", "api/electricpy.fault.synmach_Isym.html", "api/electricpy.fault.synmach_ifault.html", "api/electricpy.fault.tdradial.html", "api/electricpy.fault.thermaltime.html", "api/electricpy.fault.three_phase_fault.html", "api/electricpy.fault.tocreset.html", "api/electricpy.fault.toctriptime.html", "api/electricpy.fault.transmismatch.html", "api/electricpy.fault.trvresistor.html", "api/electricpy.fftplot.html", "api/electricpy.fftsumplot.html", "api/electricpy.funcfft.html", "api/electricpy.geninternalv.html", "api/electricpy.gmd.html", "api/electricpy.harmonics.html", "api/electricpy.hartleydata.html", "api/electricpy.ic_555_astable.html", "api/electricpy.ic_555_monostable.html", "api/electricpy.induction_machine_slip.html", "api/electricpy.instpower.html", "api/electricpy.ipu.html", "api/electricpy.iscrl.html", "api/electricpy.latex.html", "api/electricpy.latex.clatex.html", "api/electricpy.latex.tflatex.html", "api/electricpy.led_resistor.html", "api/electricpy.lm317.html", "api/electricpy.machslip.html", "api/electricpy.math.html", "api/electricpy.math.convolve.html", "api/electricpy.math.funcrms.html", "api/electricpy.math.gausdist.html", "api/electricpy.math.gaussian.html", "api/electricpy.math.probdensity.html", "api/electricpy.math.rfft.html", "api/electricpy.math.step.html", "api/electricpy.motorstartcap.html", "api/electricpy.natfreq.html", "api/electricpy.nlinpf.html", "api/electricpy.non_linear_pf.html", "api/electricpy.parallel_plate_capacitance.html", "api/electricpy.passive.html", "api/electricpy.passive.air_core_inductance.html", "api/electricpy.passive.capbacktoback.html", "api/electricpy.passive.capenergy.html", "api/electricpy.passive.captransfer.html", "api/electricpy.passive.farads.html", "api/electricpy.passive.inductive_voltdiv.html", "api/electricpy.passive.inductorcharge.html", "api/electricpy.passive.inductordischarge.html", "api/electricpy.passive.inductorenergy.html", "api/electricpy.passive.loadedvcapdischarge.html", "api/electricpy.passive.rectifiercap.html", "api/electricpy.passive.timedischarge.html", "api/electricpy.passive.vcapcharge.html", "api/electricpy.passive.vcapdischarge.html", "api/electricpy.peak.html", "api/electricpy.pfcorrection.html", "api/electricpy.phaseline.html", "api/electricpy.phasor.html", "api/electricpy.phs3valpha.html", "api/electricpy.pi_attenuator.html", "api/electricpy.powerflow.html", "api/electricpy.powerimpedance.html", "api/electricpy.powerset.html", "api/electricpy.primary.html", "api/electricpy.propagation_constants.html", "api/electricpy.puchgbase.html", "api/electricpy.reactance.html", "api/electricpy.rms.html", "api/electricpy.rxrecompose.html", "api/electricpy.sampfft.html", "api/electricpy.secondary.html", "api/electricpy.shannondata.html", "api/electricpy.short_circuit_current.html", "api/electricpy.sim.html", "api/electricpy.sim.NewtonRaphson.html", "api/electricpy.sim.digifiltersim.html", "api/electricpy.sim.mbuspowerflow.html", "api/electricpy.sim.nr_pq.html", "api/electricpy.sim.parabolic_response.html", "api/electricpy.sim.ramp_response.html", "api/electricpy.sim.statespace.html", "api/electricpy.sim.step_response.html", "api/electricpy.sinfilt.html", "api/electricpy.slew_rate.html", "api/electricpy.solenoid_inductance.html", "api/electricpy.suspension_insulators.html", "api/electricpy.syncspeed.html", "api/electricpy.t_attenuator.html", "api/electricpy.tap_changing_transformer.html", "api/electricpy.tcycle.html", "api/electricpy.transposez.html", "api/electricpy.unbalance.html", "api/electricpy.vipf.html", "api/electricpy.visu.html", "api/electricpy.visu.InductionMotorCircle.html", "api/electricpy.visu.PowerCircle.html", "api/electricpy.visu.SeriesRLC.html", "api/electricpy.visu.convbar.html", "api/electricpy.visu.phasorplot.html", "api/electricpy.visu.powertriangle.html", "api/electricpy.visu.receiving_end_power_circle.html", "api/electricpy.visu.sending_end_power_circle.html", "api/electricpy.voltdiv.html", "api/electricpy.vscdcbus.html", "api/electricpy.vscgains.html", "api/electricpy.wireresistance.html", "api/electricpy.wrms.html", "api/electricpy.zdecompose.html", "api/electricpy.zener_diode_power.html", "api/electricpy.zener_diode_required_resistor.html", "api/electricpy.zperlength.html", "api/electricpy.zpu.html", "api/electricpy.zrecompose.html", "api/electricpy.zsource.html", "changes.html", "constants.html", "electricpyapi.html", "index.html"]})